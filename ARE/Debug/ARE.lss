
AVRASM ver. 2.2.6  C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm Sun Oct 08 15:09:55 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(13): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(16): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\utils.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(17): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\eeprom_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(18): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\builtin_led.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(19): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\uart_comm.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(20): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\serial_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(21): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm(158): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\score.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm(159): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\pause.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm(160): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\game.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(22): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\led_matrix.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(23): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\distance_sens.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(13): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(16): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\utils.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(17): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\eeprom_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(18): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\builtin_led.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(19): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\uart_comm.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(20): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\serial_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(21): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm(158): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\score.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm(159): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\pause.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main_loop.asm(160): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\game.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(22): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\led_matrix.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(23): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\distance_sens.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm'
                                 
                                 ; Francesco Zoccheddu
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; ARE
                                 ; main
                                 
                                 ; assembler setup
                                 
                                 .cseg
                                 .nooverlap
                                 .org INT_VECTORS_SIZE
                                 
                                 #define FOSC 16000000
                                 
                                 #include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 
                                 #include "utils.asm"
                                 
                                 ; ARE
                                 ; utils
                                 
                                 ; interrupt registers
                                 ; immediate
                                 .def ria = r16
                                 .def rib = r17
                                 .def ric = r18
                                 .def rid = r19
                                 ; non-immediate
                                 .def ri0 = r2
                                 .def ri1 = r3
                                 .def ri2 = r4
                                 .def ri3 = r5
                                 .def ri4 = r6
                                 .def ri5 = r7
                                 .def ri6 = r8
                                 .def ri7 = r9
                                 ; main loop registers
                                 ; immediate
                                 .def rma = r20
                                 .def rmb = r21
                                 .def rmc = r22
                                 .def rmd = r23
                                 .def rme = r24
                                 .def rmf = r25
                                 ; non-immediate
                                 .def rm0 = r10
                                 .def rm1 = r11
                                 .def rm2 = r12
                                 .def rm3 = r13
                                 .def rm4 = r14
                                 .def rm5 = r15
                                 ; mul registers
                                 .def mulh = r1
                                 .def mull = r0
                                 
                                 ; [SOURCE] stack setup
                                 ; @0 (dirty immediate register)
                                 .macro STACK_SETUP
                                 	ldi @0, HIGH(RAMEND)
                                 	out SPH, @0
                                 	ldi @0, LOW(RAMEND)
                                 	out SPL, @0
                                 .endmacro
                                 
                                 ; define 16 bit register H / L macros
                                 ; @0 (name)
                                 ; @1 (value)
                                 .macro _U_16R_DEF
                                 	.equ @0H = @1H
                                 	.equ @0L = @1L
                                 .endmacro
                                 
                                 ; define ISR for interrupt address '@0'
                                 ; @0 (interrupt vector address)
                                 .macro ISR
                                 	.set ISR_PC = PC
                                 	.org @0
                                 		jmp ISR_PC
                                 	.org ISR_PC
                                 .endmacro
                                 
                                 ; define ISR entry '@1' for interrupt address '@0'
                                 ; @0 (interrupt vector address)
                                 ; @1 (ISR entry label)
                                 .macro ISRJ
                                 	.set ISR_PC = PC
                                 	.org @0
                                 		jmp @1
                                 	.org ISR_PC
                                 .endmacro
                                 
                                 ; timer
                                 
                                 #define _TPSCL_0 0
                                 #define _TPSCL_1 1
                                 #define _TPSCL_2 8
                                 #define _TPSCL_3 64
                                 #define _TPSCL_4 256
                                 #define _TPSCL_5 1024
                                 
                                 #define _TCS_0 0
                                 #define _TCS_1 1
                                 #define _TCS_8 2
                                 #define _TCS_64 3
                                 #define _TCS_256 4
                                 #define _TCS_1024 5
                                 
                                 #define TMS(s) (s / 1000.0)
                                 #define TUS(s) (s / 1000000.0)
                                 #define TNS(s) (s / 1000000000.0)
                                 
                                 #define TTOP(pscl, s) (s * FOSC / pscl)
                                 #define _TPSCL_OK(pscl, m, s) ((s * FOSC) < (pscl * m))
                                 #define _TPSCL_MIN(m, s) (_TPSCL_OK(_TPSCL_1, m, s) ? _TPSCL_1 : (_TPSCL_OK(_TPSCL_2, m, s) ? _TPSCL_2 : (_TPSCL_OK(_TPSCL_3, m, s) ? _TPSCL_3 : (_TPSCL_OK(_TPSCL_4, m, s) ? _TPSCL_4 : (_TPSCL_OK(_TPSCL_5, m, s) ? _TPSCL_5 : -1)))))
                                 #define TPSCL_MIN_8(s) _TPSCL_MIN(255, s)
                                 #define TPSCL_MIN_16(s) _TPSCL_MIN(65535, s)
                                 #define _TCS_MIN(m, s) (_TPSCL_OK(_TPSCL_1, m, s) ? 1 : (_TPSCL_OK(_TPSCL_2, m, s) ? 2 : (_TPSCL_OK(_TPSCL_3, m, s) ? 3 : (_TPSCL_OK(_TPSCL_4, m, s) ? 4 : (_TPSCL_OK(_TPSCL_5, m, s) ? 5 : -1)))))
                                 #define TCS_MIN_8(s) _TCS_MIN(255, s)
                                 #define TCS_MIN_16(s) _TCS_MIN(65535, s)
                                 
                                 #define COMA 6
                                 #define COMA_MSK(x) (x & 0b11)
                                 #define COMA_VAL(x) (COMA_MSK(x) << COMA)
                                 #define COMB 4
                                 #define COMB_MSK(x) (x & 0b11)
                                 #define COMB_VAL(x) (COMB_MSK(x) << COMB)
                                 #define COMC 2
                                 #define COMC_MSK(x) (x & 0b11)
                                 #define COMC_VAL(x) (COMC_MSK(x) << COMC)
                                 #define WGMA 0
                                 #define WGMA_MSK(x) (x & 0b11)
                                 #define WGMA_VAL(x) (WGMA_MSK(x) << WGMA)
                                 #define WGMB 3
                                 #define WGMB_MSK(x) (x >> 2)
                                 #define WGMB_VAL(x) (WGMB_MSK(x) << WGMB)
                                 #define CS 0
                                 #define CS_MSK(x) (x & 0b111)
                                 #define CS_VAL(x) (CS_MSK(x) << CS)
                                 #define ICN 7
                                 #define ICES 6
                                 #define FOCA 7
                                 #define FOCB 6
                                 #define FOCC 5
                                 #define ICIE 5
                                 #define OCIEC 3
                                 #define OCIEB 2
                                 #define OCIEA 1
                                 #define TOIE 0
                                 #define ICF 5
                                 #define OCFC 3
                                 #define OCFB 2
                                 #define OCFA 1
                                 #define TOV 0
                                 #define ICN_VAL (1 << 7)
                                 #define ICES_VAL (1 << 6)
                                 #define FOCA_VAL (1 << 7)
                                 #define FOCB_VAL (1 << 6)
                                 #define FOCC_VAL (1 << 5)
                                 #define ICIE_VAL (1 << 5)
                                 #define OCIEC_VAL (1 << 3)
                                 #define OCIEB_VAL (1 << 2)
                                 #define OCIEA_VAL (1 << 1)
                                 #define TOIE_VAL (1 << 0)
                                 #define ICF_VAL (1 << 5)
                                 #define OCFC_VAL (1 << 3)
                                 #define OCFB_VAL (1 << 2)
                                 #define OCFA_VAL (1 << 1)
                                 #define TOV_VAL (1 << 0)
                                 
                                 ; define timer macros
                                 ; @0 (prefix)
                                 ; @1 (timer index)
                                 .macro TIM_DEF
                                 	.if (@1 != 0) && (@1 != 1) && (@1 != 2) && (@1 != 3) && (@1 != 4) && (@1 != 5) 
                                 		.error "Bad timer index"
                                 	.else
                                 		.equ @0_TCCRA = TCCR@1A
                                 		.equ @0_TCCRB = TCCR@1B
                                 		.equ @0_TIMSK = TIMSK@1
                                 		.equ @0_TIFR = TIFR@1
                                 		.equ @0_OCAaddr = OC@1Aaddr
                                 		.equ @0_OCBaddr = OC@1Baddr
                                 		.equ @0_OVFaddr = OVF@1addr
                                 		.if (@1 == 0) || (@1 == 2)
                                 			.equ @0_TCNT = TCNT@1
                                 			.equ @0_OCRA = OCR@1A
                                 			.equ @0_OCRB = OCR@1B
                                 		.else
                                 			.equ @0_TCCRC = TCCR@1C
                                 			.equ @0_OCCaddr = OC@1Caddr
                                 			.equ @0_ICPaddr = ICP@1addr
                                 			_U_16R_DEF @0_ICR, ICR@1
                                 			_U_16R_DEF @0_TCNT, TCNT@1
                                 			_U_16R_DEF @0_OCRA, OCR@1A
                                 			_U_16R_DEF @0_OCRB, OCR@1B
                                 			_U_16R_DEF @0_OCRC, OCR@1C
                                 		.endif
                                 	.endif
                                 .endmacro
                                 
                                 #define T16_PROPF 15625
                                 #define T16_MAX 4.194304
                                 #define T8_PROPF 4000000
                                 #define T8_MAX 0.016384
                                 
                                 #define _t_tl @0
                                 #define _t_th @1
                                 #define _t_cs @2
                                 
                                 #define _t_comp1 64
                                 #define _t_comp2 512
                                 #define _t_comp3 4096
                                 #define _t_comp4 16384
                                 
                                 ; [SOURCE] calculate cs
                                 ; @0 (time * propf l)
                                 ; @1 (time * propf h)
                                 ; @2 (cs out)
                                 .macro T_SRC_SR_CALC
                                 	mov _t_cs, _t_tl
                                 	andi _t_tl, ~LOW(_t_comp1 - 1)
                                 	brne _t_src_cs_2m
                                 	tst _t_th
                                 	breq _t_src_cs_1
                                 _t_src_cs_2m:
                                 	mov _t_tl, _t_cs
                                 	mov _t_cs, _t_th 
                                 	andi _t_th, ~HIGH(_t_comp2 - 1)
                                 	breq _t_src_cs_2
                                 	andi _t_th, ~HIGH(_t_comp3 - 1)
                                 	breq _t_src_cs_3
                                 	andi _t_th, ~HIGH(_t_comp4 - 1)
                                 	breq _t_src_cs_4
                                 _t_src_cs_5:
                                 	mov _t_th, _t_cs
                                 	ldi _t_cs, 5
                                 	ret
                                 _t_src_cs_1:
                                 	mov _t_th, _t_cs
                                 	lsl _t_th
                                 	lsl _t_th
                                 	ldi _t_cs, 1
                                 	ret
                                 _t_src_cs_2:
                                 	bst _t_cs, 0
                                 	bld _t_th, 7
                                 	clr _t_cs
                                 	lsr _t_tl
                                 	ror _t_cs
                                 	or _t_th, _t_tl
                                 	mov _t_tl, _t_cs
                                 	ldi _t_cs, 2
                                 	ret
                                 _t_src_cs_3:
                                 	swap _t_tl 
                                 	mov _t_th, _t_tl
                                 	andi _t_th, 0b00001111
                                 	andi _t_tl, 0b11110000
                                 	swap _t_cs
                                 	andi _t_cs, 0b11110000
                                 	or _t_th, _t_cs
                                 	ldi _t_cs, 3
                                 	ret
                                 _t_src_cs_4:
                                 	mov _t_th, _t_cs
                                 	lsl _t_tl
                                 	rol _t_th
                                 	lsl _t_tl
                                 	rol _t_th
                                 	ldi _t_cs, 4
                                 	ret
                                 .endmacro
                                 
                                 #undef _t_comp1
                                 #undef _t_comp2
                                 #undef _t_comp3
                                 #undef _t_comp4
                                 
                                 #undef _t_tl
                                 #undef _t_th
                                 #undef _t_cs
                                 
                                 t_sr_calc:
000072 2f64
000073 7c40
000074 f411
000075 2355
000076 f059
000077 2f46
000078 2f65
000079 7f5e
00007a f061
00007b 7f50
00007c f099
00007d 7c50
00007e f0d1
00007f 2f56
000080 e065
000081 9508
000082 2f56
000083 0f55
000084 0f55
000085 e061
000086 9508
000087 fb60
000088 f957
000089 2766
00008a 9546
00008b 9567
00008c 2b54
00008d 2f46
00008e e062
00008f 9508
000090 9542
000091 2f54
000092 705f
000093 7f40
000094 9562
000095 7f60
000096 2b56
000097 e063
000098 9508
000099 2f56
00009a 0f44
00009b 1f55
00009c 0f44
00009d 1f55
00009e e064
00009f 9508                      	T_SRC_SR_CALC rma, rmb, rmc
                                 
                                 t_isr_calc:
0000a0 2f20
0000a1 7c00
0000a2 f411
0000a3 2311
0000a4 f059
0000a5 2f02
0000a6 2f21
0000a7 7f1e
0000a8 f061
0000a9 7f10
0000aa f099
0000ab 7c10
0000ac f0d1
0000ad 2f12
0000ae e025
0000af 9508
0000b0 2f12
0000b1 0f11
0000b2 0f11
0000b3 e021
0000b4 9508
0000b5 fb20
0000b6 f917
0000b7 2722
0000b8 9506
0000b9 9527
0000ba 2b10
0000bb 2f02
0000bc e022
0000bd 9508
0000be 9502
0000bf 2f10
0000c0 701f
0000c1 7f00
0000c2 9522
0000c3 7f20
0000c4 2b12
0000c5 e023
0000c6 9508
0000c7 2f12
0000c8 0f00
0000c9 1f11
0000ca 0f00
0000cb 1f11
0000cc e024
0000cd 9508                      	T_SRC_SR_CALC ria, rib, ric
                                 
                                 ; IO
                                 
                                 ; define IO macros
                                 ; @0 (prefix)
                                 ; @1 (IO letter)
                                 .macro IO_DEF
                                 	.equ @0_PIN = PIN@1
                                 	.equ @0_PORT = PORT@1
                                 	.equ @0_DDR = DDR@1
                                 .endmacro
                                 
                                 #include "eeprom_prog.asm"
                                 
                                 ; ARE
                                 ; EEPROM programming
                                 ; dirty EEPROM module and registers
                                 
                                 #define _ep_addrl @0
                                 #define _ep_addrh @1
                                 
                                 ; [SOURCE] set EEPROM address to '@1:@0'
                                 ; @0 (eeprom address l)
                                 ; @1 (eeprom address h)
                                 .macro EP_SRC_ADDR
                                 	out EEARL, _ep_addrl
                                 	out EEARH, _ep_addrh
                                 .endmacro
                                 
                                 ; [SOURCE] wait until EEPROM is ready
                                 .macro EP_SRC_WAIT
                                 _ep_l_src_wait:
                                 	sbic EECR, EEPE
                                 	rjmp _ep_l_src_wait
                                 .endmacro
                                 
                                 #define _ep_data @0
                                 
                                 ; [SOURCE] immediately write '@2' to EEPROM
                                 ; @0 (data)
                                 .macro EP_SRC_FWRITE
                                 	out EEDR, _ep_data
                                 	sbi EECR, EEMPE
                                 	sbi EECR, EEPE
                                 .endmacro
                                 
                                 ; [SOURCE] immediately read to '@2' register from EEPROM
                                 ; @0 (data out)
                                 .macro EP_SRC_FREAD
                                 	sbi EECR, EERE
                                 	in _ep_data, EEDR
                                 .endmacro
                                 
                                 #undef _ep_data
                                 #include "builtin_led.asm"
                                 
                                 ; ARE
                                 ; builtin LED
                                 ; dirty PORTB, DDRB, PINB
                                 
                                 #define _BL_IO B
                                 
                                 IO_DEF _BL, _BL_IO
                                 #define _BL_BIT 7
                                 
                                 #define _bl_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_SETUP
                                 	; set data direction register to output for LED pin
                                 	ldi _bl_tmp, 1 << _BL_BIT
                                 	out _BL_DDR, _bl_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] turn builtin LED on
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_ON
                                 	ser _bl_tmp
                                 	out _BL_PORT, _bl_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] turn builtin LED off
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_OFF
                                 	clr _bl_tmp
                                 	out _BL_PORT, _bl_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] toggle builtin LED state
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_TOGGLE
                                 	ser _bl_tmp
                                 	out _BL_PIN, _bl_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] set builtin LED state (dirty all port pins)
                                 ; @0 (state on bit 7)
                                 .macro BL_SRC_OUT
                                 	out _BL_PORT, _bl_tmp
                                 .endmacro
                                 
                                 #undef _bl_tmp
                                 #include "uart_comm.asm"
                                 
                                 ; ARE
                                 ; UART communication
                                 ; dirty USART0 module and registers
                                 
                                 #define _UC_BAUDRATE 9600
                                 
                                 #define _UC_UCSRA_VAL 0
                                 #define _UC_UCSRB_VAL (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)
                                 #define _UC_UCSRC_VAL (2 << UMSEL0) | (3 << UCSZ00)
                                 #define _UC_UDRE_VAL (1 << UDRIE0)
                                 #define _UC_UBRR FOSC / 16 / _UC_BAUDRATE - 1
                                 
                                 #define UC_TREADY_INTaddr UDRE0addr
                                 #define UC_RCOMPLETE_INTaddr URXC0addr
                                 
                                 #define _uc_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro UC_SRC_SETUP
                                 	; set UBRRR
                                 	ldi _uc_tmp, HIGH( _UC_UBRR )
                                 	sts UBRR0H, _uc_tmp
                                 	ldi _uc_tmp, LOW( _UC_UBRR )
                                 	sts UBRR0L, _uc_tmp
                                 	; set UCSRA
                                 	ldi _uc_tmp, _UC_UCSRA_VAL
                                 	sts UCSR0A, _uc_tmp
                                 	; set UCSRB
                                 	ldi _uc_tmp, _UC_UCSRB_VAL
                                 	sts UCSR0B, _uc_tmp
                                 	; set UCSRC
                                 	ldi _uc_tmp, _UC_UCSRC_VAL
                                 	sts UCSR0C, _uc_tmp
                                 .endmacro
                                 
                                 #undef _uc_tmp
                                 
                                 #define _uc_data @0
                                 #define _uc_tmp @1
                                 
                                 ; [SOURCE] transmit '_uc_data' data without checking whether the buffer is empty
                                 ; @0 (data register)
                                 .macro UC_SRC_FT
                                 	sts UDR0, _uc_data
                                 .endmacro
                                 
                                 ; [SOURCE] receive to '_uc_data' register without checking whether the buffer is not empty
                                 ; @0 (data register)
                                 .macro UC_SRC_FR
                                 	lds _uc_data, UDR0
                                 .endmacro
                                 
                                 ; [SOURCE] transmit '_uc_data' data as soon as the buffery is empty
                                 ; @0 (data register)
                                 ; @1 (dirty immediate register)
                                 .macro UC_SRC_T
                                 _uc_l_src_t:
                                 	lds _uc_tmp, UCSR0A
                                 	sbrs _uc_tmp, UDRE0
                                 	rjmp _uc_l_src_t
                                 	UC_SRC_FT _uc_data
                                 .endmacro
                                 
                                 ; [SOURCE] receive to '_uc_data' register as soon as the buffer is not empty
                                 ; @0 (data register)
                                 .macro UC_SRC_R
                                 _uc_l_src_r:
                                 	lds _uc_data, UCSR0A
                                 	sbrs _uc_data, RXC0
                                 	rjmp _uc_l_src_r
                                 	UC_SRC_FR _uc_data
                                 .endmacro
                                 
                                 ; [SOURCE] enable / disable transmit ready interrupt
                                 ; @0 (boolean interrupt state)
                                 ; @1 (dirty immediate register)
                                 .macro UC_SRC_TREADY_INTE
                                 	ldi _uc_tmp, _uc_data ? ( _UC_UCSRB_VAL | _UC_UDRE_VAL ) : _UC_UCSRB_VAL
                                 	sts UCSR0B, _uc_tmp
                                 .endmacro
                                 
                                 #undef _uc_data
                                 #undef _uc_tmp
                                 #include "serial_prog.asm"
                                 
                                 ; ARE
                                 ; serial programming
                                 ; dirty UART RX complete interrupt
                                 
                                 #define _sp_data ric
                                 #define _sp_tmp rib
                                 
                                 _sp_sr_ut:
0000ce 9110 00c0
0000d0 ff15
0000d1 cffc
0000d2 9320 00c6                 	UC_SRC_T _sp_data, _sp_tmp
0000d4 9508                      	ret
                                 
                                 _sp_sr_ur:
0000d5 9120 00c0
0000d7 ff27
0000d8 cffc
0000d9 9120 00c6                 	UC_SRC_R _sp_data
0000db 9508                      	ret
                                 
                                 #define _SP_OPCODE_MSK ~(1 << _SP_OPCODE_RW)
                                 #define _SP_OPCODE_RW 7
                                 
                                 #define _sp_b1 ri0
                                 #define _sp_b2 ria
                                 
000032 940c 00dc                 ISR UC_RCOMPLETE_INTaddr
0000dc 2711
0000dd b915                      	BL_SRC_OFF _sp_tmp
                                 	; store bit 1 in 'b1'
0000de dff6                      	rcall _sp_sr_ur 
0000df 2e22                      	mov _sp_b1, _sp_data
                                 	; store bit 2 in 'b2'
0000e0 dff4                      	rcall _sp_sr_ur 
0000e1 2f02                      	mov _sp_b2, _sp_data
                                 	; eventually store bit 3 in 'data'
0000e2 fc27                      	sbrc _sp_b1, _SP_OPCODE_RW
0000e3 c008                      	rjmp _sp_l_isr_write
0000e4 99f9
0000e5 cffe                      	EP_SRC_WAIT
0000e6 bd01
0000e7 bd12                      	EP_SRC_ADDR _sp_b2, _sp_tmp
0000e8 9af8
0000e9 b520                      	EP_SRC_FREAD _sp_data
0000ea dfe3                      	rcall _sp_sr_ut
0000eb 9518                      	reti
                                 _sp_l_isr_write:
0000ec dfe8                      	rcall _sp_sr_ur
0000ed 99f9
0000ee cffe                      	EP_SRC_WAIT
0000ef bd01
0000f0 bd12                      	EP_SRC_ADDR _sp_b2, _sp_tmp
0000f1 bd20
0000f2 9afa
0000f3 9af9                      	EP_SRC_FWRITE _sp_data
0000f4 9518                      	reti
                                 
                                 #undef _sp_b1
                                 #undef _sp_b2
                                 
                                 #undef _sp_data
                                 #undef _sp_tmp
                                 
                                 #define sp_data rma
                                 #define sp_addrh rmb
                                 #define sp_addrl rmc
                                 
                                 .macro SP_SRC_LOAD
                                 	ldi sp_addrl, LOW( @0 )
                                 	ldi sp_addrh, HIGH( @0 )
                                 	rcall sp_sr_load
                                 .endmacro
                                 
                                 .macro SP_SRC_STORE
                                 	ldi sp_addrl, LOW( @0 )
                                 	ldi sp_addrh, HIGH( @0 )
                                 	rcall sp_sr_store
                                 .endmacro
                                 
                                 sp_sr_load:
0000f5 99f9
0000f6 cffe                      	EP_SRC_WAIT
0000f7 bd61
0000f8 bd52                      	EP_SRC_ADDR sp_addrl, sp_addrh
0000f9 9af8
0000fa b540                      	EP_SRC_FREAD sp_data
0000fb 9508                      	ret
                                 
                                 sp_sr_store:
0000fc 99f9
0000fd cffe                      	EP_SRC_WAIT
0000fe bd61
0000ff bd52                      	EP_SRC_ADDR sp_addrl, sp_addrh
000100 bd40
000101 9afa
000102 9af9                      	EP_SRC_FWRITE sp_data
000103 9508                      	ret
                                 
                                 #include "main_loop.asm"
                                 
                                 ; ARE
                                 ; EEPROM programming
                                 ; dirty timer 0 and registers
                                 
                                 
                                 #define _ML_TIMER 2
                                 
                                 TIM_DEF _ML, _ML_TIMER
                                 
                                 #define ML_SCREEN_PAUSE 2
                                 #define ML_SCREEN_SCORE 1
                                 #define ML_SCREEN_GAME 0
                                 
                                 #define _ml_setup_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro ML_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _ml_setup_tmp
                                 	sts _ML_TCCRA, _ml_setup_tmp
                                 	sts _ML_TCCRB, _ml_setup_tmp
                                 	; set timer interrupt mask
                                 	ldi _ml_setup_tmp, OCIEA_VAL
                                 	sts _ML_TIMSK, _ml_setup_tmp
                                 	; setup pause
                                 	clr _ml_setup_tmp
                                 	sts _ml_ram_pprog, _ml_setup_tmp
                                 	ldi _ml_setup_tmp, ML_SCREEN_PAUSE
                                 	sts ml_ram_screen, _ml_setup_tmp
                                 	P_SRC_SETUP _ml_setup_tmp
                                 	G_SRC_SETUP _ml_setup_tmp, rmc
                                 	S_SRC_SETUP _ml_setup_tmp
                                 .endmacro
                                 
                                 #undef _ml_setup_tmp
                                 
                                 
                                 .dseg
000200                           _ml_ram_tcs: .byte 1
000201                           ml_ram_screen: .byte 1
000202                           _ml_ram_pprog: .byte 1
000203                           _ml_ram_pabsnc_add: .byte 1
000204                           _ml_ram_pprsnc_sub: .byte 1
                                 .cseg
                                 
                                 .macro ML_SRC_SPLOAD
                                 	#define ML_TIM 0.002
                                 
                                 	ldi rma, LOW( int(ML_TIM * T8_PROPF+0.5) )
                                 	ldi rmb, HIGH( int(ML_TIM * T8_PROPF+0.5) )
                                 
                                 	call t_sr_calc
                                 	sts _ML_OCRA, rmb
                                 	sts _ml_ram_tcs, rmc
                                 
                                 	ldi rma, 1
                                 	sts _ml_ram_pabsnc_add, rma
                                 	ldi rma, 4
                                 	sts _ml_ram_pprsnc_sub, rma
                                 	P_SRC_SPLOAD rma
                                 	G_SRC_SPLOAD rma
                                 .endmacro
                                 
                                 #define ml_col rmf
                                 #define ml_cl rmd
                                 #define ml_ch rme
                                 #define ml_tmp1 rma
                                 #define ml_tmp2 rmb
                                 #define ml_tmp3 rmc
                                 #define ml_tmp4 rm0
                                 
                                 ml_l_loop:
                                 s_l_set_done:
                                 _ml_l_loop_begin:
000104 e190                      	ldi ml_col, 16
                                 
000105 9140 0201                 	lds ml_tmp1, ml_ram_screen
000107 3040                      	cpi ml_tmp1, ML_SCREEN_GAME
000108 f4b9                      	brne _ml_l_loop_update_paused
                                 
000109 c0aa                      	rjmp g_l_update
                                 g_l_update_done:
                                 	
00010a 9140 0255                 	lds ml_tmp1, ds_ram_out_state
00010c 9150 0202                 	lds ml_tmp2, _ml_ram_pprog
00010e 2344                      	tst ml_tmp1
00010f f441                      	brne _ml_l_update_sub
000110 9140 0203                 	lds ml_tmp1, _ml_ram_pabsnc_add
000112 0f54                      	add ml_tmp2, ml_tmp1
000113 f448                      	brcc _ml_l_update_done
000114 e042                      	ldi ml_tmp1, ML_SCREEN_PAUSE
000115 9340 0201                 	sts ml_ram_screen, ml_tmp1
000117 c0e0                      	rjmp g_l_pause
                                 _ml_l_update_sub:
000118 9140 0204                 	lds ml_tmp1, _ml_ram_pprsnc_sub
00011a 1b54                      	sub ml_tmp2, ml_tmp1
00011b f408                      	brcc _ml_l_update_done
00011c 2755                      	clr ml_tmp2
                                 g_l_pause_done:
                                 _ml_l_update_done:
00011d 9350 0202                 	sts _ml_ram_pprog, ml_tmp2
                                 	
00011f c003                      	rjmp _ml_l_loop_column
                                 _ml_l_loop_update_paused:
000120 3042                      	cpi ml_tmp1, ML_SCREEN_PAUSE
000121 f409                      	brne _ml_l_loop_column
000122 c06c                      	rjmp p_l_update
                                 
                                 p_l_update_done:
                                 _ml_l_loop_column:
000123 959a                      	dec ml_col
                                 
000124 9140 0201                 	lds ml_tmp1, ml_ram_screen
000126 3040                      	cpi ml_tmp1, ML_SCREEN_GAME
000127 f411                      	brne _ml_l_loop_draw_paused
000128 c0af                      	rjmp g_l_draw
000129 c003                      	rjmp _ml_l_loop_flush
                                 _ml_l_loop_draw_paused:
00012a 3042                      	cpi ml_tmp1, ML_SCREEN_PAUSE
00012b f4a9                      	brne s_l_draw
00012c c04c                      	rjmp p_l_draw
                                 
                                 s_l_draw_done:
                                 p_l_draw_done:
                                 g_l_draw_done:
                                 _ml_l_loop_flush:
00012d 94f8                      	cli
00012e c0f7                      	rjmp lm_l_sendcol
                                 
                                 ml_l_sendcol_done:
                                 
                                 #define _ml_lock ml_ch
                                 
00012f 2744                      	clr ml_tmp1
000130 9340 00b2                 	sts _ML_TCNT, ml_tmp1
000132 9140 0200                 	lds ml_tmp1, _ml_ram_tcs
000134 9340 00b1                 	sts _ML_TCCRB, ml_tmp1
000136 ef8f                      	ser _ml_lock
000137 9478                      	sei
                                 
                                 _ml_l_loop_wait:
000138 2388                      	tst _ml_lock
000139 f7f1                      	brne _ml_l_loop_wait
                                 
00013a 2399                      	tst ml_col
00013b f739                      	brne _ml_l_loop_column
00013c cfc7                      	rjmp _ml_l_loop_begin
                                 
00001a 940c 013d                 ISR _ML_OCAaddr
00013d 2788                      	clr _ml_lock
00013e 9380 00b1                 	sts _ML_TCCRB, _ml_lock
000140 9518                      	reti
                                 
                                 #undef _ml_lock
                                 
                                 #include "score.asm"
                                 
                                 
                                 TIM_DEF _S, _S_TIMER
                                 
                                 #define _s_setup_tmp @0
                                 #define _S_STATE_SCR 0
                                 
                                 .macro S_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _s_setup_tmp
                                 	sts _S_TCCRA, _s_setup_tmp
                                 	sts _S_TCCRB, _s_setup_tmp
                                 	sts _S_TCCRC, _s_setup_tmp
                                 	; set timer interrupt mask
                                 	ldi _s_setup_tmp, OCIEA_VAL
                                 	sts _S_TIMSK, _s_setup_tmp
                                 	; set state
                                 	ldi _s_setup_tmp, _S_STATE_SCR
                                 	sts _s_ram_state, _s_setup_tmp
                                 .endmacro
                                 
                                 #undef _s_setup_tmp
                                 
                                 .dseg
000205                           _s_ram_state: .byte 1
000206                           _s_ram_bcd_top: .byte 4
00020a                           _s_ram_bcd_scr: .byte 4
                                 .cseg
                                 
                                 s_l_draw:
000141 2777                      	clr ml_cl
000142 9140 0205                 	lds ml_tmp1, _s_ram_state
000144 3040                      	cpi ml_tmp1, _S_STATE_SCR
000145 f019                      	breq _s_l_draw_scr
000146 efec                      	ldi ZL, LOW( bm_top * 2)
000147 e0f5                      	ldi ZH, HIGH( bm_top * 2)
000148 c002                      	rjmp _s_l_draw_text
                                 _s_l_draw_scr:
000149 eeec                      	ldi ZL, LOW( bm_scr * 2)
00014a e0f5                      	ldi ZH, HIGH( bm_scr * 2)
                                 _s_l_draw_text:
00014b 2744                      	clr ml_tmp1
00014c 0fe9                      	add ZL, ml_col
00014d 1ff4                      	adc ZH, ml_tmp1
00014e 9184                      	lpm ml_ch, Z
                                 	; draw score
00014f cfdd                      	rjmp s_l_draw_done
                                 
                                 s_l_set:
                                 	; set timer
                                 	#define S_TIM 1
000150 e049                      	ldi rma, LOW( int(S_TIM * T16_PROPF + 0.5))
000151 e35d                      	ldi rmb, HIGH( int(S_TIM * T16_PROPF + 0.5))
000152 940e 0072                 	call t_sr_calc
000154 9350 0129                 	sts _S_OCRAH, rmb
000156 9340 0128                 	sts _S_OCRAL, rma
000158 6068                      	ori rmc, WGMB_VAL(4)
000159 9360 0121                 	sts _S_TCCRB, rmc
                                 	; save score
                                 	; load score
00015b e0a6                      	ldi XL, LOW(_s_ram_bcd_top)
00015c e0b2                      	ldi XH, HIGH(_s_ram_bcd_top)
00015d ed4b                      	ldi ml_tmp1, LOW(987)
00015e e053                      	ldi ml_tmp2, HIGH(987)
00015f d006                      	rcall _s_sr_tobcd
000160 e0aa                      	ldi XL, LOW(_s_ram_bcd_scr)
000161 e0b2                      	ldi XH, HIGH(_s_ram_bcd_scr)
000162 ed4b                      	ldi ml_tmp1, LOW(987)
000163 e053                      	ldi ml_tmp2, HIGH(987)
000164 d001                      	rcall _s_sr_tobcd
000165 cf9e                      	rjmp s_l_set_done
                                 
                                 _s_sr_tobcd:
000166 3e48                      	cpi ml_tmp1, LOW(1000)
000167 e063                      	ldi ml_tmp3, HIGH(1000)
000168 0756                      	cpc ml_tmp2, ml_tmp3
000169 f410                      	brsh _s_l_sr_tobcd_overflow
00016a c001                      	rjmp _s_l_sr_tobcd_overflow ; remove
00016b 9508                      	ret
                                 _s_l_sr_tobcd_overflow:
00016c e069                      	ldi ml_tmp3, 9
00016d 936d                      	st X+, ml_tmp3
00016e 936d                      	st X+, ml_tmp3
00016f 936d                      	st X+, ml_tmp3
000170 e06a                      	ldi ml_tmp3, 10
000171 936c                      	st X, ml_tmp3
000172 9508                      	ret
                                 	
                                 
00005e 940c 0173                 ISR _S_OCAaddr
000173 9100 0205                 	lds ria, _s_ram_state
000175 9500                      	com ria
000176 9300 0205                 	sts _s_ram_state, ria
000178 9518                      	reti
                                 #include "pause.asm"
                                 
                                 .dseg
00020e                           _p_ram_prog: .byte 1
00020f                           _p_ram_prsnc_add: .byte 1
000210                           _p_ram_absnc_sub: .byte 1
                                 .cseg
                                 
                                 #define _p_setup_tmp @0
                                 
                                 .macro P_SRC_SETUP
                                 	clr _p_setup_tmp
                                 	sts _p_ram_prog, _p_setup_tmp
                                 .endmacro
                                 
                                 #undef _p_setup_tmp
                                 
                                 .macro P_SRC_SPLOAD
                                 	ldi @0, 8
                                 	sts _p_ram_absnc_sub, @0
                                 	ldi @0, 4
                                 	sts _p_ram_prsnc_add, @0
                                 .endmacro
                                 
                                 #define _P_PROGRESS_COL 0b00000011
                                 
                                 #define _p_col ml_col
                                 #define _p_cl ml_cl
                                 #define _p_ch ml_ch
                                 #define _p_tmp ml_tmp1
                                 
                                 p_l_draw:
000179 9140 020e                 	lds _p_tmp, _p_ram_prog
00017b 9540                      	com _p_tmp
00017c 9546                      	lsr _p_tmp
00017d 9546                      	lsr _p_tmp
00017e 9546                      	lsr _p_tmp
00017f 9546                      	lsr _p_tmp
000180 1749                      	cp _p_tmp, _p_col
000181 f418                      	brsh _p_l_src_draw_pause
000182 e0f5                      	ldi ZH, HIGH(bm_resuming * 2)
000183 ecec                      	ldi ZL, LOW(bm_resuming * 2)
000184 c002                      	rjmp _p_l_src_draw_begin
                                 _p_l_src_draw_pause:
000185 e0f5                      	ldi ZH, HIGH(bm_pause * 2)
000186 e9ec                      	ldi ZL, LOW(bm_pause * 2)
                                 _p_l_src_draw_begin:
000187 2f49                      	mov _p_tmp, _p_col
000188 0f44                      	lsl _p_tmp
000189 0fe4                      	add ZL, _p_tmp
00018a 2744                      	clr _p_tmp
00018b 1ff4                      	adc ZH, _p_tmp
00018c 9175                      	lpm _p_cl, Z+
00018d 9184                      	lpm _p_ch, Z
                                 _p_l_src_draw_done:
00018e cf9e                      	rjmp p_l_draw_done
                                 
                                 #undef _p_col
                                 #undef _p_cl
                                 #undef _p_ch
                                 #undef _p_tmp
                                 
                                 #define _p_tmp1 ml_tmp1
                                 #define _p_tmp2 ml_tmp2
                                 
                                 p_l_update:
00018f 9140 0255                 	lds _p_tmp1, ds_ram_out_state
000191 9150 020e                 	lds _p_tmp2, _p_ram_prog
000193 2344                      	tst _p_tmp1
000194 f039                      	breq _p_l_src_update_sub
000195 9140 020f                 	lds _p_tmp1, _p_ram_prsnc_add
000197 0f54                      	add _p_tmp2, _p_tmp1
000198 f440                      	brcc _p_l_src_update_done
000199 9350 0201                 	sts ml_ram_screen, _p_tmp2
00019b c060                      	rjmp g_l_resume
                                 _p_l_src_update_sub:
00019c 9140 0210                 	lds _p_tmp1, _p_ram_absnc_sub
00019e 1b54                      	sub _p_tmp2, _p_tmp1
00019f f408                      	brcc _p_l_src_update_done
0001a0 2755                      	clr _p_tmp2
                                 g_l_resume_done:
                                 _p_l_src_update_done:
0001a1 9350 020e                 	sts _p_ram_prog, _p_tmp2
0001a3 cf7f                      	rjmp p_l_update_done
                                 
                                 #undef _p_tmp1
                                 #undef _p_tmp2
                                 #include "game.asm"
                                 
                                 .dseg
000211                           _g_ram_smooth: .byte 1
000212                           _g_ram_smooth_slow: .byte 1
000213                           _g_ram_dsval: .byte 1
000214                           _g_ram_dsval_slow: .byte 1
000215                           _g_ram_col: .byte 1
000216                           _g_ram_frame: .byte 16*3
000246                           _g_ram_tccrb: .byte 1
000247                           _g_ram_spawn_countdown: .byte 1
000248                           _g_ram_spawn_period: .byte 1
000249                           _g_ram_scorel: .byte 1
00024a                           _g_ram_scoreh: .byte 1
                                 .cseg
                                 
                                 #define _G_TIMER 3
                                 
                                 TIM_DEF _G, _G_TIMER
                                 
                                 #define _g_setup_tmp1 @0
                                 #define _g_setup_tmp2 @1
                                 
                                 .macro G_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _g_setup_tmp1
                                 	sts _G_TCCRA, _g_setup_tmp1
                                 	sts _G_TCCRB, _g_setup_tmp1
                                 	sts _G_TCCRC, _g_setup_tmp1
                                 	; set timer interrupt mask
                                 	ldi _g_setup_tmp1, OCIEA_VAL
                                 	sts _G_TIMSK, _g_setup_tmp1
                                 	; clear frame
                                 	ldi XL, LOW( _g_ram_frame )
                                 	ldi XH, HIGH( _g_ram_frame )
                                 	clr _g_setup_tmp2
                                 	ldi _g_setup_tmp1, 16*3
                                 _g_l_setup_clear_loop:
                                 	st X+, _g_setup_tmp2
                                 	dec _g_setup_tmp1
                                 	brne _g_l_setup_clear_loop
                                 	;set empty
                                 	ldi _g_setup_tmp1, 1
                                 	sts _g_ram_spawn_countdown, _g_setup_tmp1
                                 	clr _g_setup_tmp1
                                 	sts _g_ram_scorel, _g_setup_tmp1
                                 	sts _g_ram_scoreh, _g_setup_tmp1
                                 .endmacro
                                 
                                 #undef _g_setup_tmp1
                                 #undef _g_setup_tmp2
                                 
                                 .macro G_SRC_SPLOAD
                                 #define ML_SMOOTH 8
                                 #define ML_SMOOTH_SLOW 3
                                 #define G_S 0.200
                                 	ldi rma, 3
                                 	sts _g_ram_spawn_period, rma
                                 	ldi rma, ML_SMOOTH
                                 	sts _g_ram_smooth, rma
                                 	ldi rma, ML_SMOOTH_SLOW
                                 	sts _g_ram_smooth_slow, rma
                                 
                                 	ldi rma, LOW( int(G_S * T16_PROPF + 0.5))
                                 	ldi rmb, HIGH( int(G_S * T16_PROPF + 0.5))
                                 	rcall t_sr_calc
                                 	sts _G_OCRAH, rmb
                                 	sts _G_OCRAL, rma
                                 	ori rmc, WGMB_VAL(4)
                                 	sts _g_ram_tccrb, rmc
                                 .endmacro
                                 
                                 
                                 #define _g_tmp1 ml_tmp1
                                 #define _g_tmp2 ml_tmp2
                                 #define _g_tmp3 ml_tmp3
                                 #define _g_tmp4 ml_tmp4
                                 
                                 ; tmp1 (a)
                                 ; tmp2 (b)
                                 ; tmp3 (prog)
                                 _g_l_smooth:
0001a4 1745                      	cp _g_tmp1, _g_tmp2
0001a5 f430                      	brsh _g_l_smooth_greater
0001a6 2ea5                      	mov _g_tmp4, _g_tmp2
0001a7 1aa4                      	sub _g_tmp4, _g_tmp1
0001a8 16a6                      	cp _g_tmp4, _g_tmp3
0001a9 f040                      	brlo _g_l_smooth_clamp
0001aa 0f46                      	add _g_tmp1, _g_tmp3
0001ab 9508                      	ret
                                 _g_l_smooth_greater:
0001ac 2ea4                      	mov _g_tmp4, _g_tmp1
0001ad 1aa5                      	sub _g_tmp4, _g_tmp2
0001ae 16a6                      	cp _g_tmp4, _g_tmp3
0001af f010                      	brlo _g_l_smooth_clamp
0001b0 1b46                      	sub _g_tmp1, _g_tmp3
0001b1 9508                      	ret
                                 _g_l_smooth_clamp:
0001b2 2f45                      	mov _g_tmp1, _g_tmp2
0001b3 9508                      	ret
                                 
                                 g_l_update:
                                 	; smooth
0001b4 9140 0255                 	lds _g_tmp1, ds_ram_out_state
0001b6 2344                      	tst _g_tmp1
0001b7 f089                      	breq _g_l_update_smooth_zombie
0001b8 9150 0254                 	lds _g_tmp2, ds_ram_out_val
                                 	; svals = svals * smooths + rval * (1-smooths)
0001ba 9140 0214                 	lds _g_tmp1, _g_ram_dsval_slow
0001bc 9160 0212                 	lds _g_tmp3, _g_ram_smooth_slow
0001be dfe5                      	rcall _g_l_smooth
0001bf 9340 0214                 	sts _g_ram_dsval_slow, _g_tmp1
                                 	; sval = sval * smooth + rval * (1-smooth)
0001c1 9140 0213                 	lds _g_tmp1, _g_ram_dsval
0001c3 9160 0211                 	lds _g_tmp3, _g_ram_smooth
0001c5 dfde                      	rcall _g_l_smooth
0001c6 9340 0213                 	sts _g_ram_dsval, _g_tmp1
0001c8 c009                      	rjmp _g_l_update_smooth_done
                                 _g_l_update_smooth_zombie:
                                 	; sval = sval * smooth + svals * (1-smooth)
0001c9 9140 0213                 	lds _g_tmp1, _g_ram_dsval
0001cb 9150 0214                 	lds _g_tmp2, _g_ram_dsval_slow
0001cd 9160 0211                 	lds _g_tmp3, _g_ram_smooth
0001cf dfd4                      	rcall _g_l_smooth
0001d0 9340 0213                 	sts _g_ram_dsval, _g_tmp1
                                 _g_l_update_smooth_done:
0001d2 9540                      	com _g_tmp1
0001d3 9542                      	swap _g_tmp1
0001d4 704f                      	andi _g_tmp1, 0b00001111
0001d5 9340 0215                 	sts _g_ram_col, _g_tmp1
0001d7 cf32                      	rjmp g_l_update_done
                                 
                                 #define _g_col ml_col
                                 #define _g_cl ml_cl
                                 #define _g_ch ml_ch
                                 
                                 g_l_draw:
                                 	; draw frame
0001d8 e0b2                      	ldi XH, HIGH(_g_ram_frame + 1)
0001d9 e1a7                      	ldi XL, LOW(_g_ram_frame + 1)
0001da e043                      	ldi _g_tmp1, 3
0001db 9f49                      	mul _g_tmp1, _g_col
0001dc 2744                      	clr _g_tmp1
0001dd 0da0                      	add XL, mull
0001de 1fb4                      	adc XH, _g_tmp1
0001df 918d                      	ld _g_ch, X+
0001e0 917c                      	ld _g_cl, X
                                 	; draw ship
0001e1 9140 0215                 	lds _g_tmp1, _g_ram_col
0001e3 1b49                      	sub _g_tmp1, _g_col
0001e4 f40a                      	brpl _g_l_draw_abs_done
0001e5 9541                      	neg _g_tmp1
                                 _g_l_draw_abs_done:
0001e6 e0f5                      	ldi ZH, HIGH( bm_player * 2)
0001e7 ebec                      	ldi ZL, LOW( bm_player * 2)
0001e8 0fe4                      	add ZL, _g_tmp1
0001e9 2744                      	clr _g_tmp1
0001ea 1ff4                      	adc ZH, _g_tmp1
0001eb 9144                      	lpm _g_tmp1, Z
0001ec 2f57                      	mov _g_tmp2, _g_cl
0001ed 2354                      	and _g_tmp2, _g_tmp1
0001ee f411                      	brne _g_l_over
0001ef 2b74                      	or _g_cl, _g_tmp1
0001f0 cf3c                      	rjmp g_l_draw_done
                                 
                                 _g_l_over:
0001f1 e041                      	ldi _g_tmp1, ML_SCREEN_SCORE
0001f2 9340 0201                 	sts ml_ram_screen, _g_tmp1
0001f4 2744                      	clr _g_tmp1
0001f5 9340 0091                 	sts _G_TCCRB, _g_tmp1
0001f7 cf58                      	rjmp s_l_set
                                 
                                 #undef _g_col
                                 #undef _g_cl
                                 #undef _g_ch
                                 
                                 g_l_pause:
0001f8 2744                      	clr _g_tmp1
0001f9 9340 0091                 	sts _G_TCCRB, _g_tmp1
0001fb cf21                      	rjmp g_l_pause_done
                                 
                                 g_l_resume:
                                 	/*lds _g_tmp1, ds_ram_out_val
                                 	sts _g_ram_dsval, _g_tmp1
                                 	sts _g_ram_dsval_slow, _g_tmp1*/
                                 	; start timer
0001fc 9140 0246                 	lds _g_tmp1, _g_ram_tccrb
0001fe 9340 0091                 	sts _G_TCCRB, _g_tmp1
000200 cfa0                      	rjmp g_l_resume_done
                                 
                                 #undef _g_tmp1
                                 #undef _g_tmp2
                                 #undef _g_tmp3
                                 
                                 #define _g_tmp1 ria
                                 #define _g_tmp2 rib
                                 #define _g_tmp3 ric
                                 
000040 940c 0201                 ISR _G_OCAaddr
                                 	; score
000201 91a0 0249                 	lds XL, _g_ram_scorel
000203 91b0 024a                 	lds XH, _g_ram_scoreh
000205 9611                      	adiw XH:XL, 1
000206 93a0 0249                 	sts _g_ram_scorel, XL
000208 93b0 024a                 	sts _g_ram_scoreh, XH
                                 	; spawn
00020a 9100 0247                 	lds _g_tmp1, _g_ram_spawn_countdown
00020c 950a                      	dec _g_tmp1
00020d f439                      	brne _g_l_oca_vframe_done
                                 	; spawn begin
00020e e003                      	ldi _g_tmp1, 3
00020f 9300 0216                 	sts _g_ram_frame, _g_tmp1
000211 9300 021c                 	sts _g_ram_frame + 6, _g_tmp1
                                 	; spawn end
000213 9100 0248                 	lds _g_tmp1, _g_ram_spawn_period
                                 _g_l_oca_vframe_done:
000215 9300 0247                 	sts _g_ram_spawn_countdown, _g_tmp1
                                 	; shift
000217 e1a6                      	ldi XL, LOW( _g_ram_frame )
000218 e0b2                      	ldi XH, HIGH( _g_ram_frame )
000219 e100                      	ldi _g_tmp1, 16
                                 _g_l_oca_shift_loop:
00021a 911c                      	ld _g_tmp2, X
00021b 9516                      	lsr _g_tmp2
00021c 931d                      	st X+, _g_tmp2
00021d 911c                      	ld _g_tmp2, X
00021e 9517                      	ror _g_tmp2
00021f 931d                      	st X+, _g_tmp2
000220 911c                      	ld _g_tmp2, X
000221 9517                      	ror _g_tmp2
000222 931d                      	st X+, _g_tmp2
000223 950a                      	dec _g_tmp1
000224 f7a9                      	brne _g_l_oca_shift_loop
000225 9518                      	reti
                                 
                                 #undef _g_tmp1
                                 #undef _g_tmp2
                                 #undef _g_tmp3
                                 
                                 
                                 #include "led_matrix.asm"
                                 
                                 ; ARE
                                 ; LED matrix
                                 ; dirty PORTC, DDRC, PINC
                                 
                                 #define _LM_IO C
                                 
                                 IO_DEF _LM, _LM_IO
                                 #define _LM_BIT_ABCD 0 ; digital pin 34-37
                                 #define _LM_BIT_G 4 ; digital pin 33
                                 #define _LM_BIT_DI 5 ; digital pin 32
                                 #define _LM_BIT_CLK 6 ; digital pin 31
                                 #define _LM_BIT_LAT 7 ; digital pin 30
                                 
                                 #define _lm_setup_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro LM_SRC_SETUP
                                 	ser _lm_setup_tmp
                                 	out _LM_DDR, _lm_setup_tmp
                                 .endmacro
                                 
                                 #undef _lm_setup_tmp
                                 
                                 #define _lm_cl ml_cl
                                 #define _lm_ch ml_ch
                                 #define _lm_col ml_col
                                 #define _lm_tmp1 ml_tmp1
                                 #define _lm_tmp2 ml_tmp2
                                 
                                 lm_l_sendcol:
000226 e140                      	ldi _lm_tmp1, 16
                                 _lm_l_src_send_col_row:
000227 e350                      	ldi _lm_tmp2, (1 << _LM_BIT_G) | (1 << _LM_BIT_DI)
000228 9586                      	lsr _lm_ch
000229 9577                      	ror _lm_cl
00022a f408                      	brcc _lm_l_src_send_col_out_dot
00022b e150                      	ldi _lm_tmp2, (1 << _LM_BIT_G)
                                 _lm_l_src_send_col_out_dot:
00022c b958                      	out _LM_PORT, _lm_tmp2
00022d 6450                      	ori _lm_tmp2, 1 << _LM_BIT_CLK
00022e b958                      	out _LM_PORT, _lm_tmp2
00022f 7b5f                      	andi _lm_tmp2, ~(1 << _LM_BIT_CLK)
000230 b958                      	out _LM_PORT, _lm_tmp2
                                 	;loop
000231 954a                      	dec _lm_tmp1
000232 f7a1                      	brne _lm_l_src_send_col_row
                                 	;send LAT
000233 e950                      	ldi _lm_tmp2, (1 << _LM_BIT_G) | (1 << _LM_BIT_LAT)
000234 b958                      	out _LM_PORT, _lm_tmp2
000235 e150                      	ldi _lm_tmp2, (1 << _LM_BIT_G)
000236 b958                      	out _LM_PORT, _lm_tmp2
                                 	;send col
000237 2b59                      	or _lm_tmp2, _lm_col
000238 b958                      	out _LM_PORT, _lm_tmp2
                                 	;end G
000239 b998                      	out _LM_PORT, _lm_col
00023a cef4                      	rjmp ml_l_sendcol_done
                                 
                                 #undef _lm_cl
                                 #undef _lm_ch
                                 #undef _lm_col
                                 #undef _lm_tmp1
                                 #undef _lm_tmp2
                                 #include "distance_sens.asm"
                                 
                                 ; ARE
                                 ; distance sensor
                                 ; dirty timer 4 module and registers
                                 
                                 #define _DS_TIMER 4
                                 #define _DS_IO L
                                 
                                 TIM_DEF _DS, _DS_TIMER
                                 IO_DEF _DS, _DS_IO
                                 
                                 #define _DS_ICP_BIT 0 ; digital pin 49
                                 #define _DS_TRIG_BIT 6 ; digital pin 43
                                 
                                 #define _ds_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro DS_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _ds_tmp
                                 	sts _DS_TCCRA, _ds_tmp
                                 	sts _DS_TCCRB, _ds_tmp
                                 	sts _DS_TCCRC, _ds_tmp
                                 	; set timer interrupt mask
                                 	ldi _ds_tmp, ICIE_VAL | OCIEA_VAL
                                 	sts _DS_TIMSK, _ds_tmp
                                 	; set data direction register to output for trig pin
                                 	ldi _ds_tmp, 1 << _DS_TRIG_BIT
                                 	sts _DS_DDR, _ds_tmp
                                 	; load ee
                                 	SP_SRC_LOAD ee_ds_min_ic
                                 	sts _ds_ram_in_lol, sp_data
                                 	SP_SRC_LOAD ee_ds_min_ic + 1
                                 	sts _ds_ram_in_loh, sp_data
                                 	SP_SRC_LOAD ee_ds_max_ic
                                 	sts _ds_ram_in_hil, sp_data
                                 	SP_SRC_LOAD ee_ds_max_ic + 1
                                 	sts _ds_ram_in_hih, sp_data
                                 	SP_SRC_LOAD ee_ds_emax_ic
                                 	sts _ds_ram_in_ehil, sp_data
                                 	SP_SRC_LOAD ee_ds_emax_ic + 1
                                 	sts _ds_ram_in_ehih, sp_data
                                 	SP_SRC_LOAD ee_ds_period_propf
                                 	mov rma, sp_data
                                 	SP_SRC_LOAD ee_ds_period_propf + 1
                                 	mov rmb, sp_data
                                 	call t_sr_calc
                                 	ori rmc, ICN_VAL | ICES_VAL
                                 	sts _DS_OCRAH, rmb
                                 	sts _DS_OCRAL, rma
                                 	sts _ds_ram_tccrb, rmc
                                 .endmacro
                                 
                                 #undef _ds_tmp
                                 
                                 .eseg
000000 aa 03                     ee_ds_period_propf: .dw int( 0.06 * T16_PROPF + 0.5)
000002 46 00                     ee_ds_min_ic: .dw 70
000004 fa 00                     ee_ds_max_ic: .dw 250
000006 2c 01                     ee_ds_emax_ic: .dw 300
                                 .cseg
                                 
                                 .dseg
00024b                           _ds_ram_tccrb: .byte 1
                                 
00024c                           _ds_ram_in_lol: .byte 1
00024d                           _ds_ram_in_loh: .byte 1
                                 
00024e                           _ds_ram_in_hil: .byte 1
00024f                           _ds_ram_in_hih: .byte 1
                                 
000250                           _ds_ram_in_ehil: .byte 1
000251                           _ds_ram_in_ehih: .byte 1
                                 
000252                           _ds_ram_ltimel: .byte 1
000253                           _ds_ram_ltimeh: .byte 1
                                 
000254                           ds_ram_out_val: .byte 1
                                 
000255                           ds_ram_out_state: .byte 1
                                 .cseg
                                 
000054 940c 023b                 ISR _DS_OCAaddr
                                 ds_isr_trig:
                                 
                                 #define _ds_tmp ria
                                 
                                 	; start trig
00023b e400                      	ldi _ds_tmp, 1 << _DS_TRIG_BIT
00023c 9300 010b                 	sts _DS_PORT, _ds_tmp
                                 	; stop timer
00023e 2700                      	clr _ds_tmp
00023f 9300 00a1                 	sts _DS_TCCRB, _ds_tmp
                                 	; clear counter
000241 9300 00a5                 	sts _DS_TCNTH, _ds_tmp
000243 9300 00a4                 	sts _DS_TCNTL, _ds_tmp
                                 	; skip if not measured
000245 9100 0072                 	lds _ds_tmp, _DS_TIMSK
000247 fd05                      	sbrc _ds_tmp, ICIE
000248 c039                      	rjmp _ds_isr_trig_bad
                                 
                                 #undef _ds_tmp
                                 
                                 #define _ds_cursl ria
                                 #define _ds_cursh rib
                                 #define _ds_inl ri0
                                 #define _ds_inh ri1
                                 
                                 	; skip if greater than max
000249 9100 0250                 	lds _ds_cursl, _ds_ram_in_ehil
00024b 9110 0251                 	lds _ds_cursh, _ds_ram_in_ehih
00024d 9020 0252                 	lds _ds_inl, _ds_ram_ltimel
00024f 9030 0253                 	lds _ds_inh, _ds_ram_ltimeh
000251 1620                      	cp _ds_inl, _ds_cursl
000252 0631                      	cpc _ds_inh, _ds_cursh
000253 f570                      	brsh _ds_isr_trig_bad
                                 
                                 #define _ds_in_lol ri2
                                 #define _ds_in_loh ri3
                                 #define _ds_in_hil ri4
                                 #define _ds_in_hih ri5
                                 #define _ds_out_lo ric
                                 #define _ds_out_hi rid
                                 #define _ds_out ri6
                                 
                                 	; clamp
                                 	; setup clamp parameters
000254 9040 024c                 	lds _ds_in_lol, _ds_ram_in_lol
000256 9050 024d                 	lds _ds_in_loh, _ds_ram_in_loh
000258 9060 024e                 	lds _ds_in_hil, _ds_ram_in_hil
00025a 9070 024f                 	lds _ds_in_hih, _ds_ram_in_hih
00025c 2722                      	clr _ds_out_lo
00025d ef3f                      	ser _ds_out_hi
                                 	; start clamping
                                 _ds_l_isr_trig_clamp_start:
00025e 0183                      	movw _ds_cursh:_ds_cursl, _ds_in_hih:_ds_in_hil
00025f 2e83                      	mov _ds_out, _ds_out_hi
                                 _ds_l_isr_trig_clamp_loop:
000260 1b32                      	sub _ds_out_hi, _ds_out_lo
000261 3032                      	cpi _ds_out_hi, 2
000262 f0b8                      	brlo _ds_l_isr_trig_clamp_stop
000263 0f32                      	add _ds_out_hi, _ds_out_lo
000264 1502                      	cp _ds_cursl, _ds_inl
000265 0513                      	cpc _ds_cursh, _ds_inh
000266 f099                      	breq _ds_l_isr_trig_clamp_stop
000267 f448                      	brsh _ds_l_isr_trig_clamp_smaller
                                 _ds_l_isr_trig_clamp_greater:
000268 0128                      	movw _ds_in_loh:_ds_in_lol, _ds_cursh:_ds_cursl
000269 2d28                      	mov _ds_out_lo, _ds_out
00026a 0d06                      	add _ds_cursl, _ds_in_hil
00026b 1d17                      	adc _ds_cursh, _ds_in_hih
00026c 9517                      	ror _ds_cursh
00026d 9507                      	ror _ds_cursl
00026e 0e83                      	add _ds_out, _ds_out_hi
00026f 9487                      	ror _ds_out
000270 cfef                      	rjmp _ds_l_isr_trig_clamp_loop
                                 _ds_l_isr_trig_clamp_smaller:
000271 0138                      	movw _ds_in_hih:_ds_in_hil, _ds_cursh:_ds_cursl
000272 2d38                      	mov _ds_out_hi, _ds_out
000273 0d04                      	add _ds_cursl, _ds_in_lol
000274 1d15                      	adc _ds_cursh, _ds_in_loh
000275 9517                      	ror _ds_cursh
000276 9507                      	ror _ds_cursl
000277 0e82                      	add _ds_out, _ds_out_lo
000278 9487                      	ror _ds_out
000279 cfe6                      	rjmp _ds_l_isr_trig_clamp_loop
                                 
                                 #undef _ds_cursl
                                 #undef _ds_cursh
                                 #undef _ds_inl
                                 #undef _ds_inh
                                 #undef _ds_in_lol
                                 #undef _ds_in_loh
                                 #undef _ds_in_hil
                                 #undef _ds_in_hih
                                 #undef _ds_out_lo
                                 #undef _ds_out_hi
                                 
                                 #define _ds_tmp1 ria
                                 #define _ds_tmp2 rib
                                 
                                 _ds_l_isr_trig_clamp_stop:
                                 	; write output value
00027a 9100 0254                 	lds _ds_tmp1, ds_ram_out_val
00027c 0d08                      	add _ds_tmp1, _ds_out
00027d 9507                      	ror _ds_tmp1
00027e 9300 0254                 	sts ds_ram_out_val, _ds_tmp1
                                 	; set output state to true
000280 ef0f                      	ser _ds_tmp1
000281 c004                      	rjmp _ds_isr_trig_done
                                 
                                 #undef _ds_out
                                 
                                 _ds_isr_trig_bad:
                                 	; wait
000282 e305                      	ldi _ds_tmp1, 53
                                 _ds_isr_trig_bad_wait:
000283 950a                      	dec _ds_tmp1
000284 f7f1                          brne _ds_isr_trig_bad_wait
                                 	; set output state to false
000285 2700                      	clr _ds_tmp1
                                 _ds_isr_trig_done:
                                 	; write output state
000286 9300 0255                 	sts ds_ram_out_state, _ds_tmp1
000288 b905                      	BL_SRC_OUT _ds_tmp1
                                 	; cancel pending interrupts
000289 e202                      	ldi _ds_tmp1, ICF_VAL | OCFA_VAL
00028a bb09                      	out _DS_TIFR, _ds_tmp1
                                 	; enable interrupts
00028b e202                      	ldi _ds_tmp1, ICIE_VAL | OCIEA_VAL
00028c 9300 0072                 	sts _DS_TIMSK, _ds_tmp1
                                 	; stop trig
00028e 2700                      	clr _ds_tmp1
00028f 9300 010b                 	sts _DS_PORT, _ds_tmp1
                                 	; start timer
000291 9100 024b                 	lds _ds_tmp1, _ds_ram_tccrb
000293 9300 00a1                 	sts _DS_TCCRB, _ds_tmp1
000295 9518                      	reti
                                 
                                 #undef _ds_tmp1
                                 #undef _ds_tmp2
                                 
                                 #define _ds_icrl ri0
                                 #define _ds_icrh ri1
                                 #define _ds_tmp1 ria
                                 #define _ds_tmp2 rib
                                 
000052 940c 0296                 ISR _DS_ICPaddr
                                 	; load ICR
000296 9020 00a6                 	lds _ds_icrl, _DS_ICRL
000298 9030 00a7                 	lds _ds_icrh, _DS_ICRH
                                 	; check if rising or falling edge
00029a 9100 00a1                 	lds _ds_tmp1, _DS_TCCRB
00029c ff06                      	sbrs _ds_tmp1, ICES
00029d c00a                      	rjmp _ds_l_isr_icp_falling
                                 _ds_l_isr_icp_rising:
                                 	; save ICR to sram
00029e 9220 0252                 	sts _ds_ram_ltimel, _ds_icrl
0002a0 9230 0253                 	sts _ds_ram_ltimeh, _ds_icrh
                                 	; set input capture to falling edge
0002a2 9100 00a1                 	lds _ds_tmp1, _DS_TCCRB
0002a4 7b0f                      	andi _ds_tmp1, ~(ICES_VAL)
0002a5 9300 00a1                 	sts _DS_TCCRB, _ds_tmp1
0002a7 9518                      	reti
                                 _ds_l_isr_icp_falling:
                                 	; save difference to sram
0002a8 9100 0252                 	lds _ds_tmp1, _ds_ram_ltimel
0002aa 9110 0253                 	lds _ds_tmp2, _ds_ram_ltimeh
0002ac 1a20                      	sub _ds_icrl, _ds_tmp1
0002ad 0a31                      	sbc _ds_icrh, _ds_tmp2
0002ae 9220 0252                 	sts _ds_ram_ltimel, _ds_icrl
0002b0 9230 0253                 	sts _ds_ram_ltimeh, _ds_icrh
                                 	; disable input capture interrupt
0002b2 e002                      	ldi _ds_tmp1, OCIEA_VAL
0002b3 9300 0072                 	sts _DS_TIMSK, _ds_tmp1
0002b5 9518                      	reti
                                 
                                 #undef _ds_icrh
                                 #undef _ds_icrl
                                 #undef _ds_tmp1
                                 #undef _ds_tmp2
                                 
                                 #include "bitmaps.asm"
                                 
0002b6 223e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(2): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002b7 003e                      .db 0b00111110,0b00100010,0b00111110
                                 bm_1:
0002b8 203e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(4): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002b9 0000                      .db 0b00111110,0b00100000,0b00000000
                                 bm_2:
0002ba 2a3a
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(6): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002bb 002e                      .db 0b00111010,0b00101010,0b00101110
                                 bm_3:
0002bc 2a3e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(8): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002bd 002a                      .db 0b00111110,0b00101010,0b00101010
                                 bm_4:
0002be 083e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(10): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002bf 0038                      .db 0b00111110,0b00001000,0b00111000
                                 bm_5:
0002c0 2a2e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(12): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002c1 003a                      .db 0b00101110,0b00101010,0b00111010
                                 bm_6:
0002c2 2a2e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(14): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002c3 003e                      .db 0b00101110,0b00101010,0b00111110
                                 bm_7:
0002c4 203e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(16): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002c5 0030                      .db 0b00111110,0b00100000,0b00110000
                                 bm_8:
0002c6 2a3e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(18): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002c7 003e                      .db 0b00111110,0b00101010,0b00111110
                                 bm_9:
0002c8 2a3e
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(20): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002c9 003a                      .db 0b00111110,0b00101010,0b00111010
                                 bm_more:
0002ca 0600
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(22): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002cb 0002                      .db 0b00000000,0b00000110,0b00000010
                                 bm_null:
0002cc 0000
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm(24): warning: .cseg .db misalignment - padding zero byte
C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\main.asm(24): 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\src\bitmaps.asm' included form here
0002cd 0000                      .db 0b00000000,0b00000000,0b00000000
                                 bm_pause:
0002ce 0000
0002cf 0000
0002d0 0000
0002d1 0000
0002d2 07e0
0002d3 07e0
0002d4 07e0
0002d5 0000
0002d6 0000
0002d7 07e0
0002d8 07e0
0002d9 07e0
0002da 0000
0002db 0000
0002dc 0000
0002dd 0000                      .dw 0b0000000000000000 .dw 0b0000000000000000 .dw 0b0000000000000000 .dw 0b0000000000000000 .dw 0b0000011111100000 .dw 0b0000011111100000 .dw 0b0000011111100000 .dw 0b0000000000000000 .dw 0b0000000000000000 .dw 0b0000011111100000 .dw 0b0000011111100000 .d                                 w 0b0000011111100000 .dw 0b0000000000000000 .dw 0b0000000000000000 .dw 0b0000000000000000 .dw 0b0000000000000000 
0002de 060d
0002df 0103
0002e0 0000
0002e1 0000
0002e2 0000
0002e3 0000
0002e4 0000
0002e5 0000                      bm_player:
                                 .db 0b00001101,0b00000110,0b00000011,0b00000001,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000
0002e6 ffff
0002e7 ffff
0002e8 ffff
0002e9 ffff
0002ea f81f
0002eb f81f
0002ec f81f
0002ed ffff
0002ee ffff
0002ef f81f
0002f0 f81f
0002f1 f81f
0002f2 ffff
0002f3 ffff
0002f4 ffff
0002f5 ffff                      bm_resuming:
                                 .dw 0b1111111111111111 .dw 0b1111111111111111 .dw 0b1111111111111111 .dw 0b1111111111111111 .dw 0b1111100000011111 .dw 0b1111100000011111 .dw 0b1111100000011111 .dw 0b1111111111111111 .dw 0b1111111111111111 .dw 0b1111100000011111 .dw 0b1111100000011111 .d0002f6 0000
0002f7 0012
0002f8 2c3a
0002f9 003e
0002fa 2222
0002fb 003e
0002fc 2a2e
0002fd 003a                      w 0b1111100000011111 .dw 0b1111111111111111 .dw 0b1111111111111111 .dw 0b1111111111111111 .dw 0b1111111111111111 
                                 bm_scr:
0002fe 0000
0002ff 0012
000300 2838
000301 003e
000302 223e
000303 003e
000304 3e20
000305 0020                      .db 0b00000000,0b00000000,0b00010010,0b00000000,0b00111010,0b00101100,0b00111110,0b00000000,0b00100010,0b00100010,0b00111110,0b00000000,0b00101110,0b00101010,0b00111010,0b00000000
                                 
                                 ; main
                                 
                                 #define m_tmp rma
                                 
000000 940c 0306                 ISR 0
                                 m_l_reset:
000306 94f8                      	cli
                                 	; setup stack
000307 e241
000308 bf4e
000309 ef4f
00030a bf4d                      	STACK_SETUP m_tmp
                                 	; setup builtin LED
00030b e840
00030c b944                      	BL_SRC_SETUP m_tmp
00030d 2744
00030e b945                      	BL_SRC_OFF m_tmp
                                 	; setup LED matrix
00030f ef4f
000310 b947                      	LM_SRC_SETUP m_tmp
                                 	; setup UART communication
000311 e040
000312 9340 00c5
000314 e647
000315 9340 00c4
000317 e040
000318 9340 00c0
00031a e948
00031b 9340 00c1
00031d e846
00031e 9340 00c2                 	UC_SRC_SETUP m_tmp
                                 	;setup distance sensor
000320 2744
000321 9340 00a0
000323 9340 00a1
000325 9340 00a2
000327 e242
000328 9340 0072
00032a e440
00032b 9340 010a
00032d e062
00032e e050
00032f ddc5
000330 9340 024c
000332 e063
000333 e050
000334 ddc0
000335 9340 024d
000337 e064
000338 e050
000339 ddbb
00033a 9340 024e
00033c e065
00033d e050
00033e ddb6
00033f 9340 024f
000341 e066
000342 e050
000343 ddb1
000344 9340 0250
000346 e067
000347 e050
000348 ddac
000349 9340 0251
00034b e060
00034c e050
00034d dda7
00034e 2f44
00034f e061
000350 e050
000351 dda3
000352 2f54
000353 940e 0072
000355 6c60
000356 9350 00a9
000358 9340 00a8
00035a 9360 024b                 	DS_SRC_SETUP m_tmp
00035c 940e 023b                 	call ds_isr_trig
                                 	; setup draw loop
00035e 2744
00035f 9340 00b0
000361 9340 00b1
000363 e042
000364 9340 0070
000366 2744
000367 9340 0202
000369 e042
00036a 9340 0201
00036c 2744
00036d 9340 020e
00036f 2744
000370 9340 0090
000372 9340 0091
000374 9340 0092
000376 e042
000377 9340 0071
000379 e1a6
00037a e0b2
00037b 2766
00037c e340
00037d 936d
00037e 954a
00037f f7e9
000380 e041
000381 9340 0247
000383 2744
000384 9340 0249
000386 9340 024a
000388 2744
000389 9340 0120
00038b 9340 0121
00038d 9340 0122
00038f e042
000390 9340 0073
000392 e040
000393 9340 0205                 	ML_SRC_SETUP m_tmp
000395 e440
000396 e15f
000397 940e 0072
000399 9350 00b3
00039b 9360 0200
00039d e041
00039e 9340 0203
0003a0 e044
0003a1 9340 0204
0003a3 e048
0003a4 9340 0210
0003a6 e044
0003a7 9340 020f
0003a9 e043
0003aa 9340 0248
0003ac e048
0003ad 9340 0211
0003af e043
0003b0 9340 0212
0003b2 e345
0003b3 e05c
0003b4 dcbd
0003b5 9350 0099
0003b7 9340 0098
0003b9 6068
0003ba 9360 0246                 	ML_SRC_SPLOAD
0003bc 9478                      	sei
                                 	; enter main loop
0003bd cd46                      	rjmp ml_l_loop
                                 
                                 #undef m_tmp
                                 


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :  13 y  :   0 z  :   4 r0 :   1 r1 :   0 r2 :   9 r3 :   7 r4 :   3 
r5 :   3 r6 :   4 r7 :   4 r8 :   8 r9 :   0 r10:   6 r11:   0 r12:   0 
r13:   0 r14:   0 r15:   0 r16:  71 r17:  44 r18:  31 r19:   7 r20: 186 
r21:  70 r22:  52 r23:   6 r24:   8 r25:  10 r26:   9 r27:   9 r28:   0 
r29:   0 r30:   8 r31:   8 
Registers used: 25 out of 35 (71.4%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :   6 add   :  13 adiw  :   1 and   :   1 
andi  :  17 asr   :   0 bclr  :   0 bld   :   2 brbc  :   0 brbs  :   0 
brcc  :   5 brcs  :   0 break :   0 breq  :  12 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   3 brlt  :   0 brmi  :   0 
brne  :  15 brpl  :   1 brsh  :   5 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   2 call  :   4 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   2 cln   :   0 clr   :  27 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   3 cp    :   6 cpc   :   3 
cpi   :   7 cpse  :   0 dec   :   6 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   0 jmp   :   7 ld    :   5 ldd   :   0 ldi   :  99 
lds   :  49 lpm   :   7 lsl   :   9 lsr   :   8 mov   :  28 movw  :   3 
mul   :   1 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   6 
ori   :   4 out   :  25 pop   :   0 push  :   0 rcall :  18 ret   :  19 
reti  :   8 rjmp  :  37 rol   :   4 ror   :  12 sbc   :   1 sbci  :   0 
sbi   :   6 sbic  :   4 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   2 
sbrs  :   3 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   4 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :   8 std   :   0 sts   :  89 sub   :   8 subi  :   0 swap  :   5 
tst   :   7 wdr   :   0 
Instructions used: 54 out of 116 (46.6%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00077c   1556    160   1716  262144   0.7%
[.dseg] 0x000200 0x000256      0     86     86    8192   1.0%
[.eseg] 0x000000 0x000008      0      8      8    4096   0.2%

Assembly complete, 0 errors, 12 warnings
