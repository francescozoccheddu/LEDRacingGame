
AVRASM ver. 2.2.6  C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm Fri Oct 13 22:50:32 2017

[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(13): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(15): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\utils.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(16): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\eeprom_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(17): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\builtin_led.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(18): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\serial_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(19): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\buzzer.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(20): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\led_matrix.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(21): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm(76): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\score.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm(77): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\pause.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm(78): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\game.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(22): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\distance_sens.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(25): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\bitmaps.asm'
[builtin](2): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(13): Including file 'C:/Program Files (x86)\Atmel\Studio\7.0\Packs\atmel\ATmega_DFP\1.2.132\avrasm\inc\m2560def.inc'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(15): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\utils.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(16): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\eeprom_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(17): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\builtin_led.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(18): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\serial_prog.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(19): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\buzzer.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(20): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\led_matrix.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(21): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm(76): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\score.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm(77): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\pause.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main_loop.asm(78): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\game.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(22): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\distance_sens.asm'
C:\Users\zocch\OneDrive\Unica\ARE\ARE\main.asm(25): Including file 'C:\Users\zocch\OneDrive\Unica\ARE\ARE\bitmaps.asm'
                                 
                                 ; Francesco Zoccheddu
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #define _M2560DEF_INC_
                                 
                                 
                                 #pragma partinc 0
                                 
                                 ; ***** SPECIFY DEVICE ***************************************************
                                 .device ATmega2560
                                 #pragma AVRPART ADMIN PART_NAME ATmega2560
                                 .equ	SIGNATURE_000	= 0x1e
                                 .equ	SIGNATURE_001	= 0x98
                                 .equ	SIGNATURE_002	= 0x01
                                 
                                 #pragma AVRPART CORE CORE_VERSION V3
                                 
                                 
                                 ; ***** I/O REGISTER DEFINITIONS *****************************************
                                 ; NOTE:
                                 ; Definitions marked "MEMORY MAPPED"are extended I/O ports
                                 ; and cannot be used with IN/OUT instructions
                                 .equ	UDR3	= 0x136	; MEMORY MAPPED
                                 .equ	UBRR3L	= 0x134	; MEMORY MAPPED
                                 .equ	UBRR3H	= 0x135	; MEMORY MAPPED
                                 .equ	UCSR3C	= 0x132	; MEMORY MAPPED
                                 .equ	UCSR3B	= 0x131	; MEMORY MAPPED
                                 .equ	UCSR3A	= 0x130	; MEMORY MAPPED
                                 .equ	OCR5CL	= 0x12c	; MEMORY MAPPED
                                 .equ	OCR5CH	= 0x12d	; MEMORY MAPPED
                                 .equ	OCR5BL	= 0x12a	; MEMORY MAPPED
                                 .equ	OCR5BH	= 0x12b	; MEMORY MAPPED
                                 .equ	OCR5AL	= 0x128	; MEMORY MAPPED
                                 .equ	OCR5AH	= 0x129	; MEMORY MAPPED
                                 .equ	ICR5H	= 0x127	; MEMORY MAPPED
                                 .equ	ICR5L	= 0x126	; MEMORY MAPPED
                                 .equ	TCNT5L	= 0x124	; MEMORY MAPPED
                                 .equ	TCNT5H	= 0x125	; MEMORY MAPPED
                                 .equ	TCCR5C	= 0x122	; MEMORY MAPPED
                                 .equ	TCCR5B	= 0x121	; MEMORY MAPPED
                                 .equ	TCCR5A	= 0x120	; MEMORY MAPPED
                                 .equ	PORTL	= 0x10b	; MEMORY MAPPED
                                 .equ	DDRL	= 0x10a	; MEMORY MAPPED
                                 .equ	PINL	= 0x109	; MEMORY MAPPED
                                 .equ	PORTK	= 0x108	; MEMORY MAPPED
                                 .equ	DDRK	= 0x107	; MEMORY MAPPED
                                 .equ	PINK	= 0x106	; MEMORY MAPPED
                                 .equ	PORTJ	= 0x105	; MEMORY MAPPED
                                 .equ	DDRJ	= 0x104	; MEMORY MAPPED
                                 .equ	PINJ	= 0x103	; MEMORY MAPPED
                                 .equ	PORTH	= 0x102	; MEMORY MAPPED
                                 .equ	DDRH	= 0x101	; MEMORY MAPPED
                                 .equ	PINH	= 0x100	; MEMORY MAPPED
                                 .equ	UDR2	= 0xd6	; MEMORY MAPPED
                                 .equ	UBRR2L	= 0xd4	; MEMORY MAPPED
                                 .equ	UBRR2H	= 0xd5	; MEMORY MAPPED
                                 .equ	UCSR2C	= 0xd2	; MEMORY MAPPED
                                 .equ	UCSR2B	= 0xd1	; MEMORY MAPPED
                                 .equ	UCSR2A	= 0xd0	; MEMORY MAPPED
                                 .equ	UDR1	= 0xce	; MEMORY MAPPED
                                 .equ	UBRR1L	= 0xcc	; MEMORY MAPPED
                                 .equ	UBRR1H	= 0xcd	; MEMORY MAPPED
                                 .equ	UCSR1C	= 0xca	; MEMORY MAPPED
                                 .equ	UCSR1B	= 0xc9	; MEMORY MAPPED
                                 .equ	UCSR1A	= 0xc8	; MEMORY MAPPED
                                 .equ	UDR0	= 0xc6	; MEMORY MAPPED
                                 .equ	UBRR0L	= 0xc4	; MEMORY MAPPED
                                 .equ	UBRR0H	= 0xc5	; MEMORY MAPPED
                                 .equ	UCSR0C	= 0xc2	; MEMORY MAPPED
                                 .equ	UCSR0B	= 0xc1	; MEMORY MAPPED
                                 .equ	UCSR0A	= 0xc0	; MEMORY MAPPED
                                 .equ	TWAMR	= 0xbd	; MEMORY MAPPED
                                 .equ	TWCR	= 0xbc	; MEMORY MAPPED
                                 .equ	TWDR	= 0xbb	; MEMORY MAPPED
                                 .equ	TWAR	= 0xba	; MEMORY MAPPED
                                 .equ	TWSR	= 0xb9	; MEMORY MAPPED
                                 .equ	TWBR	= 0xb8	; MEMORY MAPPED
                                 .equ	ASSR	= 0xb6	; MEMORY MAPPED
                                 .equ	OCR2B	= 0xb4	; MEMORY MAPPED
                                 .equ	OCR2A	= 0xb3	; MEMORY MAPPED
                                 .equ	TCNT2	= 0xb2	; MEMORY MAPPED
                                 .equ	TCCR2B	= 0xb1	; MEMORY MAPPED
                                 .equ	TCCR2A	= 0xb0	; MEMORY MAPPED
                                 .equ	OCR4CL	= 0xac	; MEMORY MAPPED
                                 .equ	OCR4CH	= 0xad	; MEMORY MAPPED
                                 .equ	OCR4BL	= 0xaa	; MEMORY MAPPED
                                 .equ	OCR4BH	= 0xab	; MEMORY MAPPED
                                 .equ	OCR4AL	= 0xa8	; MEMORY MAPPED
                                 .equ	OCR4AH	= 0xa9	; MEMORY MAPPED
                                 .equ	ICR4L	= 0xa6	; MEMORY MAPPED
                                 .equ	ICR4H	= 0xa7	; MEMORY MAPPED
                                 .equ	TCNT4L	= 0xa4	; MEMORY MAPPED
                                 .equ	TCNT4H	= 0xa5	; MEMORY MAPPED
                                 .equ	TCCR4C	= 0xa2	; MEMORY MAPPED
                                 .equ	TCCR4B	= 0xa1	; MEMORY MAPPED
                                 .equ	TCCR4A	= 0xa0	; MEMORY MAPPED
                                 .equ	OCR3CL	= 0x9c	; MEMORY MAPPED
                                 .equ	OCR3CH	= 0x9d	; MEMORY MAPPED
                                 .equ	OCR3BL	= 0x9a	; MEMORY MAPPED
                                 .equ	OCR3BH	= 0x9b	; MEMORY MAPPED
                                 .equ	OCR3AL	= 0x98	; MEMORY MAPPED
                                 .equ	OCR3AH	= 0x99	; MEMORY MAPPED
                                 .equ	ICR3L	= 0x96	; MEMORY MAPPED
                                 .equ	ICR3H	= 0x97	; MEMORY MAPPED
                                 .equ	TCNT3L	= 0x94	; MEMORY MAPPED
                                 .equ	TCNT3H	= 0x95	; MEMORY MAPPED
                                 .equ	TCCR3C	= 0x92	; MEMORY MAPPED
                                 .equ	TCCR3B	= 0x91	; MEMORY MAPPED
                                 .equ	TCCR3A	= 0x90	; MEMORY MAPPED
                                 .equ	OCR1CL	= 0x8c	; MEMORY MAPPED
                                 .equ	OCR1CH	= 0x8d	; MEMORY MAPPED
                                 .equ	OCR1BL	= 0x8a	; MEMORY MAPPED
                                 .equ	OCR1BH	= 0x8b	; MEMORY MAPPED
                                 .equ	OCR1AL	= 0x88	; MEMORY MAPPED
                                 .equ	OCR1AH	= 0x89	; MEMORY MAPPED
                                 .equ	ICR1L	= 0x86	; MEMORY MAPPED
                                 .equ	ICR1H	= 0x87	; MEMORY MAPPED
                                 .equ	TCNT1L	= 0x84	; MEMORY MAPPED
                                 .equ	TCNT1H	= 0x85	; MEMORY MAPPED
                                 .equ	TCCR1C	= 0x82	; MEMORY MAPPED
                                 .equ	TCCR1B	= 0x81	; MEMORY MAPPED
                                 .equ	TCCR1A	= 0x80	; MEMORY MAPPED
                                 .equ	DIDR1	= 0x7f	; MEMORY MAPPED
                                 .equ	DIDR0	= 0x7e	; MEMORY MAPPED
                                 .equ	DIDR2	= 0x7d	; MEMORY MAPPED
                                 .equ	ADMUX	= 0x7c	; MEMORY MAPPED
                                 .equ	ADCSRB	= 0x7b	; MEMORY MAPPED
                                 .equ	ADCSRA	= 0x7a	; MEMORY MAPPED
                                 .equ	ADCH	= 0x79	; MEMORY MAPPED
                                 .equ	ADCL	= 0x78	; MEMORY MAPPED
                                 .equ	XMCRB	= 0x75	; MEMORY MAPPED
                                 .equ	XMCRA	= 0x74	; MEMORY MAPPED
                                 .equ	TIMSK5	= 0x73	; MEMORY MAPPED
                                 .equ	TIMSK4	= 0x72	; MEMORY MAPPED
                                 .equ	TIMSK3	= 0x71	; MEMORY MAPPED
                                 .equ	TIMSK2	= 0x70	; MEMORY MAPPED
                                 .equ	TIMSK1	= 0x6f	; MEMORY MAPPED
                                 .equ	TIMSK0	= 0x6e	; MEMORY MAPPED
                                 .equ	PCMSK2	= 0x6d	; MEMORY MAPPED
                                 .equ	PCMSK1	= 0x6c	; MEMORY MAPPED
                                 .equ	PCMSK0	= 0x6b	; MEMORY MAPPED
                                 .equ	EICRB	= 0x6a	; MEMORY MAPPED
                                 .equ	EICRA	= 0x69	; MEMORY MAPPED
                                 .equ	PCICR	= 0x68	; MEMORY MAPPED
                                 .equ	OSCCAL	= 0x66	; MEMORY MAPPED
                                 .equ	PRR1	= 0x65	; MEMORY MAPPED
                                 .equ	PRR0	= 0x64	; MEMORY MAPPED
                                 .equ	CLKPR	= 0x61	; MEMORY MAPPED
                                 .equ	WDTCSR	= 0x60	; MEMORY MAPPED
                                 .equ	SREG	= 0x3f
                                 .equ	SPL	= 0x3d
                                 .equ	SPH	= 0x3e
                                 .equ	EIND	= 0x3c
                                 .equ	RAMPZ	= 0x3b
                                 .equ	SPMCSR	= 0x37
                                 .equ	MCUCR	= 0x35
                                 .equ	MCUSR	= 0x34
                                 .equ	SMCR	= 0x33
                                 .equ	OCDR	= 0x31
                                 .equ	ACSR	= 0x30
                                 .equ	SPDR	= 0x2e
                                 .equ	SPSR	= 0x2d
                                 .equ	SPCR	= 0x2c
                                 .equ	GPIOR2	= 0x2b
                                 .equ	GPIOR1	= 0x2a
                                 .equ	OCR0B	= 0x28
                                 .equ	OCR0A	= 0x27
                                 .equ	TCNT0	= 0x26
                                 .equ	TCCR0B	= 0x25
                                 .equ	TCCR0A	= 0x24
                                 .equ	GTCCR	= 0x23
                                 .equ	EEARH	= 0x22
                                 .equ	EEARL	= 0x21
                                 .equ	EEDR	= 0x20
                                 .equ	EECR	= 0x1f
                                 .equ	GPIOR0	= 0x1e
                                 .equ	EIMSK	= 0x1d
                                 .equ	EIFR	= 0x1c
                                 .equ	PCIFR	= 0x1b
                                 .equ	TIFR5	= 0x1a
                                 .equ	TIFR4	= 0x19
                                 .equ	TIFR3	= 0x18
                                 .equ	TIFR2	= 0x17
                                 .equ	TIFR1	= 0x16
                                 .equ	TIFR0	= 0x15
                                 .equ	PORTG	= 0x14
                                 .equ	DDRG	= 0x13
                                 .equ	PING	= 0x12
                                 .equ	PORTF	= 0x11
                                 .equ	DDRF	= 0x10
                                 .equ	PINF	= 0x0f
                                 .equ	PORTE	= 0x0e
                                 .equ	DDRE	= 0x0d
                                 .equ	PINE	= 0x0c
                                 .equ	PORTD	= 0x0b
                                 .equ	DDRD	= 0x0a
                                 .equ	PIND	= 0x09
                                 .equ	PORTC	= 0x08
                                 .equ	DDRC	= 0x07
                                 .equ	PINC	= 0x06
                                 .equ	PORTB	= 0x05
                                 .equ	DDRB	= 0x04
                                 .equ	PINB	= 0x03
                                 .equ	PORTA	= 0x02
                                 .equ	DDRA	= 0x01
                                 .equ	PINA	= 0x00
                                 
                                 
                                 ; ***** BIT DEFINITIONS **************************************************
                                 
                                 ; ***** ANALOG_COMPARATOR ************
                                 ; ADCSRB - ADC Control and Status Register B
                                 .equ	ACME	= 6	; Analog Comparator Multiplexer Enable
                                 
                                 ; ACSR - Analog Comparator Control And Status Register
                                 .equ	ACIS0	= 0	; Analog Comparator Interrupt Mode Select bit 0
                                 .equ	ACIS1	= 1	; Analog Comparator Interrupt Mode Select bit 1
                                 .equ	ACIC	= 2	; Analog Comparator Input Capture Enable
                                 .equ	ACIE	= 3	; Analog Comparator Interrupt Enable
                                 .equ	ACI	= 4	; Analog Comparator Interrupt Flag
                                 .equ	ACO	= 5	; Analog Compare Output
                                 .equ	ACBG	= 6	; Analog Comparator Bandgap Select
                                 .equ	ACD	= 7	; Analog Comparator Disable
                                 
                                 ; DIDR1 - Digital Input Disable Register 1
                                 .equ	AIN0D	= 0	; AIN0 Digital Input Disable
                                 .equ	AIN1D	= 1	; AIN1 Digital Input Disable
                                 
                                 
                                 ; ***** USART0 ***********************
                                 ; UDR0 - USART I/O Data Register
                                 .equ	UDR0_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR0_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR0_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR0_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR0_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR0_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR0_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR0_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR0A - USART Control and Status Register A
                                 .equ	MPCM0	= 0	; Multi-processor Communication Mode
                                 .equ	U2X0	= 1	; Double the USART transmission speed
                                 .equ	UPE0	= 2	; Parity Error
                                 .equ	DOR0	= 3	; Data overRun
                                 .equ	FE0	= 4	; Framing Error
                                 .equ	UDRE0	= 5	; USART Data Register Empty
                                 .equ	TXC0	= 6	; USART Transmitt Complete
                                 .equ	RXC0	= 7	; USART Receive Complete
                                 
                                 ; UCSR0B - USART Control and Status Register B
                                 .equ	TXB80	= 0	; Transmit Data Bit 8
                                 .equ	RXB80	= 1	; Receive Data Bit 8
                                 .equ	UCSZ02	= 2	; Character Size
                                 .equ	TXEN0	= 3	; Transmitter Enable
                                 .equ	RXEN0	= 4	; Receiver Enable
                                 .equ	UDRIE0	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE0	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE0	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR0C - USART Control and Status Register C
                                 .equ	UCPOL0	= 0	; Clock Polarity
                                 .equ	UCSZ00	= 1	; Character Size
                                 .equ	UCPHA0	= UCSZ00	; For compatibility
                                 .equ	UCSZ01	= 2	; Character Size
                                 .equ	UDORD0	= UCSZ01	; For compatibility
                                 .equ	USBS0	= 3	; Stop Bit Select
                                 .equ	UPM00	= 4	; Parity Mode Bit 0
                                 .equ	UPM01	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL00	= 6	; USART Mode Select
                                 .equ	UMSEL0	= UMSEL00	; For compatibility
                                 .equ	UMSEL01	= 7	; USART Mode Select
                                 .equ	UMSEL1	= UMSEL01	; For compatibility
                                 
                                 ; UBRR0H - USART Baud Rate Register High Byte
                                 .equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR0L - USART Baud Rate Register Low Byte
                                 .equ	_UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	_UBRR1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** TWI **************************
                                 ; TWAMR - TWI (Slave) Address Mask Register
                                 .equ	TWAM0	= 1	; 
                                 .equ	TWAMR0	= TWAM0	; For compatibility
                                 .equ	TWAM1	= 2	; 
                                 .equ	TWAMR1	= TWAM1	; For compatibility
                                 .equ	TWAM2	= 3	; 
                                 .equ	TWAMR2	= TWAM2	; For compatibility
                                 .equ	TWAM3	= 4	; 
                                 .equ	TWAMR3	= TWAM3	; For compatibility
                                 .equ	TWAM4	= 5	; 
                                 .equ	TWAMR4	= TWAM4	; For compatibility
                                 .equ	TWAM5	= 6	; 
                                 .equ	TWAMR5	= TWAM5	; For compatibility
                                 .equ	TWAM6	= 7	; 
                                 .equ	TWAMR6	= TWAM6	; For compatibility
                                 
                                 ; TWBR - TWI Bit Rate register
                                 .equ	TWBR0	= 0	; 
                                 .equ	TWBR1	= 1	; 
                                 .equ	TWBR2	= 2	; 
                                 .equ	TWBR3	= 3	; 
                                 .equ	TWBR4	= 4	; 
                                 .equ	TWBR5	= 5	; 
                                 .equ	TWBR6	= 6	; 
                                 .equ	TWBR7	= 7	; 
                                 
                                 ; TWCR - TWI Control Register
                                 .equ	TWIE	= 0	; TWI Interrupt Enable
                                 .equ	TWEN	= 2	; TWI Enable Bit
                                 .equ	TWWC	= 3	; TWI Write Collition Flag
                                 .equ	TWSTO	= 4	; TWI Stop Condition Bit
                                 .equ	TWSTA	= 5	; TWI Start Condition Bit
                                 .equ	TWEA	= 6	; TWI Enable Acknowledge Bit
                                 .equ	TWINT	= 7	; TWI Interrupt Flag
                                 
                                 ; TWSR - TWI Status Register
                                 .equ	TWPS0	= 0	; TWI Prescaler
                                 .equ	TWPS1	= 1	; TWI Prescaler
                                 .equ	TWS3	= 3	; TWI Status
                                 .equ	TWS4	= 4	; TWI Status
                                 .equ	TWS5	= 5	; TWI Status
                                 .equ	TWS6	= 6	; TWI Status
                                 .equ	TWS7	= 7	; TWI Status
                                 
                                 ; TWDR - TWI Data register
                                 .equ	TWD0	= 0	; TWI Data Register Bit 0
                                 .equ	TWD1	= 1	; TWI Data Register Bit 1
                                 .equ	TWD2	= 2	; TWI Data Register Bit 2
                                 .equ	TWD3	= 3	; TWI Data Register Bit 3
                                 .equ	TWD4	= 4	; TWI Data Register Bit 4
                                 .equ	TWD5	= 5	; TWI Data Register Bit 5
                                 .equ	TWD6	= 6	; TWI Data Register Bit 6
                                 .equ	TWD7	= 7	; TWI Data Register Bit 7
                                 
                                 ; TWAR - TWI (Slave) Address register
                                 .equ	TWGCE	= 0	; TWI General Call Recognition Enable Bit
                                 .equ	TWA0	= 1	; TWI (Slave) Address register Bit 0
                                 .equ	TWA1	= 2	; TWI (Slave) Address register Bit 1
                                 .equ	TWA2	= 3	; TWI (Slave) Address register Bit 2
                                 .equ	TWA3	= 4	; TWI (Slave) Address register Bit 3
                                 .equ	TWA4	= 5	; TWI (Slave) Address register Bit 4
                                 .equ	TWA5	= 6	; TWI (Slave) Address register Bit 5
                                 .equ	TWA6	= 7	; TWI (Slave) Address register Bit 6
                                 
                                 
                                 ; ***** SPI **************************
                                 ; SPDR - SPI Data Register
                                 .equ	SPDR0	= 0	; SPI Data Register bit 0
                                 .equ	SPDR1	= 1	; SPI Data Register bit 1
                                 .equ	SPDR2	= 2	; SPI Data Register bit 2
                                 .equ	SPDR3	= 3	; SPI Data Register bit 3
                                 .equ	SPDR4	= 4	; SPI Data Register bit 4
                                 .equ	SPDR5	= 5	; SPI Data Register bit 5
                                 .equ	SPDR6	= 6	; SPI Data Register bit 6
                                 .equ	SPDR7	= 7	; SPI Data Register bit 7
                                 
                                 ; SPSR - SPI Status Register
                                 .equ	SPI2X	= 0	; Double SPI Speed Bit
                                 .equ	WCOL	= 6	; Write Collision Flag
                                 .equ	SPIF	= 7	; SPI Interrupt Flag
                                 
                                 ; SPCR - SPI Control Register
                                 .equ	SPR0	= 0	; SPI Clock Rate Select 0
                                 .equ	SPR1	= 1	; SPI Clock Rate Select 1
                                 .equ	CPHA	= 2	; Clock Phase
                                 .equ	CPOL	= 3	; Clock polarity
                                 .equ	MSTR	= 4	; Master/Slave Select
                                 .equ	DORD	= 5	; Data Order
                                 .equ	SPE	= 6	; SPI Enable
                                 .equ	SPIE	= 7	; SPI Interrupt Enable
                                 
                                 
                                 ; ***** PORTA ************************
                                 ; PORTA - Port A Data Register
                                 .equ	PORTA0	= 0	; Port A Data Register bit 0
                                 .equ	PA0	= 0	; For compatibility
                                 .equ	PORTA1	= 1	; Port A Data Register bit 1
                                 .equ	PA1	= 1	; For compatibility
                                 .equ	PORTA2	= 2	; Port A Data Register bit 2
                                 .equ	PA2	= 2	; For compatibility
                                 .equ	PORTA3	= 3	; Port A Data Register bit 3
                                 .equ	PA3	= 3	; For compatibility
                                 .equ	PORTA4	= 4	; Port A Data Register bit 4
                                 .equ	PA4	= 4	; For compatibility
                                 .equ	PORTA5	= 5	; Port A Data Register bit 5
                                 .equ	PA5	= 5	; For compatibility
                                 .equ	PORTA6	= 6	; Port A Data Register bit 6
                                 .equ	PA6	= 6	; For compatibility
                                 .equ	PORTA7	= 7	; Port A Data Register bit 7
                                 .equ	PA7	= 7	; For compatibility
                                 
                                 ; DDRA - Port A Data Direction Register
                                 .equ	DDA0	= 0	; Data Direction Register, Port A, bit 0
                                 .equ	DDA1	= 1	; Data Direction Register, Port A, bit 1
                                 .equ	DDA2	= 2	; Data Direction Register, Port A, bit 2
                                 .equ	DDA3	= 3	; Data Direction Register, Port A, bit 3
                                 .equ	DDA4	= 4	; Data Direction Register, Port A, bit 4
                                 .equ	DDA5	= 5	; Data Direction Register, Port A, bit 5
                                 .equ	DDA6	= 6	; Data Direction Register, Port A, bit 6
                                 .equ	DDA7	= 7	; Data Direction Register, Port A, bit 7
                                 
                                 ; PINA - Port A Input Pins
                                 .equ	PINA0	= 0	; Input Pins, Port A bit 0
                                 .equ	PINA1	= 1	; Input Pins, Port A bit 1
                                 .equ	PINA2	= 2	; Input Pins, Port A bit 2
                                 .equ	PINA3	= 3	; Input Pins, Port A bit 3
                                 .equ	PINA4	= 4	; Input Pins, Port A bit 4
                                 .equ	PINA5	= 5	; Input Pins, Port A bit 5
                                 .equ	PINA6	= 6	; Input Pins, Port A bit 6
                                 .equ	PINA7	= 7	; Input Pins, Port A bit 7
                                 
                                 
                                 ; ***** PORTB ************************
                                 ; PORTB - Port B Data Register
                                 .equ	PORTB0	= 0	; Port B Data Register bit 0
                                 .equ	PB0	= 0	; For compatibility
                                 .equ	PORTB1	= 1	; Port B Data Register bit 1
                                 .equ	PB1	= 1	; For compatibility
                                 .equ	PORTB2	= 2	; Port B Data Register bit 2
                                 .equ	PB2	= 2	; For compatibility
                                 .equ	PORTB3	= 3	; Port B Data Register bit 3
                                 .equ	PB3	= 3	; For compatibility
                                 .equ	PORTB4	= 4	; Port B Data Register bit 4
                                 .equ	PB4	= 4	; For compatibility
                                 .equ	PORTB5	= 5	; Port B Data Register bit 5
                                 .equ	PB5	= 5	; For compatibility
                                 .equ	PORTB6	= 6	; Port B Data Register bit 6
                                 .equ	PB6	= 6	; For compatibility
                                 .equ	PORTB7	= 7	; Port B Data Register bit 7
                                 .equ	PB7	= 7	; For compatibility
                                 
                                 ; DDRB - Port B Data Direction Register
                                 .equ	DDB0	= 0	; Port B Data Direction Register bit 0
                                 .equ	DDB1	= 1	; Port B Data Direction Register bit 1
                                 .equ	DDB2	= 2	; Port B Data Direction Register bit 2
                                 .equ	DDB3	= 3	; Port B Data Direction Register bit 3
                                 .equ	DDB4	= 4	; Port B Data Direction Register bit 4
                                 .equ	DDB5	= 5	; Port B Data Direction Register bit 5
                                 .equ	DDB6	= 6	; Port B Data Direction Register bit 6
                                 .equ	DDB7	= 7	; Port B Data Direction Register bit 7
                                 
                                 ; PINB - Port B Input Pins
                                 .equ	PINB0	= 0	; Port B Input Pins bit 0
                                 .equ	PINB1	= 1	; Port B Input Pins bit 1
                                 .equ	PINB2	= 2	; Port B Input Pins bit 2
                                 .equ	PINB3	= 3	; Port B Input Pins bit 3
                                 .equ	PINB4	= 4	; Port B Input Pins bit 4
                                 .equ	PINB5	= 5	; Port B Input Pins bit 5
                                 .equ	PINB6	= 6	; Port B Input Pins bit 6
                                 .equ	PINB7	= 7	; Port B Input Pins bit 7
                                 
                                 
                                 ; ***** PORTC ************************
                                 ; PORTC - Port C Data Register
                                 .equ	PORTC0	= 0	; Port C Data Register bit 0
                                 .equ	PC0	= 0	; For compatibility
                                 .equ	PORTC1	= 1	; Port C Data Register bit 1
                                 .equ	PC1	= 1	; For compatibility
                                 .equ	PORTC2	= 2	; Port C Data Register bit 2
                                 .equ	PC2	= 2	; For compatibility
                                 .equ	PORTC3	= 3	; Port C Data Register bit 3
                                 .equ	PC3	= 3	; For compatibility
                                 .equ	PORTC4	= 4	; Port C Data Register bit 4
                                 .equ	PC4	= 4	; For compatibility
                                 .equ	PORTC5	= 5	; Port C Data Register bit 5
                                 .equ	PC5	= 5	; For compatibility
                                 .equ	PORTC6	= 6	; Port C Data Register bit 6
                                 .equ	PC6	= 6	; For compatibility
                                 .equ	PORTC7	= 7	; Port C Data Register bit 7
                                 .equ	PC7	= 7	; For compatibility
                                 
                                 ; DDRC - Port C Data Direction Register
                                 .equ	DDC0	= 0	; Port C Data Direction Register bit 0
                                 .equ	DDC1	= 1	; Port C Data Direction Register bit 1
                                 .equ	DDC2	= 2	; Port C Data Direction Register bit 2
                                 .equ	DDC3	= 3	; Port C Data Direction Register bit 3
                                 .equ	DDC4	= 4	; Port C Data Direction Register bit 4
                                 .equ	DDC5	= 5	; Port C Data Direction Register bit 5
                                 .equ	DDC6	= 6	; Port C Data Direction Register bit 6
                                 .equ	DDC7	= 7	; Port C Data Direction Register bit 7
                                 
                                 ; PINC - Port C Input Pins
                                 .equ	PINC0	= 0	; Port C Input Pins bit 0
                                 .equ	PINC1	= 1	; Port C Input Pins bit 1
                                 .equ	PINC2	= 2	; Port C Input Pins bit 2
                                 .equ	PINC3	= 3	; Port C Input Pins bit 3
                                 .equ	PINC4	= 4	; Port C Input Pins bit 4
                                 .equ	PINC5	= 5	; Port C Input Pins bit 5
                                 .equ	PINC6	= 6	; Port C Input Pins bit 6
                                 .equ	PINC7	= 7	; Port C Input Pins bit 7
                                 
                                 
                                 ; ***** PORTD ************************
                                 ; PORTD - Port D Data Register
                                 .equ	PORTD0	= 0	; Port D Data Register bit 0
                                 .equ	PD0	= 0	; For compatibility
                                 .equ	PORTD1	= 1	; Port D Data Register bit 1
                                 .equ	PD1	= 1	; For compatibility
                                 .equ	PORTD2	= 2	; Port D Data Register bit 2
                                 .equ	PD2	= 2	; For compatibility
                                 .equ	PORTD3	= 3	; Port D Data Register bit 3
                                 .equ	PD3	= 3	; For compatibility
                                 .equ	PORTD4	= 4	; Port D Data Register bit 4
                                 .equ	PD4	= 4	; For compatibility
                                 .equ	PORTD5	= 5	; Port D Data Register bit 5
                                 .equ	PD5	= 5	; For compatibility
                                 .equ	PORTD6	= 6	; Port D Data Register bit 6
                                 .equ	PD6	= 6	; For compatibility
                                 .equ	PORTD7	= 7	; Port D Data Register bit 7
                                 .equ	PD7	= 7	; For compatibility
                                 
                                 ; DDRD - Port D Data Direction Register
                                 .equ	DDD0	= 0	; Port D Data Direction Register bit 0
                                 .equ	DDD1	= 1	; Port D Data Direction Register bit 1
                                 .equ	DDD2	= 2	; Port D Data Direction Register bit 2
                                 .equ	DDD3	= 3	; Port D Data Direction Register bit 3
                                 .equ	DDD4	= 4	; Port D Data Direction Register bit 4
                                 .equ	DDD5	= 5	; Port D Data Direction Register bit 5
                                 .equ	DDD6	= 6	; Port D Data Direction Register bit 6
                                 .equ	DDD7	= 7	; Port D Data Direction Register bit 7
                                 
                                 ; PIND - Port D Input Pins
                                 .equ	PIND0	= 0	; Port D Input Pins bit 0
                                 .equ	PIND1	= 1	; Port D Input Pins bit 1
                                 .equ	PIND2	= 2	; Port D Input Pins bit 2
                                 .equ	PIND3	= 3	; Port D Input Pins bit 3
                                 .equ	PIND4	= 4	; Port D Input Pins bit 4
                                 .equ	PIND5	= 5	; Port D Input Pins bit 5
                                 .equ	PIND6	= 6	; Port D Input Pins bit 6
                                 .equ	PIND7	= 7	; Port D Input Pins bit 7
                                 
                                 
                                 ; ***** PORTE ************************
                                 ; PORTE - Data Register, Port E
                                 .equ	PORTE0	= 0	; 
                                 .equ	PE0	= 0	; For compatibility
                                 .equ	PORTE1	= 1	; 
                                 .equ	PE1	= 1	; For compatibility
                                 .equ	PORTE2	= 2	; 
                                 .equ	PE2	= 2	; For compatibility
                                 .equ	PORTE3	= 3	; 
                                 .equ	PE3	= 3	; For compatibility
                                 .equ	PORTE4	= 4	; 
                                 .equ	PE4	= 4	; For compatibility
                                 .equ	PORTE5	= 5	; 
                                 .equ	PE5	= 5	; For compatibility
                                 .equ	PORTE6	= 6	; 
                                 .equ	PE6	= 6	; For compatibility
                                 .equ	PORTE7	= 7	; 
                                 .equ	PE7	= 7	; For compatibility
                                 
                                 ; DDRE - Data Direction Register, Port E
                                 .equ	DDE0	= 0	; 
                                 .equ	DDE1	= 1	; 
                                 .equ	DDE2	= 2	; 
                                 .equ	DDE3	= 3	; 
                                 .equ	DDE4	= 4	; 
                                 .equ	DDE5	= 5	; 
                                 .equ	DDE6	= 6	; 
                                 .equ	DDE7	= 7	; 
                                 
                                 ; PINE - Input Pins, Port E
                                 .equ	PINE0	= 0	; 
                                 .equ	PINE1	= 1	; 
                                 .equ	PINE2	= 2	; 
                                 .equ	PINE3	= 3	; 
                                 .equ	PINE4	= 4	; 
                                 .equ	PINE5	= 5	; 
                                 .equ	PINE6	= 6	; 
                                 .equ	PINE7	= 7	; 
                                 
                                 
                                 ; ***** PORTF ************************
                                 ; PORTF - Data Register, Port F
                                 .equ	PORTF0	= 0	; 
                                 .equ	PF0	= 0	; For compatibility
                                 .equ	PORTF1	= 1	; 
                                 .equ	PF1	= 1	; For compatibility
                                 .equ	PORTF2	= 2	; 
                                 .equ	PF2	= 2	; For compatibility
                                 .equ	PORTF3	= 3	; 
                                 .equ	PF3	= 3	; For compatibility
                                 .equ	PORTF4	= 4	; 
                                 .equ	PF4	= 4	; For compatibility
                                 .equ	PORTF5	= 5	; 
                                 .equ	PF5	= 5	; For compatibility
                                 .equ	PORTF6	= 6	; 
                                 .equ	PF6	= 6	; For compatibility
                                 .equ	PORTF7	= 7	; 
                                 .equ	PF7	= 7	; For compatibility
                                 
                                 ; DDRF - Data Direction Register, Port F
                                 .equ	DDF0	= 0	; 
                                 .equ	DDF1	= 1	; 
                                 .equ	DDF2	= 2	; 
                                 .equ	DDF3	= 3	; 
                                 .equ	DDF4	= 4	; 
                                 .equ	DDF5	= 5	; 
                                 .equ	DDF6	= 6	; 
                                 .equ	DDF7	= 7	; 
                                 
                                 ; PINF - Input Pins, Port F
                                 .equ	PINF0	= 0	; 
                                 .equ	PINF1	= 1	; 
                                 .equ	PINF2	= 2	; 
                                 .equ	PINF3	= 3	; 
                                 .equ	PINF4	= 4	; 
                                 .equ	PINF5	= 5	; 
                                 .equ	PINF6	= 6	; 
                                 .equ	PINF7	= 7	; 
                                 
                                 
                                 ; ***** PORTG ************************
                                 ; PORTG - Data Register, Port G
                                 .equ	PORTG0	= 0	; 
                                 .equ	PG0	= 0	; For compatibility
                                 .equ	PORTG1	= 1	; 
                                 .equ	PG1	= 1	; For compatibility
                                 .equ	PORTG2	= 2	; 
                                 .equ	PG2	= 2	; For compatibility
                                 .equ	PORTG3	= 3	; 
                                 .equ	PG3	= 3	; For compatibility
                                 .equ	PORTG4	= 4	; 
                                 .equ	PG4	= 4	; For compatibility
                                 .equ	PORTG5	= 5	; 
                                 .equ	PG5	= 5	; For compatibility
                                 
                                 ; DDRG - Data Direction Register, Port G
                                 .equ	DDG0	= 0	; 
                                 .equ	DDG1	= 1	; 
                                 .equ	DDG2	= 2	; 
                                 .equ	DDG3	= 3	; 
                                 .equ	DDG4	= 4	; 
                                 .equ	DDG5	= 5	; 
                                 
                                 ; PING - Input Pins, Port G
                                 .equ	PING0	= 0	; 
                                 .equ	PING1	= 1	; 
                                 .equ	PING2	= 2	; 
                                 .equ	PING3	= 3	; 
                                 .equ	PING4	= 4	; 
                                 .equ	PING5	= 5	; 
                                 
                                 
                                 ; ***** PORTH ************************
                                 ; PORTH - PORT H Data Register
                                 .equ	PORTH0	= 0	; PORT H Data Register bit 0
                                 .equ	PH0	= 0	; For compatibility
                                 .equ	PORTH1	= 1	; PORT H Data Register bit 1
                                 .equ	PH1	= 1	; For compatibility
                                 .equ	PORTH2	= 2	; PORT H Data Register bit 2
                                 .equ	PH2	= 2	; For compatibility
                                 .equ	PORTH3	= 3	; PORT H Data Register bit 3
                                 .equ	PH3	= 3	; For compatibility
                                 .equ	PORTH4	= 4	; PORT H Data Register bit 4
                                 .equ	PH4	= 4	; For compatibility
                                 .equ	PORTH5	= 5	; PORT H Data Register bit 5
                                 .equ	PH5	= 5	; For compatibility
                                 .equ	PORTH6	= 6	; PORT H Data Register bit 6
                                 .equ	PH6	= 6	; For compatibility
                                 .equ	PORTH7	= 7	; PORT H Data Register bit 7
                                 .equ	PH7	= 7	; For compatibility
                                 
                                 ; DDRH - PORT H Data Direction Register
                                 .equ	DDH0	= 0	; PORT H Data Direction Register bit 0
                                 .equ	DDH1	= 1	; PORT H Data Direction Register bit 1
                                 .equ	DDH2	= 2	; PORT H Data Direction Register bit 2
                                 .equ	DDH3	= 3	; PORT H Data Direction Register bit 3
                                 .equ	DDH4	= 4	; PORT H Data Direction Register bit 4
                                 .equ	DDH5	= 5	; PORT H Data Direction Register bit 5
                                 .equ	DDH6	= 6	; PORT H Data Direction Register bit 6
                                 .equ	DDH7	= 7	; PORT H Data Direction Register bit 7
                                 
                                 ; PINH - PORT H Input Pins
                                 .equ	PINH0	= 0	; PORT H Input Pins bit 0
                                 .equ	PINH1	= 1	; PORT H Input Pins bit 1
                                 .equ	PINH2	= 2	; PORT H Input Pins bit 2
                                 .equ	PINH3	= 3	; PORT H Input Pins bit 3
                                 .equ	PINH4	= 4	; PORT H Input Pins bit 4
                                 .equ	PINH5	= 5	; PORT H Input Pins bit 5
                                 .equ	PINH6	= 6	; PORT H Input Pins bit 6
                                 .equ	PINH7	= 7	; PORT H Input Pins bit 7
                                 
                                 
                                 ; ***** PORTJ ************************
                                 ; PORTJ - PORT J Data Register
                                 .equ	PORTJ0	= 0	; PORT J Data Register bit 0
                                 .equ	PJ0	= 0	; For compatibility
                                 .equ	PORTJ1	= 1	; PORT J Data Register bit 1
                                 .equ	PJ1	= 1	; For compatibility
                                 .equ	PORTJ2	= 2	; PORT J Data Register bit 2
                                 .equ	PJ2	= 2	; For compatibility
                                 .equ	PORTJ3	= 3	; PORT J Data Register bit 3
                                 .equ	PJ3	= 3	; For compatibility
                                 .equ	PORTJ4	= 4	; PORT J Data Register bit 4
                                 .equ	PJ4	= 4	; For compatibility
                                 .equ	PORTJ5	= 5	; PORT J Data Register bit 5
                                 .equ	PJ5	= 5	; For compatibility
                                 .equ	PORTJ6	= 6	; PORT J Data Register bit 6
                                 .equ	PJ6	= 6	; For compatibility
                                 .equ	PORTJ7	= 7	; PORT J Data Register bit 7
                                 .equ	PJ7	= 7	; For compatibility
                                 
                                 ; DDRJ - PORT J Data Direction Register
                                 .equ	DDJ0	= 0	; PORT J Data Direction Register bit 0
                                 .equ	DDJ1	= 1	; PORT J Data Direction Register bit 1
                                 .equ	DDJ2	= 2	; PORT J Data Direction Register bit 2
                                 .equ	DDJ3	= 3	; PORT J Data Direction Register bit 3
                                 .equ	DDJ4	= 4	; PORT J Data Direction Register bit 4
                                 .equ	DDJ5	= 5	; PORT J Data Direction Register bit 5
                                 .equ	DDJ6	= 6	; PORT J Data Direction Register bit 6
                                 .equ	DDJ7	= 7	; PORT J Data Direction Register bit 7
                                 
                                 ; PINJ - PORT J Input Pins
                                 .equ	PINJ0	= 0	; PORT J Input Pins bit 0
                                 .equ	PINJ1	= 1	; PORT J Input Pins bit 1
                                 .equ	PINJ2	= 2	; PORT J Input Pins bit 2
                                 .equ	PINJ3	= 3	; PORT J Input Pins bit 3
                                 .equ	PINJ4	= 4	; PORT J Input Pins bit 4
                                 .equ	PINJ5	= 5	; PORT J Input Pins bit 5
                                 .equ	PINJ6	= 6	; PORT J Input Pins bit 6
                                 .equ	PINJ7	= 7	; PORT J Input Pins bit 7
                                 
                                 
                                 ; ***** PORTK ************************
                                 ; PORTK - PORT K Data Register
                                 .equ	PORTK0	= 0	; PORT K Data Register bit 0
                                 .equ	PK0	= 0	; For compatibility
                                 .equ	PORTK1	= 1	; PORT K Data Register bit 1
                                 .equ	PK1	= 1	; For compatibility
                                 .equ	PORTK2	= 2	; PORT K Data Register bit 2
                                 .equ	PK2	= 2	; For compatibility
                                 .equ	PORTK3	= 3	; PORT K Data Register bit 3
                                 .equ	PK3	= 3	; For compatibility
                                 .equ	PORTK4	= 4	; PORT K Data Register bit 4
                                 .equ	PK4	= 4	; For compatibility
                                 .equ	PORTK5	= 5	; PORT K Data Register bit 5
                                 .equ	PK5	= 5	; For compatibility
                                 .equ	PORTK6	= 6	; PORT K Data Register bit 6
                                 .equ	PK6	= 6	; For compatibility
                                 .equ	PORTK7	= 7	; PORT K Data Register bit 7
                                 .equ	PK7	= 7	; For compatibility
                                 
                                 ; DDRK - PORT K Data Direction Register
                                 .equ	DDK0	= 0	; PORT K Data Direction Register bit 0
                                 .equ	DDK1	= 1	; PORT K Data Direction Register bit 1
                                 .equ	DDK2	= 2	; PORT K Data Direction Register bit 2
                                 .equ	DDK3	= 3	; PORT K Data Direction Register bit 3
                                 .equ	DDK4	= 4	; PORT K Data Direction Register bit 4
                                 .equ	DDK5	= 5	; PORT K Data Direction Register bit 5
                                 .equ	DDK6	= 6	; PORT K Data Direction Register bit 6
                                 .equ	DDK7	= 7	; PORT K Data Direction Register bit 7
                                 
                                 ; PINK - PORT K Input Pins
                                 .equ	PINK0	= 0	; PORT K Input Pins bit 0
                                 .equ	PINK1	= 1	; PORT K Input Pins bit 1
                                 .equ	PINK2	= 2	; PORT K Input Pins bit 2
                                 .equ	PINK3	= 3	; PORT K Input Pins bit 3
                                 .equ	PINK4	= 4	; PORT K Input Pins bit 4
                                 .equ	PINK5	= 5	; PORT K Input Pins bit 5
                                 .equ	PINK6	= 6	; PORT K Input Pins bit 6
                                 .equ	PINK7	= 7	; PORT K Input Pins bit 7
                                 
                                 
                                 ; ***** PORTL ************************
                                 ; PORTL - PORT L Data Register
                                 .equ	PORTL0	= 0	; PORT L Data Register bit 0
                                 .equ	PL0	= 0	; For compatibility
                                 .equ	PORTL1	= 1	; PORT L Data Register bit 1
                                 .equ	PL1	= 1	; For compatibility
                                 .equ	PORTL2	= 2	; PORT L Data Register bit 2
                                 .equ	PL2	= 2	; For compatibility
                                 .equ	PORTL3	= 3	; PORT L Data Register bit 3
                                 .equ	PL3	= 3	; For compatibility
                                 .equ	PORTL4	= 4	; PORT L Data Register bit 4
                                 .equ	PL4	= 4	; For compatibility
                                 .equ	PORTL5	= 5	; PORT L Data Register bit 5
                                 .equ	PL5	= 5	; For compatibility
                                 .equ	PORTL6	= 6	; PORT L Data Register bit 6
                                 .equ	PL6	= 6	; For compatibility
                                 .equ	PORTL7	= 7	; PORT L Data Register bit 7
                                 .equ	PL7	= 7	; For compatibility
                                 
                                 ; DDRL - PORT L Data Direction Register
                                 .equ	DDL0	= 0	; PORT L Data Direction Register bit 0
                                 .equ	DDL1	= 1	; PORT L Data Direction Register bit 1
                                 .equ	DDL2	= 2	; PORT L Data Direction Register bit 2
                                 .equ	DDL3	= 3	; PORT L Data Direction Register bit 3
                                 .equ	DDL4	= 4	; PORT L Data Direction Register bit 4
                                 .equ	DDL5	= 5	; PORT L Data Direction Register bit 5
                                 .equ	DDL6	= 6	; PORT L Data Direction Register bit 6
                                 .equ	DDL7	= 7	; PORT L Data Direction Register bit 7
                                 
                                 ; PINL - PORT L Input Pins
                                 .equ	PINL0	= 0	; PORT L Input Pins bit 0
                                 .equ	PINL1	= 1	; PORT L Input Pins bit 1
                                 .equ	PINL2	= 2	; PORT L Input Pins bit 2
                                 .equ	PINL3	= 3	; PORT L Input Pins bit 3
                                 .equ	PINL4	= 4	; PORT L Input Pins bit 4
                                 .equ	PINL5	= 5	; PORT L Input Pins bit 5
                                 .equ	PINL6	= 6	; PORT L Input Pins bit 6
                                 .equ	PINL7	= 7	; PORT L Input Pins bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_0 **************
                                 ; TIMSK0 - Timer/Counter0 Interrupt Mask Register
                                 .equ	TOIE0	= 0	; Timer/Counter0 Overflow Interrupt Enable
                                 .equ	OCIE0A	= 1	; Timer/Counter0 Output Compare Match A Interrupt Enable
                                 .equ	OCIE0B	= 2	; Timer/Counter0 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR0 - Timer/Counter0 Interrupt Flag register
                                 .equ	TOV0	= 0	; Timer/Counter0 Overflow Flag
                                 .equ	OCF0A	= 1	; Timer/Counter0 Output Compare Flag 0A
                                 .equ	OCF0B	= 2	; Timer/Counter0 Output Compare Flag 0B
                                 
                                 ; TCCR0A - Timer/Counter  Control Register A
                                 .equ	WGM00	= 0	; Waveform Generation Mode
                                 .equ	WGM01	= 1	; Waveform Generation Mode
                                 .equ	COM0B0	= 4	; Compare Output Mode, Fast PWm
                                 .equ	COM0B1	= 5	; Compare Output Mode, Fast PWm
                                 .equ	COM0A0	= 6	; Compare Output Mode, Phase Correct PWM Mode
                                 .equ	COM0A1	= 7	; Compare Output Mode, Phase Correct PWM Mode
                                 
                                 ; TCCR0B - Timer/Counter Control Register B
                                 .equ	CS00	= 0	; Clock Select
                                 .equ	CS01	= 1	; Clock Select
                                 .equ	CS02	= 2	; Clock Select
                                 .equ	WGM02	= 3	; 
                                 .equ	FOC0B	= 6	; Force Output Compare B
                                 .equ	FOC0A	= 7	; Force Output Compare A
                                 
                                 ; TCNT0 - Timer/Counter0
                                 .equ	TCNT0_0	= 0	; 
                                 .equ	TCNT0_1	= 1	; 
                                 .equ	TCNT0_2	= 2	; 
                                 .equ	TCNT0_3	= 3	; 
                                 .equ	TCNT0_4	= 4	; 
                                 .equ	TCNT0_5	= 5	; 
                                 .equ	TCNT0_6	= 6	; 
                                 .equ	TCNT0_7	= 7	; 
                                 
                                 ; OCR0A - Timer/Counter0 Output Compare Register
                                 .equ	OCR0A_0	= 0	; 
                                 .equ	OCR0A_1	= 1	; 
                                 .equ	OCR0A_2	= 2	; 
                                 .equ	OCR0A_3	= 3	; 
                                 .equ	OCR0A_4	= 4	; 
                                 .equ	OCR0A_5	= 5	; 
                                 .equ	OCR0A_6	= 6	; 
                                 .equ	OCR0A_7	= 7	; 
                                 
                                 ; OCR0B - Timer/Counter0 Output Compare Register
                                 .equ	OCR0B_0	= 0	; 
                                 .equ	OCR0B_1	= 1	; 
                                 .equ	OCR0B_2	= 2	; 
                                 .equ	OCR0B_3	= 3	; 
                                 .equ	OCR0B_4	= 4	; 
                                 .equ	OCR0B_5	= 5	; 
                                 .equ	OCR0B_6	= 6	; 
                                 .equ	OCR0B_7	= 7	; 
                                 
                                 ; GTCCR - General Timer/Counter Control Register
                                 .equ	PSRSYNC	= 0	; Prescaler Reset Timer/Counter1 and Timer/Counter0
                                 .equ	PSR10	= PSRSYNC	; For compatibility
                                 .equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** TIMER_COUNTER_2 **************
                                 ; TIMSK2 - Timer/Counter Interrupt Mask register
                                 .equ	TOIE2	= 0	; Timer/Counter2 Overflow Interrupt Enable
                                 .equ	TOIE2A	= TOIE2	; For compatibility
                                 .equ	OCIE2A	= 1	; Timer/Counter2 Output Compare Match A Interrupt Enable
                                 .equ	OCIE2B	= 2	; Timer/Counter2 Output Compare Match B Interrupt Enable
                                 
                                 ; TIFR2 - Timer/Counter Interrupt Flag Register
                                 .equ	TOV2	= 0	; Timer/Counter2 Overflow Flag
                                 .equ	OCF2A	= 1	; Output Compare Flag 2A
                                 .equ	OCF2B	= 2	; Output Compare Flag 2B
                                 
                                 ; TCCR2A - Timer/Counter2 Control Register A
                                 .equ	WGM20	= 0	; Waveform Genration Mode
                                 .equ	WGM21	= 1	; Waveform Genration Mode
                                 .equ	COM2B0	= 4	; Compare Output Mode bit 0
                                 .equ	COM2B1	= 5	; Compare Output Mode bit 1
                                 .equ	COM2A0	= 6	; Compare Output Mode bit 1
                                 .equ	COM2A1	= 7	; Compare Output Mode bit 1
                                 
                                 ; TCCR2B - Timer/Counter2 Control Register B
                                 .equ	CS20	= 0	; Clock Select bit 0
                                 .equ	CS21	= 1	; Clock Select bit 1
                                 .equ	CS22	= 2	; Clock Select bit 2
                                 .equ	WGM22	= 3	; Waveform Generation Mode
                                 .equ	FOC2B	= 6	; Force Output Compare B
                                 .equ	FOC2A	= 7	; Force Output Compare A
                                 
                                 ; TCNT2 - Timer/Counter2
                                 .equ	TCNT2_0	= 0	; Timer/Counter 2 bit 0
                                 .equ	TCNT2_1	= 1	; Timer/Counter 2 bit 1
                                 .equ	TCNT2_2	= 2	; Timer/Counter 2 bit 2
                                 .equ	TCNT2_3	= 3	; Timer/Counter 2 bit 3
                                 .equ	TCNT2_4	= 4	; Timer/Counter 2 bit 4
                                 .equ	TCNT2_5	= 5	; Timer/Counter 2 bit 5
                                 .equ	TCNT2_6	= 6	; Timer/Counter 2 bit 6
                                 .equ	TCNT2_7	= 7	; Timer/Counter 2 bit 7
                                 
                                 ; OCR2A - Timer/Counter2 Output Compare Register A
                                 .equ	OCR2A_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2A_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2A_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2A_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2A_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2A_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2A_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2A_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; OCR2B - Timer/Counter2 Output Compare Register B
                                 .equ	OCR2B_0	= 0	; Timer/Counter2 Output Compare Register Bit 0
                                 .equ	OCR2B_1	= 1	; Timer/Counter2 Output Compare Register Bit 1
                                 .equ	OCR2B_2	= 2	; Timer/Counter2 Output Compare Register Bit 2
                                 .equ	OCR2B_3	= 3	; Timer/Counter2 Output Compare Register Bit 3
                                 .equ	OCR2B_4	= 4	; Timer/Counter2 Output Compare Register Bit 4
                                 .equ	OCR2B_5	= 5	; Timer/Counter2 Output Compare Register Bit 5
                                 .equ	OCR2B_6	= 6	; Timer/Counter2 Output Compare Register Bit 6
                                 .equ	OCR2B_7	= 7	; Timer/Counter2 Output Compare Register Bit 7
                                 
                                 ; ASSR - Asynchronous Status Register
                                 .equ	TCR2BUB	= 0	; Timer/Counter Control Register2 Update Busy
                                 .equ	TCR2AUB	= 1	; Timer/Counter Control Register2 Update Busy
                                 .equ	OCR2BUB	= 2	; Output Compare Register 2 Update Busy
                                 .equ	OCR2AUB	= 3	; Output Compare Register2 Update Busy
                                 .equ	TCN2UB	= 4	; Timer/Counter2 Update Busy
                                 .equ	AS2	= 5	; Asynchronous Timer/Counter2
                                 .equ	EXCLK	= 6	; Enable External Clock Input
                                 
                                 ; GTCCR - General Timer Counter Control register
                                 .equ	PSRASY	= 1	; Prescaler Reset Timer/Counter2
                                 .equ	PSR2	= PSRASY	; For compatibility
                                 ;.equ	TSM	= 7	; Timer/Counter Synchronization Mode
                                 
                                 
                                 ; ***** WATCHDOG *********************
                                 ; WDTCSR - Watchdog Timer Control Register
                                 .equ	WDP0	= 0	; Watch Dog Timer Prescaler bit 0
                                 .equ	WDP1	= 1	; Watch Dog Timer Prescaler bit 1
                                 .equ	WDP2	= 2	; Watch Dog Timer Prescaler bit 2
                                 .equ	WDE	= 3	; Watch Dog Enable
                                 .equ	WDCE	= 4	; Watchdog Change Enable
                                 .equ	WDP3	= 5	; Watchdog Timer Prescaler Bit 3
                                 .equ	WDIE	= 6	; Watchdog Timeout Interrupt Enable
                                 .equ	WDIF	= 7	; Watchdog Timeout Interrupt Flag
                                 
                                 
                                 ; ***** USART1 ***********************
                                 ; UDR1 - USART I/O Data Register
                                 .equ	UDR1_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR1_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR1_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR1_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR1_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR1_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR1_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR1_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR1A - USART Control and Status Register A
                                 .equ	MPCM1	= 0	; Multi-processor Communication Mode
                                 .equ	U2X1	= 1	; Double the USART transmission speed
                                 .equ	UPE1	= 2	; Parity Error
                                 .equ	DOR1	= 3	; Data overRun
                                 .equ	FE1	= 4	; Framing Error
                                 .equ	UDRE1	= 5	; USART Data Register Empty
                                 .equ	TXC1	= 6	; USART Transmitt Complete
                                 .equ	RXC1	= 7	; USART Receive Complete
                                 
                                 ; UCSR1B - USART Control and Status Register B
                                 .equ	TXB81	= 0	; Transmit Data Bit 8
                                 .equ	RXB81	= 1	; Receive Data Bit 8
                                 .equ	UCSZ12	= 2	; Character Size
                                 .equ	TXEN1	= 3	; Transmitter Enable
                                 .equ	RXEN1	= 4	; Receiver Enable
                                 .equ	UDRIE1	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE1	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE1	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR1C - USART Control and Status Register C
                                 .equ	UCPOL1	= 0	; Clock Polarity
                                 .equ	UCSZ10	= 1	; Character Size
                                 .equ	UCPHA1	= UCSZ10	; For compatibility
                                 .equ	UCSZ11	= 2	; Character Size
                                 .equ	UDORD1	= UCSZ11	; For compatibility
                                 .equ	USBS1	= 3	; Stop Bit Select
                                 .equ	UPM10	= 4	; Parity Mode Bit 0
                                 .equ	UPM11	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL10	= 6	; USART Mode Select
                                 .equ	UMSEL11	= 7	; USART Mode Select
                                 
                                 ; UBRR1H - USART Baud Rate Register High Byte
                                 .equ	UBRR_8	= 0	; USART Baud Rate Register bit 8
                                 .equ	UBRR_9	= 1	; USART Baud Rate Register bit 9
                                 .equ	UBRR_10	= 2	; USART Baud Rate Register bit 10
                                 .equ	UBRR_11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR1L - USART Baud Rate Register Low Byte
                                 .equ	UBRR_0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR_1	= 1	; USART Baud Rate Register bit 1
                                 .equ	UBRR_2	= 2	; USART Baud Rate Register bit 2
                                 .equ	UBRR_3	= 3	; USART Baud Rate Register bit 3
                                 .equ	UBRR_4	= 4	; USART Baud Rate Register bit 4
                                 .equ	UBRR_5	= 5	; USART Baud Rate Register bit 5
                                 .equ	UBRR_6	= 6	; USART Baud Rate Register bit 6
                                 .equ	UBRR_7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** EEPROM ***********************
                                 ; EEARH - EEPROM Address Register Low Byte
                                 .equ	EEAR8	= 0	; EEPROM Read/Write Access Bit 8
                                 .equ	EEAR9	= 1	; EEPROM Read/Write Access Bit 9
                                 .equ	EEAR10	= 2	; EEPROM Read/Write Access Bit 10
                                 .equ	EEAR11	= 3	; EEPROM Read/Write Access Bit 11
                                 
                                 ; EEARL - EEPROM Address Register Low Byte
                                 .equ	EEAR0	= 0	; EEPROM Read/Write Access Bit 0
                                 .equ	EEAR1	= 1	; EEPROM Read/Write Access Bit 1
                                 .equ	EEAR2	= 2	; EEPROM Read/Write Access Bit 2
                                 .equ	EEAR3	= 3	; EEPROM Read/Write Access Bit 3
                                 .equ	EEAR4	= 4	; EEPROM Read/Write Access Bit 4
                                 .equ	EEAR5	= 5	; EEPROM Read/Write Access Bit 5
                                 .equ	EEAR6	= 6	; EEPROM Read/Write Access Bit 6
                                 .equ	EEAR7	= 7	; EEPROM Read/Write Access Bit 7
                                 
                                 ; EEDR - EEPROM Data Register
                                 .equ	EEDR0	= 0	; EEPROM Data Register bit 0
                                 .equ	EEDR1	= 1	; EEPROM Data Register bit 1
                                 .equ	EEDR2	= 2	; EEPROM Data Register bit 2
                                 .equ	EEDR3	= 3	; EEPROM Data Register bit 3
                                 .equ	EEDR4	= 4	; EEPROM Data Register bit 4
                                 .equ	EEDR5	= 5	; EEPROM Data Register bit 5
                                 .equ	EEDR6	= 6	; EEPROM Data Register bit 6
                                 .equ	EEDR7	= 7	; EEPROM Data Register bit 7
                                 
                                 ; EECR - EEPROM Control Register
                                 .equ	EERE	= 0	; EEPROM Read Enable
                                 .equ	EEPE	= 1	; EEPROM Write Enable
                                 .equ	EEMPE	= 2	; EEPROM Master Write Enable
                                 .equ	EERIE	= 3	; EEPROM Ready Interrupt Enable
                                 .equ	EEPM0	= 4	; EEPROM Programming Mode Bit 0
                                 .equ	EEPM1	= 5	; EEPROM Programming Mode Bit 1
                                 
                                 
                                 ; ***** TIMER_COUNTER_5 **************
                                 ; TIMSK5 - Timer/Counter5 Interrupt Mask Register
                                 .equ	TOIE5	= 0	; Timer/Counter5 Overflow Interrupt Enable
                                 .equ	OCIE5A	= 1	; Timer/Counter5 Output Compare A Match Interrupt Enable
                                 .equ	OCIE5B	= 2	; Timer/Counter5 Output Compare B Match Interrupt Enable
                                 .equ	OCIE5C	= 3	; Timer/Counter5 Output Compare C Match Interrupt Enable
                                 .equ	ICIE5	= 5	; Timer/Counter5 Input Capture Interrupt Enable
                                 
                                 ; TIFR5 - Timer/Counter5 Interrupt Flag register
                                 .equ	TOV5	= 0	; Timer/Counter5 Overflow Flag
                                 .equ	OCF5A	= 1	; Output Compare Flag 5A
                                 .equ	OCF5B	= 2	; Output Compare Flag 5B
                                 .equ	OCF5C	= 3	; Output Compare Flag 5C
                                 .equ	ICF5	= 5	; Input Capture Flag 5
                                 
                                 ; TCCR5A - Timer/Counter5 Control Register A
                                 .equ	WGM50	= 0	; Waveform Generation Mode
                                 .equ	WGM51	= 1	; Waveform Generation Mode
                                 .equ	COM5C0	= 2	; Compare Output Mode 5C, bit 0
                                 .equ	COM5C1	= 3	; Compare Output Mode 5C, bit 1
                                 .equ	COM5B0	= 4	; Compare Output Mode 5B, bit 0
                                 .equ	COM5B1	= 5	; Compare Output Mode 5B, bit 1
                                 .equ	COM5A0	= 6	; Compare Output Mode 5A, bit 0
                                 .equ	COM5A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR5B - Timer/Counter5 Control Register B
                                 .equ	CS50	= 0	; Prescaler source of Timer/Counter 5
                                 .equ	CS51	= 1	; Prescaler source of Timer/Counter 5
                                 .equ	CS52	= 2	; Prescaler source of Timer/Counter 5
                                 .equ	WGM52	= 3	; Waveform Generation Mode
                                 .equ	WGM53	= 4	; Waveform Generation Mode
                                 .equ	ICES5	= 6	; Input Capture 5 Edge Select
                                 .equ	ICNC5	= 7	; Input Capture 5 Noise Canceler
                                 
                                 ; TCCR5C - Timer/Counter 5 Control Register C
                                 .equ	FOC5C	= 5	; Force Output Compare 5C
                                 .equ	FOC5B	= 6	; Force Output Compare 5B
                                 .equ	FOC5A	= 7	; Force Output Compare 5A
                                 
                                 ; ICR5H - Timer/Counter5 Input Capture Register High Byte
                                 .equ	ICR5H0	= 0	; Timer/Counter5 Input Capture Register High Byte bit 0
                                 .equ	ICR5H1	= 1	; Timer/Counter5 Input Capture Register High Byte bit 1
                                 .equ	ICR5H2	= 2	; Timer/Counter5 Input Capture Register High Byte bit 2
                                 .equ	ICR5H3	= 3	; Timer/Counter5 Input Capture Register High Byte bit 3
                                 .equ	ICR5H4	= 4	; Timer/Counter5 Input Capture Register High Byte bit 4
                                 .equ	ICR5H5	= 5	; Timer/Counter5 Input Capture Register High Byte bit 5
                                 .equ	ICR5H6	= 6	; Timer/Counter5 Input Capture Register High Byte bit 6
                                 .equ	ICR5H7	= 7	; Timer/Counter5 Input Capture Register High Byte bit 7
                                 
                                 ; ICR5L - Timer/Counter5 Input Capture Register Low Byte
                                 .equ	ICR5L0	= 0	; Timer/Counter5 Input Capture Register Low Byte bit 0
                                 .equ	ICR5L1	= 1	; Timer/Counter5 Input Capture Register Low Byte bit 1
                                 .equ	ICR5L2	= 2	; Timer/Counter5 Input Capture Register Low Byte bit 2
                                 .equ	ICR5L3	= 3	; Timer/Counter5 Input Capture Register Low Byte bit 3
                                 .equ	ICR5L4	= 4	; Timer/Counter5 Input Capture Register Low Byte bit 4
                                 .equ	ICR5L5	= 5	; Timer/Counter5 Input Capture Register Low Byte bit 5
                                 .equ	ICR5L6	= 6	; Timer/Counter5 Input Capture Register Low Byte bit 6
                                 .equ	ICR5L7	= 7	; Timer/Counter5 Input Capture Register Low Byte bit 7
                                 
                                 
                                 ; ***** TIMER_COUNTER_4 **************
                                 ; TIMSK4 - Timer/Counter4 Interrupt Mask Register
                                 .equ	TOIE4	= 0	; Timer/Counter4 Overflow Interrupt Enable
                                 .equ	OCIE4A	= 1	; Timer/Counter4 Output Compare A Match Interrupt Enable
                                 .equ	OCIE4B	= 2	; Timer/Counter4 Output Compare B Match Interrupt Enable
                                 .equ	OCIE4C	= 3	; Timer/Counter4 Output Compare C Match Interrupt Enable
                                 .equ	ICIE4	= 5	; Timer/Counter4 Input Capture Interrupt Enable
                                 
                                 ; TIFR4 - Timer/Counter4 Interrupt Flag register
                                 .equ	TOV4	= 0	; Timer/Counter4 Overflow Flag
                                 .equ	OCF4A	= 1	; Output Compare Flag 4A
                                 .equ	OCF4B	= 2	; Output Compare Flag 4B
                                 .equ	OCF4C	= 3	; Output Compare Flag 4C
                                 .equ	ICF4	= 5	; Input Capture Flag 4
                                 
                                 ; TCCR4A - Timer/Counter4 Control Register A
                                 .equ	WGM40	= 0	; Waveform Generation Mode
                                 .equ	WGM41	= 1	; Waveform Generation Mode
                                 .equ	COM4C0	= 2	; Compare Output Mode 4C, bit 0
                                 .equ	COM4C1	= 3	; Compare Output Mode 4C, bit 1
                                 .equ	COM4B0	= 4	; Compare Output Mode 4B, bit 0
                                 .equ	COM4B1	= 5	; Compare Output Mode 4B, bit 1
                                 .equ	COM4A0	= 6	; Compare Output Mode 4A, bit 0
                                 .equ	COM4A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR4B - Timer/Counter4 Control Register B
                                 .equ	CS40	= 0	; Prescaler source of Timer/Counter 4
                                 .equ	CS41	= 1	; Prescaler source of Timer/Counter 4
                                 .equ	CS42	= 2	; Prescaler source of Timer/Counter 4
                                 .equ	WGM42	= 3	; Waveform Generation Mode
                                 .equ	WGM43	= 4	; Waveform Generation Mode
                                 .equ	ICES4	= 6	; Input Capture 4 Edge Select
                                 .equ	ICNC4	= 7	; Input Capture 4 Noise Canceler
                                 
                                 ; TCCR4C - Timer/Counter 4 Control Register C
                                 .equ	FOC4C	= 5	; Force Output Compare 4C
                                 .equ	FOC4B	= 6	; Force Output Compare 4B
                                 .equ	FOC4A	= 7	; Force Output Compare 4A
                                 
                                 
                                 ; ***** TIMER_COUNTER_3 **************
                                 ; TIMSK3 - Timer/Counter3 Interrupt Mask Register
                                 .equ	TOIE3	= 0	; Timer/Counter3 Overflow Interrupt Enable
                                 .equ	OCIE3A	= 1	; Timer/Counter3 Output Compare A Match Interrupt Enable
                                 .equ	OCIE3B	= 2	; Timer/Counter3 Output Compare B Match Interrupt Enable
                                 .equ	OCIE3C	= 3	; Timer/Counter3 Output Compare C Match Interrupt Enable
                                 .equ	ICIE3	= 5	; Timer/Counter3 Input Capture Interrupt Enable
                                 
                                 ; TIFR3 - Timer/Counter3 Interrupt Flag register
                                 .equ	TOV3	= 0	; Timer/Counter3 Overflow Flag
                                 .equ	OCF3A	= 1	; Output Compare Flag 3A
                                 .equ	OCF3B	= 2	; Output Compare Flag 3B
                                 .equ	OCF3C	= 3	; Output Compare Flag 3C
                                 .equ	ICF3	= 5	; Input Capture Flag 3
                                 
                                 ; TCCR3A - Timer/Counter3 Control Register A
                                 .equ	WGM30	= 0	; Waveform Generation Mode
                                 .equ	WGM31	= 1	; Waveform Generation Mode
                                 .equ	COM3C0	= 2	; Compare Output Mode 3C, bit 0
                                 .equ	COM3C1	= 3	; Compare Output Mode 3C, bit 1
                                 .equ	COM3B0	= 4	; Compare Output Mode 3B, bit 0
                                 .equ	COM3B1	= 5	; Compare Output Mode 3B, bit 1
                                 .equ	COM3A0	= 6	; Compare Output Mode 3A, bit 0
                                 .equ	COM3A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR3B - Timer/Counter3 Control Register B
                                 .equ	CS30	= 0	; Prescaler source of Timer/Counter 3
                                 .equ	CS31	= 1	; Prescaler source of Timer/Counter 3
                                 .equ	CS32	= 2	; Prescaler source of Timer/Counter 3
                                 .equ	WGM32	= 3	; Waveform Generation Mode
                                 .equ	WGM33	= 4	; Waveform Generation Mode
                                 .equ	ICES3	= 6	; Input Capture 3 Edge Select
                                 .equ	ICNC3	= 7	; Input Capture 3 Noise Canceler
                                 
                                 ; TCCR3C - Timer/Counter 3 Control Register C
                                 .equ	FOC3C	= 5	; Force Output Compare 3C
                                 .equ	FOC3B	= 6	; Force Output Compare 3B
                                 .equ	FOC3A	= 7	; Force Output Compare 3A
                                 
                                 
                                 ; ***** TIMER_COUNTER_1 **************
                                 ; TIMSK1 - Timer/Counter1 Interrupt Mask Register
                                 .equ	TOIE1	= 0	; Timer/Counter1 Overflow Interrupt Enable
                                 .equ	OCIE1A	= 1	; Timer/Counter1 Output Compare A Match Interrupt Enable
                                 .equ	OCIE1B	= 2	; Timer/Counter1 Output Compare B Match Interrupt Enable
                                 .equ	OCIE1C	= 3	; Timer/Counter1 Output Compare C Match Interrupt Enable
                                 .equ	ICIE1	= 5	; Timer/Counter1 Input Capture Interrupt Enable
                                 
                                 ; TIFR1 - Timer/Counter1 Interrupt Flag register
                                 .equ	TOV1	= 0	; Timer/Counter1 Overflow Flag
                                 .equ	OCF1A	= 1	; Output Compare Flag 1A
                                 .equ	OCF1B	= 2	; Output Compare Flag 1B
                                 .equ	OCF1C	= 3	; Output Compare Flag 1C
                                 .equ	ICF1	= 5	; Input Capture Flag 1
                                 
                                 ; TCCR1A - Timer/Counter1 Control Register A
                                 .equ	WGM10	= 0	; Waveform Generation Mode
                                 .equ	WGM11	= 1	; Waveform Generation Mode
                                 .equ	COM1C0	= 2	; Compare Output Mode 1C, bit 0
                                 .equ	COM1C1	= 3	; Compare Output Mode 1C, bit 1
                                 .equ	COM1B0	= 4	; Compare Output Mode 1B, bit 0
                                 .equ	COM1B1	= 5	; Compare Output Mode 1B, bit 1
                                 .equ	COM1A0	= 6	; Compare Output Mode 1A, bit 0
                                 .equ	COM1A1	= 7	; Compare Output Mode 1A, bit 1
                                 
                                 ; TCCR1B - Timer/Counter1 Control Register B
                                 .equ	CS10	= 0	; Prescaler source of Timer/Counter 1
                                 .equ	CS11	= 1	; Prescaler source of Timer/Counter 1
                                 .equ	CS12	= 2	; Prescaler source of Timer/Counter 1
                                 .equ	WGM12	= 3	; Waveform Generation Mode
                                 .equ	WGM13	= 4	; Waveform Generation Mode
                                 .equ	ICES1	= 6	; Input Capture 1 Edge Select
                                 .equ	ICNC1	= 7	; Input Capture 1 Noise Canceler
                                 
                                 ; TCCR1C - Timer/Counter 1 Control Register C
                                 .equ	FOC1C	= 5	; Force Output Compare 1C
                                 .equ	FOC1B	= 6	; Force Output Compare 1B
                                 .equ	FOC1A	= 7	; Force Output Compare 1A
                                 
                                 
                                 ; ***** JTAG *************************
                                 ; OCDR - On-Chip Debug Related Register in I/O Memory
                                 .equ	OCDR0	= 0	; On-Chip Debug Register Bit 0
                                 .equ	OCDR1	= 1	; On-Chip Debug Register Bit 1
                                 .equ	OCDR2	= 2	; On-Chip Debug Register Bit 2
                                 .equ	OCDR3	= 3	; On-Chip Debug Register Bit 3
                                 .equ	OCDR4	= 4	; On-Chip Debug Register Bit 4
                                 .equ	OCDR5	= 5	; On-Chip Debug Register Bit 5
                                 .equ	OCDR6	= 6	; On-Chip Debug Register Bit 6
                                 .equ	OCDR7	= 7	; On-Chip Debug Register Bit 7
                                 .equ	IDRD	= OCDR7	; For compatibility
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 
                                 ; ***** EXTERNAL_INTERRUPT ***********
                                 ; EICRA - External Interrupt Control Register A
                                 .equ	ISC00	= 0	; External Interrupt Sense Control Bit
                                 .equ	ISC01	= 1	; External Interrupt Sense Control Bit
                                 .equ	ISC10	= 2	; External Interrupt Sense Control Bit
                                 .equ	ISC11	= 3	; External Interrupt Sense Control Bit
                                 .equ	ISC20	= 4	; External Interrupt Sense Control Bit
                                 .equ	ISC21	= 5	; External Interrupt Sense Control Bit
                                 .equ	ISC30	= 6	; External Interrupt Sense Control Bit
                                 .equ	ISC31	= 7	; External Interrupt Sense Control Bit
                                 
                                 ; EICRB - External Interrupt Control Register B
                                 .equ	ISC40	= 0	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC41	= 1	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC50	= 2	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC51	= 3	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC60	= 4	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC61	= 5	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC70	= 6	; External Interrupt 7-4 Sense Control Bit
                                 .equ	ISC71	= 7	; External Interrupt 7-4 Sense Control Bit
                                 
                                 ; EIMSK - External Interrupt Mask Register
                                 .equ	INT0	= 0	; External Interrupt Request 0 Enable
                                 .equ	INT1	= 1	; External Interrupt Request 1 Enable
                                 .equ	INT2	= 2	; External Interrupt Request 2 Enable
                                 .equ	INT3	= 3	; External Interrupt Request 3 Enable
                                 .equ	INT4	= 4	; External Interrupt Request 4 Enable
                                 .equ	INT5	= 5	; External Interrupt Request 5 Enable
                                 .equ	INT6	= 6	; External Interrupt Request 6 Enable
                                 .equ	INT7	= 7	; External Interrupt Request 7 Enable
                                 
                                 ; EIFR - External Interrupt Flag Register
                                 .equ	INTF0	= 0	; External Interrupt Flag 0
                                 .equ	INTF1	= 1	; External Interrupt Flag 1
                                 .equ	INTF2	= 2	; External Interrupt Flag 2
                                 .equ	INTF3	= 3	; External Interrupt Flag 3
                                 .equ	INTF4	= 4	; External Interrupt Flag 4
                                 .equ	INTF5	= 5	; External Interrupt Flag 5
                                 .equ	INTF6	= 6	; External Interrupt Flag 6
                                 .equ	INTF7	= 7	; External Interrupt Flag 7
                                 
                                 ; PCICR - Pin Change Interrupt Control Register
                                 .equ	PCIE0	= 0	; Pin Change Interrupt Enable 0
                                 .equ	PCIE1	= 1	; Pin Change Interrupt Enable 1
                                 .equ	PCIE2	= 2	; Pin Change Interrupt Enable 2
                                 
                                 ; PCIFR - Pin Change Interrupt Flag Register
                                 .equ	PCIF0	= 0	; Pin Change Interrupt Flag 0
                                 .equ	PCIF1	= 1	; Pin Change Interrupt Flag 1
                                 .equ	PCIF2	= 2	; Pin Change Interrupt Flag 2
                                 
                                 ; PCMSK2 - Pin Change Mask Register 2
                                 .equ	PCINT16	= 0	; Pin Change Enable Mask 16
                                 .equ	PCINT17	= 1	; Pin Change Enable Mask 17
                                 .equ	PCINT18	= 2	; Pin Change Enable Mask 18
                                 .equ	PCINT19	= 3	; Pin Change Enable Mask 19
                                 .equ	PCINT20	= 4	; Pin Change Enable Mask 20
                                 .equ	PCINT21	= 5	; Pin Change Enable Mask 21
                                 .equ	PCINT22	= 6	; Pin Change Enable Mask 22
                                 .equ	PCINT23	= 7	; Pin Change Enable Mask 23
                                 
                                 ; PCMSK1 - Pin Change Mask Register 1
                                 .equ	PCINT8	= 0	; Pin Change Enable Mask 8
                                 .equ	PCINT9	= 1	; Pin Change Enable Mask 9
                                 .equ	PCINT10	= 2	; Pin Change Enable Mask 10
                                 .equ	PCINT11	= 3	; Pin Change Enable Mask 11
                                 .equ	PCINT12	= 4	; Pin Change Enable Mask 12
                                 .equ	PCINT13	= 5	; Pin Change Enable Mask 13
                                 .equ	PCINT14	= 6	; Pin Change Enable Mask 14
                                 .equ	PCINT15	= 7	; Pin Change Enable Mask 15
                                 
                                 ; PCMSK0 - Pin Change Mask Register 0
                                 .equ	PCINT0	= 0	; Pin Change Enable Mask 0
                                 .equ	PCINT1	= 1	; Pin Change Enable Mask 1
                                 .equ	PCINT2	= 2	; Pin Change Enable Mask 2
                                 .equ	PCINT3	= 3	; Pin Change Enable Mask 3
                                 .equ	PCINT4	= 4	; Pin Change Enable Mask 4
                                 .equ	PCINT5	= 5	; Pin Change Enable Mask 5
                                 .equ	PCINT6	= 6	; Pin Change Enable Mask 6
                                 .equ	PCINT7	= 7	; Pin Change Enable Mask 7
                                 
                                 
                                 ; ***** CPU **************************
                                 ; SREG - Status Register
                                 .equ	SREG_C	= 0	; Carry Flag
                                 .equ	SREG_Z	= 1	; Zero Flag
                                 .equ	SREG_N	= 2	; Negative Flag
                                 .equ	SREG_V	= 3	; Two's Complement Overflow Flag
                                 .equ	SREG_S	= 4	; Sign Bit
                                 .equ	SREG_H	= 5	; Half Carry Flag
                                 .equ	SREG_T	= 6	; Bit Copy Storage
                                 .equ	SREG_I	= 7	; Global Interrupt Enable
                                 
                                 ; MCUCR - MCU Control Register
                                 .equ	IVCE	= 0	; Interrupt Vector Change Enable
                                 .equ	IVSEL	= 1	; Interrupt Vector Select
                                 .equ	PUD	= 4	; Pull-up disable
                                 ;.equ	JTD	= 7	; JTAG Interface Disable
                                 
                                 ; MCUSR - MCU Status Register
                                 .equ	PORF	= 0	; Power-on reset flag
                                 .equ	EXTRF	= 1	; External Reset Flag
                                 .equ	BORF	= 2	; Brown-out Reset Flag
                                 .equ	WDRF	= 3	; Watchdog Reset Flag
                                 ;.equ	JTRF	= 4	; JTAG Reset Flag
                                 
                                 ; XMCRA - External Memory Control Register A
                                 .equ	SRW00	= 0	; Wait state select bit lower page
                                 .equ	SRW01	= 1	; Wait state select bit lower page
                                 .equ	SRW10	= 2	; Wait state select bit upper page
                                 .equ	SRW11	= 3	; Wait state select bit upper page
                                 .equ	SRL0	= 4	; Wait state page limit
                                 .equ	SRL1	= 5	; Wait state page limit
                                 .equ	SRL2	= 6	; Wait state page limit
                                 .equ	SRE	= 7	; External SRAM Enable
                                 
                                 ; XMCRB - External Memory Control Register B
                                 .equ	XMM0	= 0	; External Memory High Mask
                                 .equ	XMM1	= 1	; External Memory High Mask
                                 .equ	XMM2	= 2	; External Memory High Mask
                                 .equ	XMBK	= 7	; External Memory Bus Keeper Enable
                                 
                                 ; OSCCAL - Oscillator Calibration Value
                                 .equ	CAL0	= 0	; Oscillator Calibration Value Bit0
                                 .equ	CAL1	= 1	; Oscillator Calibration Value Bit1
                                 .equ	CAL2	= 2	; Oscillator Calibration Value Bit2
                                 .equ	CAL3	= 3	; Oscillator Calibration Value Bit3
                                 .equ	CAL4	= 4	; Oscillator Calibration Value Bit4
                                 .equ	CAL5	= 5	; Oscillator Calibration Value Bit5
                                 .equ	CAL6	= 6	; Oscillator Calibration Value Bit6
                                 .equ	CAL7	= 7	; Oscillator Calibration Value Bit7
                                 
                                 ; CLKPR - 
                                 .equ	CLKPS0	= 0	; 
                                 .equ	CLKPS1	= 1	; 
                                 .equ	CLKPS2	= 2	; 
                                 .equ	CLKPS3	= 3	; 
                                 .equ	CLKPCE	= 7	; 
                                 
                                 ; SMCR - Sleep Mode Control Register
                                 .equ	SE	= 0	; Sleep Enable
                                 .equ	SM0	= 1	; Sleep Mode Select bit 0
                                 .equ	SM1	= 2	; Sleep Mode Select bit 1
                                 .equ	SM2	= 3	; Sleep Mode Select bit 2
                                 
                                 ; RAMPZ - RAM Page Z Select Register
                                 .equ	RAMPZ0	= 0	; RAM Page Z Select Register Bit 0
                                 .equ	RAMPZ1	= 1	; RAM Page Z Select Register Bit 1
                                 
                                 ; EIND - Extended Indirect Register
                                 .equ	EIND0	= 0	; Bit 0
                                 
                                 ; GPIOR2 - General Purpose IO Register 2
                                 .equ	GPIOR20	= 0	; General Purpose IO Register 2 bit 0
                                 .equ	GPIOR21	= 1	; General Purpose IO Register 2 bit 1
                                 .equ	GPIOR22	= 2	; General Purpose IO Register 2 bit 2
                                 .equ	GPIOR23	= 3	; General Purpose IO Register 2 bit 3
                                 .equ	GPIOR24	= 4	; General Purpose IO Register 2 bit 4
                                 .equ	GPIOR25	= 5	; General Purpose IO Register 2 bit 5
                                 .equ	GPIOR26	= 6	; General Purpose IO Register 2 bit 6
                                 .equ	GPIOR27	= 7	; General Purpose IO Register 2 bit 7
                                 
                                 ; GPIOR1 - General Purpose IO Register 1
                                 .equ	GPIOR10	= 0	; General Purpose IO Register 1 bit 0
                                 .equ	GPIOR11	= 1	; General Purpose IO Register 1 bit 1
                                 .equ	GPIOR12	= 2	; General Purpose IO Register 1 bit 2
                                 .equ	GPIOR13	= 3	; General Purpose IO Register 1 bit 3
                                 .equ	GPIOR14	= 4	; General Purpose IO Register 1 bit 4
                                 .equ	GPIOR15	= 5	; General Purpose IO Register 1 bit 5
                                 .equ	GPIOR16	= 6	; General Purpose IO Register 1 bit 6
                                 .equ	GPIOR17	= 7	; General Purpose IO Register 1 bit 7
                                 
                                 ; GPIOR0 - General Purpose IO Register 0
                                 .equ	GPIOR00	= 0	; General Purpose IO Register 0 bit 0
                                 .equ	GPIOR01	= 1	; General Purpose IO Register 0 bit 1
                                 .equ	GPIOR02	= 2	; General Purpose IO Register 0 bit 2
                                 .equ	GPIOR03	= 3	; General Purpose IO Register 0 bit 3
                                 .equ	GPIOR04	= 4	; General Purpose IO Register 0 bit 4
                                 .equ	GPIOR05	= 5	; General Purpose IO Register 0 bit 5
                                 .equ	GPIOR06	= 6	; General Purpose IO Register 0 bit 6
                                 .equ	GPIOR07	= 7	; General Purpose IO Register 0 bit 7
                                 
                                 ; PRR1 - Power Reduction Register1
                                 .equ	PRUSART1	= 0	; Power Reduction USART1
                                 .equ	PRUSART2	= 1	; Power Reduction USART2
                                 .equ	PRUSART3	= 2	; Power Reduction USART3
                                 .equ	PRTIM3	= 3	; Power Reduction Timer/Counter3
                                 .equ	PRTIM4	= 4	; Power Reduction Timer/Counter4
                                 .equ	PRTIM5	= 5	; Power Reduction Timer/Counter5
                                 
                                 ; PRR0 - Power Reduction Register0
                                 .equ	PRADC	= 0	; Power Reduction ADC
                                 .equ	PRUSART0	= 1	; Power Reduction USART
                                 .equ	PRSPI	= 2	; Power Reduction Serial Peripheral Interface
                                 .equ	PRTIM1	= 3	; Power Reduction Timer/Counter1
                                 .equ	PRTIM0	= 5	; Power Reduction Timer/Counter0
                                 .equ	PRTIM2	= 6	; Power Reduction Timer/Counter2
                                 .equ	PRTWI	= 7	; Power Reduction TWI
                                 
                                 
                                 ; ***** AD_CONVERTER *****************
                                 ; ADMUX - The ADC multiplexer Selection Register
                                 .equ	MUX0	= 0	; Analog Channel and Gain Selection Bits
                                 .equ	MUX1	= 1	; Analog Channel and Gain Selection Bits
                                 .equ	MUX2	= 2	; Analog Channel and Gain Selection Bits
                                 .equ	MUX3	= 3	; Analog Channel and Gain Selection Bits
                                 .equ	MUX4	= 4	; Analog Channel and Gain Selection Bits
                                 .equ	ADLAR	= 5	; Left Adjust Result
                                 .equ	REFS0	= 6	; Reference Selection Bit 0
                                 .equ	REFS1	= 7	; Reference Selection Bit 1
                                 
                                 ; ADCSRA - The ADC Control and Status register A
                                 .equ	ADPS0	= 0	; ADC  Prescaler Select Bits
                                 .equ	ADPS1	= 1	; ADC  Prescaler Select Bits
                                 .equ	ADPS2	= 2	; ADC  Prescaler Select Bits
                                 .equ	ADIE	= 3	; ADC Interrupt Enable
                                 .equ	ADIF	= 4	; ADC Interrupt Flag
                                 .equ	ADATE	= 5	; ADC  Auto Trigger Enable
                                 .equ	ADSC	= 6	; ADC Start Conversion
                                 .equ	ADEN	= 7	; ADC Enable
                                 
                                 ; ADCSRB - The ADC Control and Status register B
                                 .equ	ADTS0	= 0	; ADC Auto Trigger Source bit 0
                                 .equ	ADTS1	= 1	; ADC Auto Trigger Source bit 1
                                 .equ	ADTS2	= 2	; ADC Auto Trigger Source bit 2
                                 .equ	MUX5	= 3	; Analog Channel and Gain Selection Bits
                                 ;.equ	ACME	= 6	; 
                                 
                                 ; ADCH - ADC Data Register High Byte
                                 .equ	ADCH0	= 0	; ADC Data Register High Byte Bit 0
                                 .equ	ADCH1	= 1	; ADC Data Register High Byte Bit 1
                                 .equ	ADCH2	= 2	; ADC Data Register High Byte Bit 2
                                 .equ	ADCH3	= 3	; ADC Data Register High Byte Bit 3
                                 .equ	ADCH4	= 4	; ADC Data Register High Byte Bit 4
                                 .equ	ADCH5	= 5	; ADC Data Register High Byte Bit 5
                                 .equ	ADCH6	= 6	; ADC Data Register High Byte Bit 6
                                 .equ	ADCH7	= 7	; ADC Data Register High Byte Bit 7
                                 
                                 ; ADCL - ADC Data Register Low Byte
                                 .equ	ADCL0	= 0	; ADC Data Register Low Byte Bit 0
                                 .equ	ADCL1	= 1	; ADC Data Register Low Byte Bit 1
                                 .equ	ADCL2	= 2	; ADC Data Register Low Byte Bit 2
                                 .equ	ADCL3	= 3	; ADC Data Register Low Byte Bit 3
                                 .equ	ADCL4	= 4	; ADC Data Register Low Byte Bit 4
                                 .equ	ADCL5	= 5	; ADC Data Register Low Byte Bit 5
                                 .equ	ADCL6	= 6	; ADC Data Register Low Byte Bit 6
                                 .equ	ADCL7	= 7	; ADC Data Register Low Byte Bit 7
                                 
                                 ; DIDR0 - Digital Input Disable Register
                                 .equ	ADC0D	= 0	; 
                                 .equ	ADC1D	= 1	; 
                                 .equ	ADC2D	= 2	; 
                                 .equ	ADC3D	= 3	; 
                                 .equ	ADC4D	= 4	; 
                                 .equ	ADC5D	= 5	; 
                                 .equ	ADC6D	= 6	; 
                                 .equ	ADC7D	= 7	; 
                                 
                                 ; DIDR2 - Digital Input Disable Register
                                 .equ	ADC8D	= 0	; 
                                 .equ	ADC9D	= 1	; 
                                 .equ	ADC10D	= 2	; 
                                 .equ	ADC11D	= 3	; 
                                 .equ	ADC12D	= 4	; 
                                 .equ	ADC13D	= 5	; 
                                 .equ	ADC14D	= 6	; 
                                 .equ	ADC15D	= 7	; 
                                 
                                 
                                 ; ***** BOOT_LOAD ********************
                                 ; SPMCSR - Store Program Memory Control Register
                                 .equ	SPMEN	= 0	; Store Program Memory Enable
                                 .equ	PGERS	= 1	; Page Erase
                                 .equ	PGWRT	= 2	; Page Write
                                 .equ	BLBSET	= 3	; Boot Lock Bit Set
                                 .equ	RWWSRE	= 4	; Read While Write section read enable
                                 .equ	SIGRD	= 5	; Signature Row Read
                                 .equ	RWWSB	= 6	; Read While Write Section Busy
                                 .equ	SPMIE	= 7	; SPM Interrupt Enable
                                 
                                 
                                 ; ***** USART2 ***********************
                                 ; UDR2 - USART I/O Data Register
                                 .equ	UDR2_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR2_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR2_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR2_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR2_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR2_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR2_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR2_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR2A - USART Control and Status Register A
                                 .equ	MPCM2	= 0	; Multi-processor Communication Mode
                                 .equ	U2X2	= 1	; Double the USART transmission speed
                                 .equ	UPE2	= 2	; Parity Error
                                 .equ	DOR2	= 3	; Data overRun
                                 .equ	FE2	= 4	; Framing Error
                                 .equ	UDRE2	= 5	; USART Data Register Empty
                                 .equ	TXC2	= 6	; USART Transmitt Complete
                                 .equ	RXC2	= 7	; USART Receive Complete
                                 
                                 ; UCSR2B - USART Control and Status Register B
                                 .equ	TXB82	= 0	; Transmit Data Bit 8
                                 .equ	RXB82	= 1	; Receive Data Bit 8
                                 .equ	UCSZ22	= 2	; Character Size
                                 .equ	TXEN2	= 3	; Transmitter Enable
                                 .equ	RXEN2	= 4	; Receiver Enable
                                 .equ	UDRIE2	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE2	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE2	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR2C - USART Control and Status Register C
                                 .equ	UCPOL2	= 0	; Clock Polarity
                                 .equ	UCSZ20	= 1	; Character Size
                                 .equ	UCSZ21	= 2	; Character Size
                                 .equ	USBS2	= 3	; Stop Bit Select
                                 .equ	UPM20	= 4	; Parity Mode Bit 0
                                 .equ	UPM21	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL20	= 6	; USART Mode Select
                                 .equ	UMSEL21	= 7	; USART Mode Select
                                 
                                 ; UBRR2H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR2L - USART Baud Rate Register Low Byte
                                 .equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 .equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 ; ***** USART3 ***********************
                                 ; UDR3 - USART I/O Data Register
                                 .equ	UDR3_0	= 0	; USART I/O Data Register bit 0
                                 .equ	UDR3_1	= 1	; USART I/O Data Register bit 1
                                 .equ	UDR3_2	= 2	; USART I/O Data Register bit 2
                                 .equ	UDR3_3	= 3	; USART I/O Data Register bit 3
                                 .equ	UDR3_4	= 4	; USART I/O Data Register bit 4
                                 .equ	UDR3_5	= 5	; USART I/O Data Register bit 5
                                 .equ	UDR3_6	= 6	; USART I/O Data Register bit 6
                                 .equ	UDR3_7	= 7	; USART I/O Data Register bit 7
                                 
                                 ; UCSR3A - USART Control and Status Register A
                                 .equ	MPCM3	= 0	; Multi-processor Communication Mode
                                 .equ	U2X3	= 1	; Double the USART transmission speed
                                 .equ	UPE3	= 2	; Parity Error
                                 .equ	DOR3	= 3	; Data overRun
                                 .equ	FE3	= 4	; Framing Error
                                 .equ	UDRE3	= 5	; USART Data Register Empty
                                 .equ	TXC3	= 6	; USART Transmitt Complete
                                 .equ	RXC3	= 7	; USART Receive Complete
                                 
                                 ; UCSR3B - USART Control and Status Register B
                                 .equ	TXB83	= 0	; Transmit Data Bit 8
                                 .equ	RXB83	= 1	; Receive Data Bit 8
                                 .equ	UCSZ32	= 2	; Character Size
                                 .equ	TXEN3	= 3	; Transmitter Enable
                                 .equ	RXEN3	= 4	; Receiver Enable
                                 .equ	UDRIE3	= 5	; USART Data register Empty Interrupt Enable
                                 .equ	TXCIE3	= 6	; TX Complete Interrupt Enable
                                 .equ	RXCIE3	= 7	; RX Complete Interrupt Enable
                                 
                                 ; UCSR3C - USART Control and Status Register C
                                 .equ	UCPOL3	= 0	; Clock Polarity
                                 .equ	UCSZ30	= 1	; Character Size
                                 .equ	UCSZ31	= 2	; Character Size
                                 .equ	USBS3	= 3	; Stop Bit Select
                                 .equ	UPM30	= 4	; Parity Mode Bit 0
                                 .equ	UPM31	= 5	; Parity Mode Bit 1
                                 .equ	UMSEL30	= 6	; USART Mode Select
                                 .equ	UMSEL31	= 7	; USART Mode Select
                                 
                                 ; UBRR3H - USART Baud Rate Register High Byte
                                 ;.equ	UBRR8	= 0	; USART Baud Rate Register bit 8
                                 ;.equ	UBRR9	= 1	; USART Baud Rate Register bit 9
                                 ;.equ	UBRR10	= 2	; USART Baud Rate Register bit 10
                                 ;.equ	UBRR11	= 3	; USART Baud Rate Register bit 11
                                 
                                 ; UBRR3L - USART Baud Rate Register Low Byte
                                 ;.equ	UBRR0	= 0	; USART Baud Rate Register bit 0
                                 ;.equ	UBRR1	= 1	; USART Baud Rate Register bit 1
                                 ;.equ	UBRR2	= 2	; USART Baud Rate Register bit 2
                                 ;.equ	UBRR3	= 3	; USART Baud Rate Register bit 3
                                 ;.equ	UBRR4	= 4	; USART Baud Rate Register bit 4
                                 ;.equ	UBRR5	= 5	; USART Baud Rate Register bit 5
                                 ;.equ	UBRR6	= 6	; USART Baud Rate Register bit 6
                                 ;.equ	UBRR7	= 7	; USART Baud Rate Register bit 7
                                 
                                 
                                 
                                 ; ***** LOCKSBITS ********************************************************
                                 .equ	LB1	= 0	; Lock bit
                                 .equ	LB2	= 1	; Lock bit
                                 .equ	BLB01	= 2	; Boot Lock bit
                                 .equ	BLB02	= 3	; Boot Lock bit
                                 .equ	BLB11	= 4	; Boot lock bit
                                 .equ	BLB12	= 5	; Boot lock bit
                                 
                                 
                                 ; ***** FUSES ************************************************************
                                 ; LOW fuse bits
                                 .equ	CKSEL0	= 0	; Select Clock Source
                                 .equ	CKSEL1	= 1	; Select Clock Source
                                 .equ	CKSEL2	= 2	; Select Clock Source
                                 .equ	CKSEL3	= 3	; Select Clock Source
                                 .equ	SUT0	= 4	; Select start-up time
                                 .equ	SUT1	= 5	; Select start-up time
                                 .equ	CKOUT	= 6	; Clock output
                                 .equ	CKDIV8	= 7	; Divide clock by 8
                                 
                                 ; HIGH fuse bits
                                 .equ	BOOTRST	= 0	; Select Reset Vector
                                 .equ	BOOTSZ0	= 1	; Select Boot Size
                                 .equ	BOOTSZ1	= 2	; Select Boot Size
                                 .equ	EESAVE	= 3	; EEPROM memory is preserved through chip erase
                                 .equ	WDTON	= 4	; Watchdog timer always on
                                 .equ	SPIEN	= 5	; Enable Serial programming and Data Downloading
                                 .equ	JTAGEN	= 6	; Enable JTAG
                                 .equ	OCDEN	= 7	; Enable OCD
                                 
                                 ; EXTENDED fuse bits
                                 .equ	BODLEVEL0	= 0	; Brown-out Detector trigger level
                                 .equ	BODLEVEL1	= 1	; Brown-out Detector trigger level
                                 .equ	BODLEVEL2	= 2	; Brown-out Detector trigger level
                                 
                                 
                                 
                                 ; ***** CPU REGISTER DEFINITIONS *****************************************
                                 .def	XH	= r27
                                 .def	XL	= r26
                                 .def	YH	= r29
                                 .def	YL	= r28
                                 .def	ZH	= r31
                                 .def	ZL	= r30
                                 
                                 
                                 
                                 ; ***** DATA MEMORY DECLARATIONS *****************************************
                                 .equ	FLASHEND	= 0x1ffff	; Note: Word address
                                 .equ	IOEND	= 0x01ff
                                 .equ	SRAM_START	= 0x0200
                                 .equ	SRAM_SIZE	= 8192
                                 .equ	RAMEND	= 0x21ff
                                 .equ	XRAMEND	= 0xffff
                                 .equ	E2END	= 0x0fff
                                 .equ	EEPROMEND	= 0x0fff
                                 .equ	EEADRBITS	= 12
                                 #pragma AVRPART MEMORY PROG_FLASH 262144
                                 #pragma AVRPART MEMORY EEPROM 4096
                                 #pragma AVRPART MEMORY INT_SRAM SIZE 8192
                                 #pragma AVRPART MEMORY INT_SRAM START_ADDR 0x200
                                 
                                 
                                 
                                 ; ***** BOOTLOADER DECLARATIONS ******************************************
                                 .equ	NRWW_START_ADDR	= 0x1f000
                                 .equ	NRWW_STOP_ADDR	= 0x1ffff
                                 .equ	RWW_START_ADDR	= 0x0
                                 .equ	RWW_STOP_ADDR	= 0x1efff
                                 .equ	PAGESIZE	= 128
                                 .equ	FIRSTBOOTSTART	= 0x1fe00
                                 .equ	SECONDBOOTSTART	= 0x1fc00
                                 .equ	THIRDBOOTSTART	= 0x1f800
                                 .equ	FOURTHBOOTSTART	= 0x1f000
                                 .equ	SMALLBOOTSTART	= FIRSTBOOTSTART
                                 .equ	LARGEBOOTSTART	= FOURTHBOOTSTART
                                 
                                 
                                 
                                 ; ***** INTERRUPT VECTORS ************************************************
                                 .equ	INT0addr	= 0x0002	; External Interrupt Request 0
                                 .equ	INT1addr	= 0x0004	; External Interrupt Request 1
                                 .equ	INT2addr	= 0x0006	; External Interrupt Request 2
                                 .equ	INT3addr	= 0x0008	; External Interrupt Request 3
                                 .equ	INT4addr	= 0x000a	; External Interrupt Request 4
                                 .equ	INT5addr	= 0x000c	; External Interrupt Request 5
                                 .equ	INT6addr	= 0x000e	; External Interrupt Request 6
                                 .equ	INT7addr	= 0x0010	; External Interrupt Request 7
                                 .equ	PCI0addr	= 0x0012	; Pin Change Interrupt Request 0
                                 .equ	PCI1addr	= 0x0014	; Pin Change Interrupt Request 1
                                 .equ	PCI2addr	= 0x0016	; Pin Change Interrupt Request 2
                                 .equ	WDTaddr	= 0x0018	; Watchdog Time-out Interrupt
                                 .equ	OC2Aaddr	= 0x001a	; Timer/Counter2 Compare Match A
                                 .equ	OC2Baddr	= 0x001c	; Timer/Counter2 Compare Match B
                                 .equ	OVF2addr	= 0x001e	; Timer/Counter2 Overflow
                                 .equ	ICP1addr	= 0x0020	; Timer/Counter1 Capture Event
                                 .equ	OC1Aaddr	= 0x0022	; Timer/Counter1 Compare Match A
                                 .equ	OC1Baddr	= 0x0024	; Timer/Counter1 Compare Match B
                                 .equ	OC1Caddr	= 0x0026	; Timer/Counter1 Compare Match C
                                 .equ	OVF1addr	= 0x0028	; Timer/Counter1 Overflow
                                 .equ	OC0Aaddr	= 0x002a	; Timer/Counter0 Compare Match A
                                 .equ	OC0Baddr	= 0x002c	; Timer/Counter0 Compare Match B
                                 .equ	OVF0addr	= 0x002e	; Timer/Counter0 Overflow
                                 .equ	SPIaddr	= 0x0030	; SPI Serial Transfer Complete
                                 .equ	URXC0addr	= 0x0032	; USART0, Rx Complete
                                 .equ	UDRE0addr	= 0x0034	; USART0 Data register Empty
                                 .equ	UTXC0addr	= 0x0036	; USART0, Tx Complete
                                 .equ	ACIaddr	= 0x0038	; Analog Comparator
                                 .equ	ADCCaddr	= 0x003a	; ADC Conversion Complete
                                 .equ	ERDYaddr	= 0x003c	; EEPROM Ready
                                 .equ	ICP3addr	= 0x003e	; Timer/Counter3 Capture Event
                                 .equ	OC3Aaddr	= 0x0040	; Timer/Counter3 Compare Match A
                                 .equ	OC3Baddr	= 0x0042	; Timer/Counter3 Compare Match B
                                 .equ	OC3Caddr	= 0x0044	; Timer/Counter3 Compare Match C
                                 .equ	OVF3addr	= 0x0046	; Timer/Counter3 Overflow
                                 .equ	URXC1addr	= 0x0048	; USART1, Rx Complete
                                 .equ	UDRE1addr	= 0x004a	; USART1 Data register Empty
                                 .equ	UTXC1addr	= 0x004c	; USART1, Tx Complete
                                 .equ	TWIaddr	= 0x004e	; 2-wire Serial Interface
                                 .equ	SPMRaddr	= 0x0050	; Store Program Memory Read
                                 .equ	ICP4addr	= 0x0052	; Timer/Counter4 Capture Event
                                 .equ	OC4Aaddr	= 0x0054	; Timer/Counter4 Compare Match A
                                 .equ	OC4Baddr	= 0x0056	; Timer/Counter4 Compare Match B
                                 .equ	OC4Caddr	= 0x0058	; Timer/Counter4 Compare Match C
                                 .equ	OVF4addr	= 0x005a	; Timer/Counter4 Overflow
                                 .equ	ICP5addr	= 0x005c	; Timer/Counter5 Capture Event
                                 .equ	OC5Aaddr	= 0x005e	; Timer/Counter5 Compare Match A
                                 .equ	OC5Baddr	= 0x0060	; Timer/Counter5 Compare Match B
                                 .equ	OC5Caddr	= 0x0062	; Timer/Counter5 Compare Match C
                                 .equ	OVF5addr	= 0x0064	; Timer/Counter5 Overflow
                                 .equ	URXC2addr	= 0x0066	; USART2, Rx Complete
                                 .equ	UDRE2addr	= 0x0068	; USART2 Data register Empty
                                 .equ	UTXC2addr	= 0x006a	; USART2, Tx Complete
                                 .equ	URXC3addr	= 0x006c	; USART3, Rx Complete
                                 .equ	UDRE3addr	= 0x006e	; USART3 Data register Empty
                                 .equ	UTXC3addr	= 0x0070	; USART3, Tx Complete
                                 
                                 .equ	INT_VECTORS_SIZE	= 114	; size in words
                                 
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 ; ARE
                                 ; main
                                 
                                 ; assembler setup
                                 
                                 .cseg
                                 .nooverlap
                                 .org INT_VECTORS_SIZE
                                 
                                 #define FOSC 16000000
                                 
                                 #include "m2560def.inc"
                                 
                                 ;***** Created: 2011-02-09 12:03 ******* Source: ATmega2560.xml **********
                                 ;*************************************************************************
                                 ;* A P P L I C A T I O N   N O T E   F O R   T H E   A V R   F A M I L Y
                                 ;* 
                                 ;* Number            : AVR000
                                 ;* File Name         : "m2560def.inc"
                                 ;* Title             : Register/Bit Definitions for the ATmega2560
                                 ;* Date              : 2011-02-09
                                 ;* Version           : 2.35
                                 ;* Support E-mail    : avr@atmel.com
                                 ;* Target MCU        : ATmega2560
                                 ;* 
                                 ;* DESCRIPTION
                                 ;* When including this file in the assembly program file, all I/O register 
                                 ;* names and I/O register bit names appearing in the data book can be used.
                                 ;* In addition, the six registers forming the three data pointers X, Y and 
                                 ;* Z have been assigned names XL - ZH. Highest RAM address for Internal 
                                 ;* SRAM is also defined 
                                 ;* 
                                 ;* The Register names are represented by their hexadecimal address.
                                 ;* 
                                 ;* The Register Bit names are represented by their bit number (0-7).
                                 ;* 
                                 ;* Please observe the difference in using the bit names with instructions
                                 ;* such as "sbr"/"cbr" (set/clear bit in register) and "sbrs"/"sbrc"
                                 ;* (skip if bit in register set/cleared). The following example illustrates
                                 ;* this:
                                 ;* 
                                 ;* in    r16,PORTB             ;read PORTB latch
                                 ;* sbr   r16,(1<<PB6)+(1<<PB5) ;set PB6 and PB5 (use masks, not bit#)
                                 ;* out   PORTB,r16             ;output to PORTB
                                 ;* 
                                 ;* in    r16,TIFR              ;read the Timer Interrupt Flag Register
                                 ;* sbrc  r16,TOV0              ;test the overflow flag (use bit#)
                                 ;* rjmp  TOV0_is_set           ;jump if set
                                 ;* ...                         ;otherwise do something else
                                 ;*************************************************************************
                                 
                                 #ifndef _M2560DEF_INC_
                                 #endif  /* _M2560DEF_INC_ */
                                 
                                 ; ***** END OF FILE ******************************************************
                                 
                                 #include "utils.asm"
                                 
                                 #else
                                 #define _INC_U
                                 
                                 ; Francesco Zoccheddu
                                 ; ARE
                                 ; utils
                                 
                                 ; interrupt registers
                                 ; immediate
                                 .def ria = r16
                                 .def rib = r17
                                 .def ric = r18
                                 .def rid = r19
                                 ; non-immediate
                                 .def ri0 = r2
                                 .def ri1 = r3
                                 .def ri2 = r4
                                 .def ri3 = r5
                                 .def ri4 = r6
                                 .def ri5 = r7
                                 .def ri6 = r8
                                 .def ri7 = r9
                                 ; main loop registers
                                 ; immediate
                                 .def rma = r20
                                 .def rmb = r21
                                 .def rmc = r22
                                 .def rmd = r23
                                 .def rme = r24
                                 .def rmf = r25
                                 ; non-immediate
                                 .def rm0 = r10
                                 .def rm1 = r11
                                 .def rm2 = r12
                                 .def rm3 = r13
                                 .def rm4 = r14
                                 .def rm5 = r15
                                 ; mul registers
                                 .def mulh = r1
                                 .def mull = r0
                                 
                                 ; [SOURCE] stack setup
                                 ; @0 (dirty immediate register)
                                 .macro STACK_SETUP
                                 	ldi @0, HIGH(RAMEND)
                                 	out SPH, @0
                                 	ldi @0, LOW(RAMEND)
                                 	out SPL, @0
                                 .endmacro
                                 
                                 ; define 16 bit register H / L macros
                                 ; @0 (name)
                                 ; @1 (value)
                                 .macro _U_16R_DEF
                                 	.equ @0H = @1H
                                 	.equ @0L = @1L
                                 .endmacro
                                 
                                 ; define ISR for interrupt address '@0'
                                 ; @0 (interrupt vector address)
                                 .macro ISR
                                 	.set ISR_PC = PC
                                 	.org @0
                                 		jmp ISR_PC
                                 	.org ISR_PC
                                 .endmacro
                                 
                                 ; define ISR entry '@1' for interrupt address '@0'
                                 ; @0 (interrupt vector address)
                                 ; @1 (ISR entry label)
                                 .macro ISRJ
                                 	.set ISR_PC = PC
                                 	.org @0
                                 		jmp @1
                                 	.org ISR_PC
                                 .endmacro
                                 
                                 ; timer
                                 
                                 #define _TPSCL_0 0
                                 #define _TPSCL_1 1
                                 #define _TPSCL_2 8
                                 #define _TPSCL_3 64
                                 #define _TPSCL_4 256
                                 #define _TPSCL_5 1024
                                 
                                 #define _TCS_0 0
                                 #define _TCS_1 1
                                 #define _TCS_8 2
                                 #define _TCS_64 3
                                 #define _TCS_256 4
                                 #define _TCS_1024 5
                                 
                                 #define TMS(s) (s / 1000.0)
                                 #define TUS(s) (s / 1000000.0)
                                 #define TNS(s) (s / 1000000000.0)
                                 
                                 #define TTOP(pscl, s) (s * FOSC / pscl)
                                 #define _TPSCL_OK(pscl, m, s) ((s * FOSC) < (pscl * m))
                                 #define _TPSCL_MIN(m, s) (_TPSCL_OK(_TPSCL_1, m, s) ? _TPSCL_1 : (_TPSCL_OK(_TPSCL_2, m, s) ? _TPSCL_2 : (_TPSCL_OK(_TPSCL_3, m, s) ? _TPSCL_3 : (_TPSCL_OK(_TPSCL_4, m, s) ? _TPSCL_4 : (_TPSCL_OK(_TPSCL_5, m, s) ? _TPSCL_5 : -1)))))
                                 #define TPSCL_MIN_8(s) _TPSCL_MIN(255, s)
                                 #define TPSCL_MIN_16(s) _TPSCL_MIN(65535, s)
                                 #define _TCS_MIN(m, s) (_TPSCL_OK(_TPSCL_1, m, s) ? 1 : (_TPSCL_OK(_TPSCL_2, m, s) ? 2 : (_TPSCL_OK(_TPSCL_3, m, s) ? 3 : (_TPSCL_OK(_TPSCL_4, m, s) ? 4 : (_TPSCL_OK(_TPSCL_5, m, s) ? 5 : -1)))))
                                 #define TCS_MIN_8(s) _TCS_MIN(255, s)
                                 #define TCS_MIN_16(s) _TCS_MIN(65535, s)
                                 
                                 #define COMA 6
                                 #define COMA_MSK(x) (x & 0b11)
                                 #define COMA_VAL(x) (COMA_MSK(x) << COMA)
                                 #define COMB 4
                                 #define COMB_MSK(x) (x & 0b11)
                                 #define COMB_VAL(x) (COMB_MSK(x) << COMB)
                                 #define COMC 2
                                 #define COMC_MSK(x) (x & 0b11)
                                 #define COMC_VAL(x) (COMC_MSK(x) << COMC)
                                 #define WGMA 0
                                 #define WGMA_MSK(x) (x & 0b11)
                                 #define WGMA_VAL(x) (WGMA_MSK(x) << WGMA)
                                 #define WGMB 3
                                 #define WGMB_MSK(x) (x >> 2)
                                 #define WGMB_VAL(x) (WGMB_MSK(x) << WGMB)
                                 #define CS 0
                                 #define CS_MSK(x) (x & 0b111)
                                 #define CS_VAL(x) (CS_MSK(x) << CS)
                                 #define ICN 7
                                 #define ICES 6
                                 #define FOCA 7
                                 #define FOCB 6
                                 #define FOCC 5
                                 #define ICIE 5
                                 #define OCIEC 3
                                 #define OCIEB 2
                                 #define OCIEA 1
                                 #define TOIE 0
                                 #define ICF 5
                                 #define OCFC 3
                                 #define OCFB 2
                                 #define OCFA 1
                                 #define TOV 0
                                 #define ICN_VAL (1 << 7)
                                 #define ICES_VAL (1 << 6)
                                 #define FOCA_VAL (1 << 7)
                                 #define FOCB_VAL (1 << 6)
                                 #define FOCC_VAL (1 << 5)
                                 #define ICIE_VAL (1 << 5)
                                 #define OCIEC_VAL (1 << 3)
                                 #define OCIEB_VAL (1 << 2)
                                 #define OCIEA_VAL (1 << 1)
                                 #define TOIE_VAL (1 << 0)
                                 #define ICF_VAL (1 << 5)
                                 #define OCFC_VAL (1 << 3)
                                 #define OCFB_VAL (1 << 2)
                                 #define OCFA_VAL (1 << 1)
                                 #define TOV_VAL (1 << 0)
                                 
                                 ; define timer macros
                                 ; @0 (prefix)
                                 ; @1 (timer index)
                                 .macro TIM_DEF
                                 	.equ TIM_@1_TAKEN = 1
                                 	.if (@1 != 0) && (@1 != 1) && (@1 != 2) && (@1 != 3) && (@1 != 4) && (@1 != 5) 
                                 		.error "Bad timer index"
                                 	.else
                                 		.equ @0_TCCRA = TCCR@1A
                                 		.equ @0_TCCRB = TCCR@1B
                                 		.equ @0_TIMSK = TIMSK@1
                                 		.equ @0_TIFR = TIFR@1
                                 		.equ @0_OCAaddr = OC@1Aaddr
                                 		.equ @0_OCBaddr = OC@1Baddr
                                 		.equ @0_OVFaddr = OVF@1addr
                                 		.if (@1 == 0) || (@1 == 2)
                                 			.equ @0_TCNT = TCNT@1
                                 			.equ @0_OCRA = OCR@1A
                                 			.equ @0_OCRB = OCR@1B
                                 		.else
                                 			.equ @0_TCCRC = TCCR@1C
                                 			.equ @0_OCCaddr = OC@1Caddr
                                 			.equ @0_ICPaddr = ICP@1addr
                                 			_U_16R_DEF @0_ICR, ICR@1
                                 			_U_16R_DEF @0_TCNT, TCNT@1
                                 			_U_16R_DEF @0_OCRA, OCR@1A
                                 			_U_16R_DEF @0_OCRB, OCR@1B
                                 			_U_16R_DEF @0_OCRC, OCR@1C
                                 		.endif
                                 	.endif
                                 .endmacro
                                 
                                 #define T16_PROPF 15625
                                 #define T16_MAX 4.194304
                                 #define T8_PROPF 4000000
                                 #define T8_MAX 0.016384
                                 
                                 #define _t_tl @0
                                 #define _t_th @1
                                 #define _t_cs @2
                                 
                                 #define _t_comp1 64
                                 #define _t_comp2 512
                                 #define _t_comp3 4096
                                 #define _t_comp4 16384
                                 
                                 ; [SOURCE] calculate cs
                                 ; @0 (time * propf l)
                                 ; @1 (time * propf h)
                                 ; @2 (cs out)
                                 .macro T_SRC_SR_CALC
                                 	mov _t_cs, _t_tl
                                 	andi _t_tl, ~LOW(_t_comp1 - 1)
                                 	brne _t_src_cs_2m
                                 	tst _t_th
                                 	breq _t_src_cs_1
                                 _t_src_cs_2m:
                                 	mov _t_tl, _t_cs
                                 	mov _t_cs, _t_th 
                                 	andi _t_th, ~HIGH(_t_comp2 - 1)
                                 	breq _t_src_cs_2
                                 	andi _t_th, ~HIGH(_t_comp3 - 1)
                                 	breq _t_src_cs_3
                                 	andi _t_th, ~HIGH(_t_comp4 - 1)
                                 	breq _t_src_cs_4
                                 _t_src_cs_5:
                                 	mov _t_th, _t_cs
                                 	ldi _t_cs, 5
                                 	ret
                                 _t_src_cs_1:
                                 	tst _t_tl
                                 	breq _t_src_cs_0
                                 	mov _t_th, _t_cs
                                 	lsl _t_th
                                 	lsl _t_th
                                 	ldi _t_cs, 1
                                 	ret
                                 _t_src_cs_2:
                                 	bst _t_cs, 0
                                 	bld _t_th, 7
                                 	clr _t_cs
                                 	lsr _t_tl
                                 	ror _t_cs
                                 	or _t_th, _t_tl
                                 	mov _t_tl, _t_cs
                                 	ldi _t_cs, 2
                                 	ret
                                 _t_src_cs_3:
                                 	swap _t_tl 
                                 	mov _t_th, _t_tl
                                 	andi _t_th, 0b00001111
                                 	andi _t_tl, 0b11110000
                                 	swap _t_cs
                                 	andi _t_cs, 0b11110000
                                 	or _t_th, _t_cs
                                 	ldi _t_cs, 3
                                 	ret
                                 _t_src_cs_4:
                                 	mov _t_th, _t_cs
                                 	lsl _t_tl
                                 	rol _t_th
                                 	lsl _t_tl
                                 	rol _t_th
                                 	ldi _t_cs, 4
                                 	ret
                                 _t_src_cs_0:
                                 	clr _t_cs
                                 	ret
                                 .endmacro
                                 
                                 #undef _t_comp1
                                 #undef _t_comp2
                                 #undef _t_comp3
                                 #undef _t_comp4
                                 
                                 #undef _t_tl
                                 #undef _t_th
                                 #undef _t_cs
                                 
                                 ; IO
                                 
                                 ; define IO macros
                                 ; @0 (prefix)
                                 ; @1 (IO letter)
                                 .macro IO_DEF
                                 	.equ IO_@1_TAKEN = 1
                                 	.equ @0_PIN = PIN@1
                                 	.equ @0_PORT = PORT@1
                                 	.equ @0_DDR = DDR@1
                                 .endmacro
                                 
                                 #endif
                                 #include "eeprom_prog.asm"
                                 
                                 #else
                                 #define _INC_EP
                                 
                                 ; Francesco Zoccheddu
                                 ; ARE
                                 ; EEPROM programming
                                 ; dirty EEPROM module and registers
                                 
                                 #define _ep_r_addrl @0
                                 #define _ep_r_addrh @1
                                 
                                 ; [SOURCE] set EEPROM address to '@1:@0'
                                 ; @0 (eeprom address l)
                                 ; @1 (eeprom address h)
                                 .macro EP_SRC_ADDR
                                 	out EEARL, _ep_r_addrl
                                 	out EEARH, _ep_r_addrh
                                 .endmacro
                                 
                                 ; [SOURCE] wait until EEPROM is ready
                                 .macro EP_SRC_WAIT
                                 _ep_l_src_wait:
                                 	sbic EECR, EEPE
                                 	rjmp _ep_l_src_wait
                                 .endmacro
                                 
                                 #define _ep_r_data @0
                                 
                                 ; [SOURCE] immediately write '@2' to EEPROM
                                 ; @0 (data)
                                 .macro EP_SRC_FWRITE
                                 	out EEDR, _ep_r_data
                                 	sbi EECR, EEMPE
                                 	sbi EECR, EEPE
                                 .endmacro
                                 
                                 ; [SOURCE] immediately read to '@2' register from EEPROM
                                 ; @0 (data out)
                                 .macro EP_SRC_FREAD
                                 	sbi EECR, EERE
                                 	in _ep_r_data, EEDR
                                 .endmacro
                                 
                                 #undef _ep_r_data
                                 
                                 #endif
                                 #include "builtin_led.asm"
                                 
                                 #else
                                 #define _INC_BL
                                 
                                 ; Francesco Zoccheddu
                                 ; ARE
                                 ; builtin LED
                                 ; dirty PORTB, DDRB, PINB
                                 
                                 #define _BL_IO B
                                 
                                 IO_DEF _BL, _BL_IO
                                 #define _BL_BIT 7
                                 
                                 #define _bl_r_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_SETUP
                                 	; set data direction register to output for LED pin
                                 	ldi _bl_r_tmp, 1 << _BL_BIT
                                 	out _BL_DDR, _bl_r_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] turn builtin LED on
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_ON
                                 	ser _bl_r_tmp
                                 	out _BL_PORT, _bl_r_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] turn builtin LED off
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_OFF
                                 	clr _bl_r_tmp
                                 	out _BL_PORT, _bl_r_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] toggle builtin LED state
                                 ; @0 (dirty immediate register)
                                 .macro BL_SRC_TOGGLE
                                 	ser _bl_r_tmp
                                 	out _BL_PIN, _bl_r_tmp
                                 .endmacro
                                 
                                 ; [SOURCE] set builtin LED state (dirty all port pins)
                                 ; @0 (state on bit 7)
                                 .macro BL_SRC_OUT
                                 	out _BL_PORT, _bl_r_tmp
                                 .endmacro
                                 
                                 #undef _bl_r_tmp
                                 
                                 #endif
                                 #include "serial_prog.asm"
                                 
                                 #else
                                 #define _INC_SP
                                 
                                 ; Francesco Zoccheddu
                                 ; ARE
                                 ; serial programming
                                 ; dirty UART RX complete interrupt
                                 
                                 #define _SP_UC_BAUDRATE 9600
                                 
                                 #define _SP_UC_UCSRA_VAL 0
                                 #define _SP_UC_UCSRB_VAL (1 << RXCIE0) | (1 << RXEN0) | (1 << TXEN0)
                                 #define _SP_UC_UCSRC_VAL (2 << UMSEL0) | (3 << UCSZ00)
                                 #define _SP_UC_UDRE_VAL (1 << UDRIE0)
                                 #define _SP_UC_UBRR FOSC / 16 / _SP_UC_BAUDRATE - 1
                                 
                                 #define _SP_UC_RCOMPLETE_INTaddr URXC0addr
                                 
                                 #define _sp_r_setup_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro SP_SRC_SETUP
                                 	; set UBRRR
                                 	ldi _sp_r_setup_tmp, HIGH( _SP_UC_UBRR )
                                 	sts UBRR0H, _sp_r_setup_tmp
                                 	ldi _sp_r_setup_tmp, LOW( _SP_UC_UBRR )
                                 	sts UBRR0L, _sp_r_setup_tmp
                                 	; set UCSRA
                                 	ldi _sp_r_setup_tmp, _SP_UC_UCSRA_VAL
                                 	sts UCSR0A, _sp_r_setup_tmp
                                 	; set UCSRB
                                 	ldi _sp_r_setup_tmp, _SP_UC_UCSRB_VAL
                                 	sts UCSR0B, _sp_r_setup_tmp
                                 	; set UCSRC
                                 	ldi _sp_r_setup_tmp, _SP_UC_UCSRC_VAL
                                 	sts UCSR0C, _sp_r_setup_tmp
                                 .endmacro
                                 
                                 #undef _sp_r_setup_tmp
                                 
                                 #define _SP_OPCODE_RW 7
                                 
                                 #define _sp_r_rc_tmp ria
                                 
000032 940c 0072                 ISR _SP_UC_RCOMPLETE_INTaddr
000072 2700
000073 b905                      	BL_SRC_OFF _sp_r_rc_tmp
                                 	; wait for eeprom
                                 _sp_l_rc_wait:
000074 99f9                      	sbic EECR, EEPE
000075 cffe                      	rjmp _sp_l_rc_wait
                                 	; store bit 1 in 'b1'
                                 _sp_l_rc_r1:
000076 9100 00c0                 	lds _sp_r_rc_tmp, UCSR0A
000078 ff07                      	sbrs _sp_r_rc_tmp, RXC0
000079 cffc                      	rjmp _sp_l_rc_r1
00007a 9100 00c6                 	lds _sp_r_rc_tmp, UDR0
00007c bd01                      	out EEARL, _sp_r_rc_tmp
                                 	; store bit 2 in 'b2'
                                 _sp_l_rc_r2:
00007d 9100 00c0                 	lds _sp_r_rc_tmp, UCSR0A
00007f ff07                      	sbrs _sp_r_rc_tmp, RXC0
000080 cffc                      	rjmp _sp_l_rc_r2
000081 9100 00c6                 	lds _sp_r_rc_tmp, UDR0
000083 bd02                      	out EEARH, _sp_r_rc_tmp
                                 	; eventually store bit 3 in 'data'
000084 fd07                      	sbrc _sp_r_rc_tmp, _SP_OPCODE_RW
000085 c009                      	rjmp _sp_l_isr_write
                                 _sp_l_rc_read:
000086 9100 00c0                 	lds _sp_r_rc_tmp, UCSR0A
000088 ff05                      	sbrs _sp_r_rc_tmp, UDRE0
000089 cffc                      	rjmp _sp_l_rc_read
00008a 9af8                      	sbi EECR, EERE
00008b b500                      	in _sp_r_rc_tmp, EEDR
00008c 9300 00c6                 	sts UDR0, _sp_r_rc_tmp
00008e 9518                      	reti
                                 _sp_l_isr_write:
00008f 9100 00c0                 	lds _sp_r_rc_tmp, UCSR0A
000091 ff07                      	sbrs _sp_r_rc_tmp, RXC0
000092 cffc                      	rjmp _sp_l_isr_write
000093 9100 00c6                 	lds _sp_r_rc_tmp, UDR0
000095 bd00                      	out EEDR, _sp_r_rc_tmp
000096 9afa                      	sbi EECR, EEMPE
000097 9af9                      	sbi EECR, EEPE
000098 9518                      	reti
                                 
                                 #undef _sp_r_rc_tmp
                                 
                                 #define sp_data ria
                                 #define sp_data_tl rib
                                 #define sp_data_th ric
                                 #define sp_size rid
                                 
                                 .macro SP_SRC_LOAD
                                 	ldi YL, LOW( @0 )
                                 	ldi YH, HIGH( @0 )
                                 	rcall sp_sr_load
                                 .endmacro
                                 
                                 .macro SP_SRC_LOAD_TIME
                                 	rcall sp_sr_load
                                 	mov sp_data_tl, sp_data
                                 	adiw YH:YL, 1
                                 	rcall sp_sr_load
                                 	mov sp_data_th, sp_data
                                 	rcall _sp_t_sr_calc
                                 .endmacro
                                 
                                 .macro SP_SRC_LOADI_TIME
                                 	ldi YL, LOW( @0 )
                                 	ldi YH, HIGH( @0 )
                                 	SP_SRC_LOAD_TIME
                                 .endmacro
                                 
                                 .macro SP_SRC_LOAD_TO_RAM
                                 	ldi YL, LOW( @0 )
                                 	ldi YH, HIGH( @0 )
                                 	ldi XL, LOW( @1 )
                                 	ldi XH, HIGH( @1 )
                                 	ldi sp_size, @2
                                 	rcall sp_sr_load_to_ram
                                 .endmacro
                                 
                                 .macro SP_SRC_STORE
                                 	ldi YL, LOW( @0 )
                                 	ldi YH, HIGH( @0 )
                                 	rcall sp_sr_store
                                 .endmacro
                                 
                                 sp_sr_load:
000099 99f9                      	sbic EECR, EEPE
00009a cffe                      	rjmp sp_sr_load
00009b bdc1                      	out EEARL, YL
00009c bdd2                      	out EEARH, YH
00009d 9af8                      	sbi EECR, EERE
00009e b500                      	in sp_data, EEDR
00009f 9508                      	ret
                                 
                                 _sp_load_to_ram_inc:
0000a0 9621                      	adiw YH:YL, 1
                                 sp_sr_load_to_ram:
0000a1 dff7                      	rcall sp_sr_load
0000a2 930d                      	st X+, sp_data
0000a3 953a                      	dec sp_size
0000a4 f7d9                      	brne _sp_load_to_ram_inc
0000a5 9508                      	ret
                                 
                                 sp_sr_store:
0000a6 99f9                      	sbic EECR, EEPE
0000a7 cffe                      	rjmp sp_sr_store
0000a8 bdc1                      	out EEARL, YL
0000a9 bdd2                      	out EEARH, YH
0000aa bd00                      	out EEDR, sp_data
0000ab 9afa                      	sbi EECR, EEMPE
0000ac 9af9                      	sbi EECR, EEPE
0000ad 9508                      	ret
                                 
                                 _sp_t_sr_calc:
0000ae 2f01
0000af 7c10
0000b0 f411
0000b1 2322
0000b2 f059
0000b3 2f10
0000b4 2f02
0000b5 7f2e
0000b6 f071
0000b7 7f20
0000b8 f0a9
0000b9 7c20
0000ba f0e1
0000bb 2f20
0000bc e005
0000bd 9508
0000be 2311
0000bf f0f1
0000c0 2f20
0000c1 0f22
0000c2 0f22
0000c3 e001
0000c4 9508
0000c5 fb00
0000c6 f927
0000c7 2700
0000c8 9516
0000c9 9507
0000ca 2b21
0000cb 2f10
0000cc e002
0000cd 9508
0000ce 9512
0000cf 2f21
0000d0 702f
0000d1 7f10
0000d2 9502
0000d3 7f00
0000d4 2b20
0000d5 e003
0000d6 9508
0000d7 2f20
0000d8 0f11
0000d9 1f22
0000da 0f11
0000db 1f22
0000dc e004
0000dd 9508
0000de 2700
0000df 9508                      	T_SRC_SR_CALC sp_data_tl, sp_data_th, sp_data
                                 
                                 #endif
                                 #include "buzzer.asm"
                                 
                                 #else
                                 #define _INC_BZ
                                 
                                 #define _BZ_PWM_TIMER 0
                                 #define _BZ_SQ_TIMER 1
                                 #define _BZ_IO G
                                 
                                 IO_DEF _BZ, _BZ_IO
                                 TIM_DEF _BZ_PWM, _BZ_PWM_TIMER
                                 TIM_DEF _BZ_SQ, _BZ_SQ_TIMER
                                 
                                 #define BZ_TICKS 10
                                 #define BZ_SND_BYTES BZ_TICKS*5
                                 #define _BZ_IO_BIT 5
                                 
                                 .dseg
000200                           _bz_ram_ticks: .byte 2
                                 .cseg
                                 
                                 #define _BZ_WGM 2
                                 #define _BZ_COMA 0
                                 #define _BZ_COMB 1
                                 
                                 #define _bz_setup_tmp @0
                                 
                                 .macro BZ_SRC_SETUP
                                 	; set data direction register to output
                                 	clr _bz_setup_tmp
                                 	out _BZ_DDR, _bz_setup_tmp
                                 	; setup PWM timer 
                                 	ldi _bz_setup_tmp, WGMA_VAL(2) | COMB_VAL(1)
                                 	out _BZ_PWM_TCCRA, _bz_setup_tmp
                                 	clr _bz_setup_tmp
                                 	out _BZ_PWM_TCCRB, _bz_setup_tmp
                                 	; setup SQ timer
                                 	clr _bz_setup_tmp
                                 	sts _BZ_SQ_TCCRA, _bz_setup_tmp
                                 	sts _BZ_SQ_TCCRB, _bz_setup_tmp
                                 	sts _BZ_SQ_TCCRC, _bz_setup_tmp
                                 	; set timer interrupt mask
                                 	ldi _bz_setup_tmp, OCIEA_VAL
                                 	sts _BZ_SQ_TIMSK, _bz_setup_tmp
                                 .endmacro
                                 
                                 #undef _bz_setup_tmp
                                 
                                 #define bz_cs @0
                                 #define bz_top @1
                                 
                                 #undef bz_cs
                                 #undef bz_top
                                 
                                 #define _bz_start_ram @0
                                 
                                 .macro BZ_SRC_START
                                 	cli
                                 	ldi ZH, HIGH( _bz_start_ram )
                                 	ldi ZL, LOW( _bz_start_ram )
                                 	call _bz_isr_start
                                 .endmacro
                                 
                                 #undef _bz_start_ram
                                 
                                 #define _bz_load_ee @0
                                 #define _bz_load_ram @1
                                 #define _bz_r_load_tmp @2
                                 
                                 .macro BZ_SRC_LOAD
                                 	ldi _bz_r_load_tmp, BZ_TICKS
                                 	ldi YL, LOW( _bz_load_ee )
                                 	ldi YH, HIGH( _bz_load_ee )
                                 	ldi XL, LOW( _bz_load_ram )
                                 	ldi XH, HIGH( _bz_load_ram )
                                 _bz_load_loop:
                                 	SP_SRC_LOAD_TIME
                                 	adiw YH:YL, 1
                                 	st X+, sp_data
                                 	st X+, sp_data_th
                                 	SP_SRC_LOAD_TIME
                                 	adiw YH:YL, 1
                                 	st X+, sp_data
                                 	st X+, sp_data_th
                                 	st X+, sp_data_tl
                                 	dec _bz_r_load_tmp
                                 	brne _bz_load_loop
                                 .endmacro
                                 
                                 #undef _bz_r_load_tmp1
                                 #undef _bz_r_load_tmp2
                                 #undef _bz_r_load_tmp3
                                 #undef _bz_r_load_tmp4
                                 #undef _bz_r_load_tmp5
                                 #undef _bz_load_ee
                                 
                                 #define _bz_r_sqocia_tmp ria
                                 
000022 940c 00e0                 ISR _BZ_SQ_OCAaddr
                                 	; increment tick and set Z pointer
0000e0 91e0 0200                 	lds ZL, _bz_ram_ticks
0000e2 91f0 0201                 	lds ZH, _bz_ram_ticks + 1
                                 _bz_isr_start:
                                 	; set PWM
0000e4 9101                      	ld _bz_r_sqocia_tmp, Z+
0000e5 bd05                      	out _BZ_PWM_TCCRB, _bz_r_sqocia_tmp
0000e6 2300                      	tst _bz_r_sqocia_tmp
0000e7 f009                      	breq _bz_isr_start_mute
0000e8 e200                      	ldi _bz_r_sqocia_tmp, 1 << _BZ_IO_BIT
                                 _bz_isr_start_mute:
0000e9 bb03                      	out _BZ_DDR, _bz_r_sqocia_tmp
0000ea 9101                      	ld _bz_r_sqocia_tmp, Z+
0000eb bd07                      	out _BZ_PWM_OCRA, _bz_r_sqocia_tmp
                                 	; set SQ
0000ec 2700                      	clr _bz_r_sqocia_tmp
0000ed 9300 0081                 	sts _BZ_SQ_TCCRB, _bz_r_sqocia_tmp
0000ef 9300 0085                 	sts _BZ_SQ_TCNTH, _bz_r_sqocia_tmp
0000f1 9300 0084                 	sts _BZ_SQ_TCNTL, _bz_r_sqocia_tmp
0000f3 9101                      	ld _bz_r_sqocia_tmp, Z+
0000f4 9300 0081                 	sts _BZ_SQ_TCCRB, _bz_r_sqocia_tmp
0000f6 9101                      	ld _bz_r_sqocia_tmp, Z+
0000f7 9300 0089                 	sts _BZ_SQ_OCRAH, _bz_r_sqocia_tmp
0000f9 9101                      	ld _bz_r_sqocia_tmp, Z+
0000fa 9300 0088                 	sts _BZ_SQ_OCRAL, _bz_r_sqocia_tmp
                                 	; store pointer
0000fc 93e0 0200                 	sts _bz_ram_ticks, ZL
0000fe 93f0 0201                 	sts _bz_ram_ticks + 1, ZH
000100 9518                      	reti
                                 
                                 #undef _bz_r_sqocia_tmp
                                 
                                 #endif
                                 #include "led_matrix.asm"
                                 
                                 #else
                                 #define _INC_LM
                                 
                                 ; Francesco Zoccheddu
                                 ; ARE
                                 ; LED matrix
                                 ; dirty PORTC, DDRC, PINC
                                 
                                 #define _LM_IO C
                                 
                                 IO_DEF _LM, _LM_IO
                                 #define _LM_BIT_ABCD 0 ; digital pin 34-37
                                 #define _LM_BIT_G 4 ; digital pin 33
                                 #define _LM_BIT_DI 5 ; digital pin 32
                                 #define _LM_BIT_CLK 6 ; digital pin 31
                                 #define _LM_BIT_LAT 7 ; digital pin 30
                                 
                                 #define _lm_r_setup_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro LM_SRC_SETUP
                                 	ser _lm_r_setup_tmp
                                 	out _LM_DDR, _lm_r_setup_tmp
                                 .endmacro
                                 
                                 #undef _lm_r_setup_tmp
                                 
                                 #define _lm_r_col @0
                                 #define _lm_r_cl @1
                                 #define _lm_r_ch @2
                                 #define _lm_r_tmp1 @3
                                 #define _lm_r_tmp2 @4
                                 
                                 .macro LM_SRC_SENDCOL
                                 	ldi _lm_r_tmp1, 16
                                 _lm_l_src_send_col_row:
                                 	ldi _lm_r_tmp2, (1 << _LM_BIT_G) | (1 << _LM_BIT_DI)
                                 	lsr _lm_r_ch
                                 	ror _lm_r_cl
                                 	brcc _lm_l_src_send_col_out_dot
                                 	ldi _lm_r_tmp2, (1 << _LM_BIT_G)
                                 _lm_l_src_send_col_out_dot:
                                 	out _LM_PORT, _lm_r_tmp2
                                 	ori _lm_r_tmp2, 1 << _LM_BIT_CLK
                                 	out _LM_PORT, _lm_r_tmp2
                                 	andi _lm_r_tmp2, ~(1 << _LM_BIT_CLK)
                                 	out _LM_PORT, _lm_r_tmp2
                                 	;loop
                                 	dec _lm_r_tmp1
                                 	brne _lm_l_src_send_col_row
                                 	;send LAT
                                 	ldi _lm_r_tmp2, (1 << _LM_BIT_G) | (1 << _LM_BIT_LAT)
                                 	out _LM_PORT, _lm_r_tmp2
                                 	ldi _lm_r_tmp2, (1 << _LM_BIT_G)
                                 	out _LM_PORT, _lm_r_tmp2
                                 	;send col
                                 	ldi _lm_r_tmp1, 15
                                 	sub _lm_r_tmp1, _lm_r_col
                                 	or _lm_r_tmp2, _lm_r_tmp1
                                 	out _LM_PORT, _lm_r_tmp2
                                 	;end G
                                 	out _LM_PORT, _lm_r_tmp1
                                 .endmacro
                                 
                                 #undef _lm_r_cl
                                 #undef _lm_r_ch
                                 #undef _lm_r_col
                                 #undef _lm_r_tmp1
                                 #undef _lm_r_tmp2
                                 
                                 #endif
                                 #include "main_loop.asm"
                                 
                                 #else
                                 #define _INC_ML
                                 
                                 ; Francesco Zoccheddu
                                 ; ARE
                                 ; EEPROM programming
                                 ; dirty timer 0 and registers
                                 
                                 
                                 #define _ML_TIMER 2
                                 
                                 TIM_DEF _ML, _ML_TIMER
                                 
                                 #define ML_SCREEN_PAUSE 2
                                 #define ML_SCREEN_SCORE 1
                                 #define ML_SCREEN_GAME 0
                                 
                                 #define _ml_setup_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro ML_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _ml_setup_tmp
                                 	sts _ML_TCCRA, _ml_setup_tmp
                                 	sts _ML_TCCRB, _ml_setup_tmp
                                 	; set timer interrupt mask
                                 	ldi _ml_setup_tmp, OCIEA_VAL
                                 	sts _ML_TIMSK, _ml_setup_tmp
                                 	; setup pause
                                 	clr _ml_setup_tmp
                                 	sts _ml_ram_pprog, _ml_setup_tmp
                                 	ldi _ml_setup_tmp, ML_SCREEN_PAUSE
                                 	sts ml_ram_screen, _ml_setup_tmp
                                 	; load
                                 	SP_SRC_LOAD_TO_RAM ee_ml_dsoff_add, _ml_ram_pabsnc_add, 1
                                 	SP_SRC_LOAD_TO_RAM ee_ml_dson_sub, _ml_ram_pprsnc_sub, 1
                                 
                                 	SP_SRC_LOADI_TIME ee_ml_tim_propf
                                 	sts _ML_OCRA, sp_data_th
                                 	sts _ml_ram_tcs, sp_data
                                 	; submodules
                                 	P_SRC_SETUP _ml_setup_tmp
                                 	G_SRC_SETUP _ml_setup_tmp, rmc
                                 	S_SRC_SETUP _ml_setup_tmp
                                 .endmacro
                                 
                                 #undef _ml_setup_tmp
                                 
                                 
                                 .dseg
000202                           _ml_ram_tcs: .byte 1
000203                           ml_ram_screen: .byte 1
000204                           _ml_ram_pprog: .byte 1
000205                           _ml_ram_pabsnc_add: .byte 1
000206                           _ml_ram_pprsnc_sub: .byte 1
                                 .cseg
                                 
                                 .eseg
000000 40 1f                     ee_ml_tim_propf: .dw int( 0.002 * T8_PROPF + 0.5 )
000002 04                        ee_ml_dsoff_add: .db 4
000003 10                        ee_ml_dson_sub: .db 16
                                 .cseg
                                 
                                 
                                 #define ml_col rmd
                                 #define ml_cl rme
                                 #define ml_ch rmf
                                 #define ml_tmp1 rma
                                 #define ml_tmp2 rmb
                                 #define ml_tmp3 rmc
                                 #define ml_tmp4 rm0
                                 
                                 #include "score.asm"
                                 
                                 #else
                                 #define _INC_S
                                 
                                 #define _S_TIMER 5
                                 
                                 TIM_DEF _S, _S_TIMER
                                 
                                 #define _S_STATE_SCR 0
                                 #define _S_STATE_TOP 1
                                 #define _S_STATE_SPLASH 2
                                 
                                 #define _s_r_setup_tmp @0
                                 
                                 .macro S_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _s_r_setup_tmp
                                 	sts _S_TCCRA, _s_r_setup_tmp
                                 	sts _S_TCCRB, _s_r_setup_tmp
                                 	sts _S_TCCRC, _s_r_setup_tmp
                                 	; set timer interrupt mask
                                 	ldi _s_r_setup_tmp, OCIEA_VAL
                                 	sts _S_TIMSK, _s_r_setup_tmp
                                 	; set state
                                 	ldi _s_r_setup_tmp, _S_STATE_SPLASH
                                 	sts _s_ram_state, _s_r_setup_tmp
                                 	; load bitmaps
                                 	SP_SRC_LOAD_TO_RAM ee_s_bm_splash, _s_ram_bm_splash, 2*16
                                 	SP_SRC_LOAD_TO_RAM ee_s_bm_scr, _s_ram_bm_scr, 16
                                 	SP_SRC_LOAD_TO_RAM ee_s_bm_top, _s_ram_bm_top, 16
                                 	SP_SRC_LOAD_TO_RAM ee_s_bm_digits, _s_ram_bm_digits, 12*4
                                 
                                 	SP_SRC_LOADI_TIME ee_s_tim_splash
                                 	sts _s_ram_ttop_splash, sp_data_tl
                                 	sts _s_ram_ttop_splash + 1, sp_data_th
                                 	sts _s_ram_tccrb_splash, sp_data
                                 
                                 	SP_SRC_LOADI_TIME ee_s_tim_scr
                                 	sts _s_ram_ttop_scr, sp_data_tl
                                 	sts _s_ram_ttop_scr + 1, sp_data_th
                                 	sts _s_ram_tccrb_scr, sp_data
                                 
                                 	SP_SRC_LOADI_TIME ee_s_tim_top
                                 	sts _s_ram_ttop_top, sp_data_tl
                                 	sts _s_ram_ttop_top + 1, sp_data_th
                                 	sts _s_ram_tccrb_top, sp_data
                                 .endmacro
                                 
                                 #undef _s_r_setup_tmp
                                 
                                 .eseg
000004 09 3d                     ee_s_tim_splash: .dw int( 1 * T16_PROPF + 0.5)
000006 12 7a                     ee_s_tim_scr: .dw int( 2 * T16_PROPF + 0.5)
000008 8e 5b                     ee_s_tim_top: .dw int( 1.5 * T16_PROPF + 0.5)
00000a 0e 00                     ee_s_top: .dw 14
                                 .cseg
                                 
                                 .dseg
000207                           _s_ram_state: .byte 1
000208                           _s_ram_tccrb_splash: .byte 1
000209                           _s_ram_ttop_splash: .byte 2
00020b                           _s_ram_tccrb_scr: .byte 1
00020c                           _s_ram_ttop_scr: .byte 2
00020e                           _s_ram_tccrb_top: .byte 1
00020f                           _s_ram_ttop_top: .byte 2
000211                           _s_ram_bcd_top: .byte 4
000215                           _s_ram_bcd_scr: .byte 4
000219                           _s_ram_bm_splash: .byte 2*16
000239                           _s_ram_bm_top: .byte 16
000249                           _s_ram_bm_scr: .byte 16
000259                           _s_ram_bm_digits: .byte 12*4
                                 .cseg
                                 
                                 #define _s_r_draw_tmp1 @0
                                 #define _s_r_draw_tmp2 @1
                                 
                                 .macro S_SRC_DRAW
                                 	lds _s_r_draw_tmp1, _s_ram_state
                                 	cpi _s_r_draw_tmp1, _S_STATE_SCR
                                 	breq _s_l_draw_scr
                                 	cpi _s_r_draw_tmp1, _S_STATE_SPLASH
                                 	breq _s_l_draw_splash
                                 	ldi XL, LOW( _s_ram_bm_top )
                                 	ldi XH, HIGH( _s_ram_bm_top )
                                 	ldi YL, LOW( _s_ram_bcd_top )
                                 	ldi YH, HIGH( _s_ram_bcd_top )
                                 	rjmp _s_l_draw_text
                                 _s_l_draw_scr:
                                 	ldi XL, LOW( _s_ram_bm_scr )
                                 	ldi XH, HIGH( _s_ram_bm_scr )
                                 	ldi YL, LOW( _s_ram_bcd_scr )
                                 	ldi YH, HIGH( _s_ram_bcd_scr )
                                 _s_l_draw_text:
                                 	clr _s_r_draw_tmp1
                                 	add XL, ml_col
                                 	adc XH, _s_r_draw_tmp1
                                 	ld ml_ch, X
                                 	; draw score
                                 	mov _s_r_draw_tmp1, ml_col
                                 	lsr _s_r_draw_tmp1
                                 	lsr _s_r_draw_tmp1
                                 	add YL, _s_r_draw_tmp1
                                 	clr _s_r_draw_tmp1
                                 	adc YH, _s_r_draw_tmp1
                                 	ld _s_r_draw_tmp1, Y
                                 	lsl _s_r_draw_tmp1
                                 	lsl _s_r_draw_tmp1
                                 	mov _s_r_draw_tmp2, ml_col
                                 	andi _s_r_draw_tmp2, 0b11
                                 	add _s_r_draw_tmp1, _s_r_draw_tmp2
                                 	ldi YL, LOW( _s_ram_bm_digits )
                                 	ldi YH, HIGH( _s_ram_bm_digits )
                                 	add YL, _s_r_draw_tmp1
                                 	clr _s_r_draw_tmp1
                                 	adc YH, _s_r_draw_tmp1
                                 	ld ml_cl, Y
                                 	rjmp _s_l_draw_done
                                 _s_l_draw_splash:
                                 	ldi XL, LOW( _s_ram_bm_splash )
                                 	ldi XH, HIGH( _s_ram_bm_splash )
                                 	mov _s_r_draw_tmp1, ml_col
                                 	lsl _s_r_draw_tmp1
                                 	add XL, _s_r_draw_tmp1
                                 	clr _s_r_draw_tmp1
                                 	adc XH, _s_r_draw_tmp1
                                 	ld ml_ch, X+
                                 	ld ml_cl, X
                                 _s_l_draw_done:
                                 .endmacro
                                 
                                 #undef _s_r_draw_tmp1
                                 #undef _s_r_draw_tmp2
                                 
                                 #define _s_r_set_tmp1 @0
                                 #define _s_r_set_tmp2 @1
                                 #define _s_r_set_tmp3 @2
                                 #define _s_r_set_tmp4 @3
                                 
                                 .macro S_SRC_SET
                                 	rjmp _s_l_set
                                 
                                 #define _s_rr_set_bcd_l ml_tmp1
                                 #define _s_rr_set_bcd_h ml_tmp2
                                 #define _s_rr_set_bcd_z ml_tmp3
                                 #define _s_rr_set_bcd_c ml_ch
                                 
                                 _s_sr_tobcd:
                                 	ldi _s_rr_set_bcd_z, HIGH(1000)
                                 	cpi _s_rr_set_bcd_l, LOW(1000)
                                 	cpc _s_rr_set_bcd_h, _s_rr_set_bcd_z
                                 	brsh _s_l_sr_to_s_rr_set_bcd_overflow
                                 	ldi _s_rr_set_bcd_z, 11
                                 	std Y+1, _s_rr_set_bcd_z
                                 	std Y+2, _s_rr_set_bcd_z
                                 	std Y+3, _s_rr_set_bcd_z
                                 _s_l_sr_to_s_rr_set_bcd_th_begin:
                                 	ldi _s_rr_set_bcd_c, 0
                                 	clr _s_rr_set_bcd_z
                                 _s_l_sr_to_s_rr_set_bcd_th_loop:
                                 	cpi _s_rr_set_bcd_l, 100
                                 	cpc _s_rr_set_bcd_h, _s_rr_set_bcd_z
                                 	brlo _s_l_sr_to_s_rr_set_bcd_th_done
                                 	inc _s_rr_set_bcd_c
                                 	subi _s_rr_set_bcd_l, 100
                                 	sbc _s_rr_set_bcd_h, _s_rr_set_bcd_z
                                 	rjmp _s_l_sr_to_s_rr_set_bcd_th_loop
                                 _s_l_sr_to_s_rr_set_bcd_th_done:
                                 	tst _s_rr_set_bcd_c
                                 	breq _s_l_sr_to_s_rr_set_bcd_nd_loop
                                 	st Y+, _s_rr_set_bcd_c
                                 	ldi _s_rr_set_bcd_c, 1 << 7
                                 _s_l_sr_to_s_rr_set_bcd_nd_loop:
                                 	cpi _s_rr_set_bcd_l, 10
                                 	brlo _s_l_sr_to_s_rr_set_bcd_nd_done
                                 	inc _s_rr_set_bcd_c
                                 	subi _s_rr_set_bcd_l, 10
                                 	rjmp _s_l_sr_to_s_rr_set_bcd_nd_loop
                                 _s_l_sr_to_s_rr_set_bcd_nd_done:
                                 	tst _s_rr_set_bcd_c
                                 	breq _s_l_sr_to_s_rr_set_bcd_rd
                                 	andi _s_rr_set_bcd_c, ~(1 << 7)
                                 	st Y+, _s_rr_set_bcd_c
                                 _s_l_sr_to_s_rr_set_bcd_rd:
                                 	st Y+, _s_rr_set_bcd_l
                                 	ret
                                 _s_l_sr_to_s_rr_set_bcd_overflow:
                                 	ldi _s_rr_set_bcd_z, 9
                                 	st Y+, _s_rr_set_bcd_z
                                 	st Y+, _s_rr_set_bcd_z
                                 	st Y+, _s_rr_set_bcd_z
                                 	ldi _s_rr_set_bcd_z, 10
                                 	st Y, _s_rr_set_bcd_z
                                 	ret
                                 
                                 #undef _s_rr_set_bcd_l
                                 #undef _s_rr_set_bcd_h
                                 #undef _s_rr_set_bcd_z
                                 #undef _s_rr_set_bcd_c
                                 
                                 _s_l_set:
                                 	; set state
                                 	ldi _s_r_set_tmp1, _S_STATE_SPLASH
                                 	sts _s_ram_state, _s_r_set_tmp1
                                 	; set timer
                                 	lds _s_r_set_tmp1, _s_ram_ttop_splash
                                 	lds _s_r_set_tmp2, _s_ram_ttop_splash + 1
                                 	sts _S_OCRAH, _s_r_set_tmp2
                                 	sts _S_OCRAL, _s_r_set_tmp1
                                 	lds _s_r_set_tmp1, _s_ram_tccrb_splash
                                 	sts _S_TCCRB, _s_r_set_tmp1
                                 	; save score
                                 	SP_SRC_LOAD ee_s_top
                                 	mov _s_r_set_tmp1, sp_data
                                 	SP_SRC_LOAD ee_s_top + 1
                                 	mov _s_r_set_tmp2, sp_data
                                 	lds _s_r_set_tmp3, g_ram_score
                                 	lds _s_r_set_tmp4, g_ram_score + 1
                                 	cp _s_r_set_tmp1, _s_r_set_tmp3
                                 	cpc _s_r_set_tmp2, _s_r_set_tmp4
                                 	brsh _s_l_set_stored
                                 	mov sp_data, _s_r_set_tmp3
                                 	SP_SRC_STORE ee_s_top
                                 	mov sp_data, _s_r_set_tmp4
                                 	SP_SRC_STORE ee_s_top + 1
                                 	movw _s_r_set_tmp2:_s_r_set_tmp1, _s_r_set_tmp4:_s_r_set_tmp3
                                 _s_l_set_stored:
                                 	; load score
                                 	ldi YL, LOW(_s_ram_bcd_top)
                                 	ldi YH, HIGH(_s_ram_bcd_top)
                                 	rcall _s_sr_tobcd
                                 	ldi YL, LOW(_s_ram_bcd_scr)
                                 	ldi YH, HIGH(_s_ram_bcd_scr)
                                 	lds _s_r_set_tmp1, g_ram_score
                                 	lds _s_r_set_tmp2, g_ram_score + 1
                                 	rcall _s_sr_tobcd
                                 .endmacro
                                 
                                 #undef _s_r_set_tmp1
                                 #undef _s_r_set_tmp2
                                 #undef _s_r_set_tmp3
                                 #undef _s_r_set_tmp4
                                 
                                 #define _s_r_ocia_tmp1 ria
                                 #define _s_r_ocia_tmp2 rib
                                 #define _s_r_ocia_tmp3 ric
                                 #define _s_r_ocia_tmp4 rid
                                 
00005e 940c 0101                 ISR _S_OCAaddr
000101 2700                      	clr _s_r_ocia_tmp1
000102 9300 0121                 	sts _S_TCCRB, _s_r_ocia_tmp1
000104 9300 0125                 	sts _S_TCNTH, _s_r_ocia_tmp1
000106 9300 0124                 	sts _S_TCNTL, _s_r_ocia_tmp1
000108 9100 0207                 	lds _s_r_ocia_tmp1, _s_ram_state
00010a 3000                      	cpi _s_r_ocia_tmp1, _S_STATE_SCR
00010b f041                      	breq _s_l_isr_oca_scr
                                 	; from top
00010c e000                      	ldi _s_r_ocia_tmp1, _S_STATE_SCR
00010d 9110 020c                 	lds _s_r_ocia_tmp2, _s_ram_ttop_scr
00010f 9120 020d                 	lds _s_r_ocia_tmp3, _s_ram_ttop_scr + 1
000111 9130 020b                 	lds _s_r_ocia_tmp4, _s_ram_tccrb_scr
000113 c007                      	rjmp _s_l_isr_oca_done
                                 _s_l_isr_oca_scr:
                                 	; from scr
000114 e001                      	ldi _s_r_ocia_tmp1, _S_STATE_TOP
000115 9110 020f                 	lds _s_r_ocia_tmp2, _s_ram_ttop_top
000117 9120 0210                 	lds _s_r_ocia_tmp3, _s_ram_ttop_top + 1
000119 9130 020e                 	lds _s_r_ocia_tmp4, _s_ram_tccrb_top
                                 _s_l_isr_oca_done:
00011b 9300 0207                 	sts _s_ram_state, _s_r_ocia_tmp1
00011d 9320 0129                 	sts _S_OCRAH, _s_r_ocia_tmp3
00011f 9310 0128                 	sts _S_OCRAL, _s_r_ocia_tmp2
000121 9330 0121                 	sts _S_TCCRB, _s_r_ocia_tmp4
000123 9518                      	reti
                                 
                                 #undef _s_r_ocia_tmp1
                                 #undef _s_r_ocia_tmp2
                                 #undef _s_r_ocia_tmp3
                                 #undef _s_r_ocia_tmp4
                                 	
                                 #endif
                                 #include "pause.asm"
                                 
                                 #else
                                 #define _INC_P
                                 
                                 .dseg
000289                           _p_ram_prog: .byte 1
00028a                           _p_ram_prsnc_add: .byte 1
00028b                           _p_ram_absnc_sub: .byte 1
                                 
00028c                           _p_ram_bm_paused: .byte 2*16
0002ac                           _p_ram_bm_resuming: .byte 2*16
                                 .cseg
                                 
                                 .eseg
00000c 08                        ee_p_dsoff_sub: .db 8
00000d 04                        ee_p_dson_add: .db 4
                                 .cseg
                                 
                                 #define _p_r_setup_tmp @0
                                 
                                 .macro P_SRC_SETUP
                                 	clr _p_r_setup_tmp
                                 	sts _p_ram_prog, _p_r_setup_tmp
                                 	; load
                                 	SP_SRC_LOAD_TO_RAM ee_p_dsoff_sub, _p_ram_absnc_sub, 1
                                 	SP_SRC_LOAD_TO_RAM ee_p_dson_add, _p_ram_prsnc_add, 1
                                 	SP_SRC_LOAD_TO_RAM ee_p_bm_paused, _p_ram_bm_paused, 2*16
                                 	SP_SRC_LOAD_TO_RAM ee_p_bm_resuming, _p_ram_bm_resuming, 2*16
                                 .endmacro
                                 
                                 #undef _p_r_setup_tmp
                                 
                                 #define _p_r_draw_col @0
                                 #define _p_r_draw_cl @1
                                 #define _p_r_draw_ch @2
                                 #define _p_r_draw_tmp @3
                                 
                                 .macro P_SRC_DRAW
                                 	lds _p_r_draw_tmp, _p_ram_prog
                                 	swap _p_r_draw_tmp
                                 	andi _p_r_draw_tmp, 0b1111
                                 	cp _p_r_draw_col, _p_r_draw_tmp
                                 	brsh _p_l_src_draw_pause
                                 	ldi XH, HIGH(_p_ram_bm_resuming)
                                 	ldi XL, LOW(_p_ram_bm_resuming)
                                 	rjmp _p_l_src_draw_begin
                                 _p_l_src_draw_pause:
                                 	ldi XH, HIGH(_p_ram_bm_paused)
                                 	ldi XL, LOW(_p_ram_bm_paused)
                                 _p_l_src_draw_begin:
                                 	mov _p_r_draw_tmp, _p_r_draw_col
                                 	lsl _p_r_draw_tmp
                                 	add XL, _p_r_draw_tmp
                                 	clr _p_r_draw_tmp
                                 	adc XH, _p_r_draw_tmp
                                 	ld _p_r_draw_ch, X+
                                 	ld _p_r_draw_cl, X
                                 _p_l_src_draw_done:
                                 .endmacro
                                 
                                 #undef _p_r_draw_col
                                 #undef _p_r_draw_cl
                                 #undef _p_r_draw_ch
                                 #undef _p_r_draw_tmp
                                 
                                 #define _p_r_update_tmp1 @0
                                 #define _p_r_update_tmp2 @1
                                 
                                 .macro P_SRC_UPDATE
                                 	lds _p_r_update_tmp1, ds_ram_out_state
                                 	lds _p_r_update_tmp2, _p_ram_prog
                                 	tst _p_r_update_tmp1
                                 	breq _p_l_src_update_sub
                                 	lds _p_r_update_tmp1, _p_ram_prsnc_add
                                 	add _p_r_update_tmp2, _p_r_update_tmp1
                                 	brcc _p_l_src_update_done
                                 	sts ml_ram_screen, _p_r_update_tmp2
                                 	G_SRC_RESUME
                                 	rjmp _p_l_src_update_done
                                 _p_l_src_update_sub:
                                 	lds _p_r_update_tmp1, _p_ram_absnc_sub
                                 	sub _p_r_update_tmp2, _p_r_update_tmp1
                                 	brcc _p_l_src_update_done
                                 	clr _p_r_update_tmp2
                                 _p_l_src_update_done:
                                 	sts _p_ram_prog, _p_r_update_tmp2
                                 .endmacro
                                 
                                 #undef _p_r_update_tmp1
                                 #undef _p_r_update_tmp2
                                 
                                 #endif
                                 #include "game.asm"
                                 
                                 #else
                                 #define _INC_G
                                 
                                 #define _G_TIMER 3
                                 
                                 TIM_DEF _G, _G_TIMER
                                 
                                 #define _G_SPAWN_COUNT 4
                                 #define _G_SPAWN_RAND_MASK (_G_SPAWN_COUNT - 1)
                                 
                                 #define _g_setup_tmp1 @0
                                 #define _g_setup_tmp2 @1
                                 
                                 .macro G_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _g_setup_tmp1
                                 	sts _G_TCCRA, _g_setup_tmp1
                                 	sts _G_TCCRB, _g_setup_tmp1
                                 	sts _G_TCCRC, _g_setup_tmp1
                                 	; set timer interrupt mask
                                 	ldi _g_setup_tmp1, OCIEA_VAL
                                 	sts _G_TIMSK, _g_setup_tmp1
                                 	; clear frame
                                 	ldi XL, LOW( _g_ram_frame )
                                 	ldi XH, HIGH( _g_ram_frame )
                                 	clr _g_setup_tmp2
                                 	ldi _g_setup_tmp1, 16*3
                                 _g_l_setup_clear_loop:
                                 	st X+, _g_setup_tmp2
                                 	dec _g_setup_tmp1
                                 	brne _g_l_setup_clear_loop
                                 	;set empty
                                 	ldi _g_setup_tmp1, 1
                                 	sts _g_ram_spawn_countdown, _g_setup_tmp1
                                 	clr _g_setup_tmp1
                                 	sts g_ram_score, _g_setup_tmp1
                                 	sts g_ram_score + 1, _g_setup_tmp1
                                 	; set ds
                                 	ldi _g_setup_tmp1, 7
                                 	sts _g_ram_col, _g_setup_tmp1
                                 	ldi _g_setup_tmp1, 127
                                 	sts _g_ram_dsval, _g_setup_tmp1
                                 	sts _g_ram_dsval_slow, _g_setup_tmp1
                                 	; load
                                 	SP_SRC_LOAD_TO_RAM ee_g_bm_player_acs, _g_ram_bm_player_acs, 16
                                 	SP_SRC_LOAD_TO_RAM ee_g_bm_enemy_al, _g_ram_bm_enemy_al, 16
                                 	SP_SRC_LOAD_TO_RAM ee_g_bm_spawns, _g_ram_bm_spawns, 2*_G_SPAWN_COUNT
                                 	SP_SRC_LOAD_TO_RAM ee_g_spawn_period, _g_ram_spawn_period, 1
                                 	SP_SRC_LOAD_TO_RAM ee_g_smooth, _g_ram_smooth, 1
                                 	SP_SRC_LOAD_TO_RAM ee_g_smooth_slow, _g_ram_smooth_slow, 1
                                 	SP_SRC_LOADI_TIME ee_g_tim_propf
                                 	sts _G_OCRAH, sp_data_th
                                 	sts _G_OCRAL, sp_data_tl
                                 	ori sp_data, WGMB_VAL(4)
                                 	sts _g_ram_tccrb, sp_data
                                 	BZ_SRC_LOAD ee_g_snd_pause, _g_ram_snd_pause, _g_setup_tmp1
                                 	BZ_SRC_LOAD ee_g_snd_resume, _g_ram_snd_resume, _g_setup_tmp1
                                 	BZ_SRC_LOAD ee_g_snd_over, _g_ram_snd_over, _g_setup_tmp1
                                 .endmacro
                                 
                                 .dseg
0002cc                           _g_ram_smooth: .byte 1
0002cd                           _g_ram_smooth_slow: .byte 1
0002ce                           _g_ram_dsval: .byte 1
0002cf                           _g_ram_dsval_slow: .byte 1
0002d0                           _g_ram_col: .byte 1
0002d1                           _g_ram_frame: .byte 16*3
000301                           _g_ram_tccrb: .byte 1
000302                           _g_ram_spawn_countdown: .byte 1
000303                           _g_ram_spawn_period: .byte 1
000304                           g_ram_score: .byte 2
000306                           _g_ram_bm_player_acs: .byte 16
000316                           _g_ram_bm_enemy_al: .byte 16
000326                           _g_ram_bm_spawns: .byte 2*_G_SPAWN_COUNT
00032e                           _g_ram_snd_pause: .byte BZ_SND_BYTES
000360                           _g_ram_snd_resume: .byte BZ_SND_BYTES
000392                           _g_ram_snd_over: .byte BZ_SND_BYTES
                                 .cseg
                                 
                                 .eseg
00000e 08                        ee_g_spawn_period: .db 8
00000f 08                        ee_g_smooth: .db 8
000010 03                        ee_g_smooth_slow: .db 3
000011 1b 06                     ee_g_tim_propf: .dw int( 0.1 * T16_PROPF + 0.5 )
                                 ee_g_snd_pause:
000013 10 27
000015 1b 06                     .dw 10000, int( 0.1 * T16_PROPF + 0.5)
000017 98 3a
000019 1b 06                     .dw 15000, int( 0.1 * T16_PROPF + 0.5)
00001b 00 00
00001d 00 00                     .dw 0, 0
                                 ee_g_snd_resume:
00001f 98 3a
000021 1b 06                     .dw 15000, int( 0.1 * T16_PROPF + 0.5)
000023 10 27
000025 1b 06                     .dw 10000, int( 0.1 * T16_PROPF + 0.5)
000027 00 00
000029 00 00                     .dw 0, 0
                                 ee_g_snd_over:
00002b 10 27
00002d 1b 06                     .dw 10000, int( 0.1 * T16_PROPF + 0.5)
00002f 98 3a
000031 1b 06                     .dw 15000, int( 0.1 * T16_PROPF + 0.5)
000033 20 4e
000035 1b 06                     .dw 20000, int( 0.1 * T16_PROPF + 0.5)
000037 00 00
000039 00 00                     .dw 0, 0
                                 .cseg
                                 
                                 #undef _g_setup_tmp1
                                 #undef _g_setup_tmp2
                                 
                                 #define _g_tmp1 ml_tmp1
                                 #define _g_tmp2 ml_tmp2
                                 #define _g_tmp3 ml_tmp3
                                 #define _g_tmp4 ml_tmp4
                                 
                                 .macro G_SRC_UPDATE
                                 	rjmp _g_l_update
                                 ; tmp1 (a)
                                 ; tmp2 (b)
                                 ; tmp3 (prog)
                                 _g_l_smooth:
                                 	cp _g_tmp1, _g_tmp2
                                 	brsh _g_l_smooth_greater
                                 	mov _g_tmp4, _g_tmp2
                                 	sub _g_tmp4, _g_tmp1
                                 	cp _g_tmp4, _g_tmp3
                                 	brlo _g_l_smooth_clamp
                                 	add _g_tmp1, _g_tmp3
                                 	ret
                                 _g_l_smooth_greater:
                                 	mov _g_tmp4, _g_tmp1
                                 	sub _g_tmp4, _g_tmp2
                                 	cp _g_tmp4, _g_tmp3
                                 	brlo _g_l_smooth_clamp
                                 	sub _g_tmp1, _g_tmp3
                                 	ret
                                 _g_l_smooth_clamp:
                                 	mov _g_tmp1, _g_tmp2
                                 	ret
                                 
                                 _g_l_update:
                                 	; smooth
                                 	lds _g_tmp1, ds_ram_out_state
                                 	tst _g_tmp1
                                 	breq _g_l_update_smooth_zombie
                                 	lds _g_tmp2, ds_ram_out_val
                                 	; svals = svals * smooths + rval * (1-smooths)
                                 	lds _g_tmp1, _g_ram_dsval_slow
                                 	lds _g_tmp3, _g_ram_smooth_slow
                                 	rcall _g_l_smooth
                                 	sts _g_ram_dsval_slow, _g_tmp1
                                 	; sval = sval * smooth + rval * (1-smooth)
                                 	lds _g_tmp1, _g_ram_dsval
                                 	lds _g_tmp3, _g_ram_smooth
                                 	rcall _g_l_smooth
                                 	sts _g_ram_dsval, _g_tmp1
                                 	rjmp _g_l_update_smooth_done
                                 _g_l_update_smooth_zombie:
                                 	; sval = sval * smooth + svals * (1-smooth)
                                 	lds _g_tmp1, _g_ram_dsval
                                 	lds _g_tmp2, _g_ram_dsval_slow
                                 	lds _g_tmp3, _g_ram_smooth
                                 	rcall _g_l_smooth
                                 	sts _g_ram_dsval, _g_tmp1
                                 _g_l_update_smooth_done:
                                 	swap _g_tmp1
                                 	andi _g_tmp1, 0b00001111
                                 	sts _g_ram_col, _g_tmp1
                                 
                                 .endmacro
                                 
                                 #define _g_col ml_col
                                 #define _g_cl ml_cl
                                 #define _g_ch ml_ch
                                 
                                 .macro G_SRC_DRAW
                                 	; draw frame
                                 	ldi XH, HIGH(_g_ram_frame + 1)
                                 	ldi XL, LOW(_g_ram_frame + 1)
                                 	ldi _g_tmp1, 3
                                 	mul _g_tmp1, _g_col
                                 	clr _g_tmp1
                                 	add XL, mull
                                 	adc XH, _g_tmp1
                                 	ld _g_ch, X+
                                 	ld _g_cl, X
                                 	; draw ship
                                 	lds _g_tmp1, _g_ram_col
                                 	sub _g_tmp1, _g_col
                                 	brpl _g_l_draw_abs_done
                                 	neg _g_tmp1
                                 _g_l_draw_abs_done:
                                 	ldi XH, HIGH( _g_ram_bm_player_acs )
                                 	ldi XL, LOW( _g_ram_bm_player_acs )
                                 	add XL, _g_tmp1
                                 	clr _g_tmp1
                                 	adc XH, _g_tmp1
                                 	ld _g_tmp1, X
                                 	mov _g_tmp2, _g_cl
                                 	or _g_cl, _g_tmp1
                                 	and _g_tmp2, _g_tmp1
                                 	breq _g_l_draw_done
                                 	BZ_SRC_START _g_ram_snd_over
                                 	ldi _g_tmp1, ML_SCREEN_SCORE
                                 	sts ml_ram_screen, _g_tmp1
                                 	clr _g_tmp1
                                 	sts _G_TCCRB, _g_tmp1
                                 	rjmp ml_l_gameover
                                 _g_l_draw_done:
                                 .endmacro
                                 
                                 
                                 #undef _g_col
                                 #undef _g_cl
                                 #undef _g_ch
                                 
                                 .macro G_SRC_PAUSE
                                 	BZ_SRC_START _g_ram_snd_pause
                                 	clr _g_tmp1
                                 	sts _G_TCCRB, _g_tmp1
                                 .endmacro
                                 
                                 .macro G_SRC_RESUME
                                 	BZ_SRC_START _g_ram_snd_resume
                                 	lds _g_tmp1, _g_ram_tccrb
                                 	sts _G_TCCRB, _g_tmp1
                                 .endmacro
                                 
                                 #undef _g_tmp1
                                 #undef _g_tmp2
                                 #undef _g_tmp3
                                 
                                 #define _g_tmp1 ria
                                 #define _g_tmp2 rib
                                 #define _g_tmp3 ric
                                 #define _g_sl ri0
                                 #define _g_sh ri1
                                 
000040 940c 0124                 ISR _G_OCAaddr
                                 	; score
000124 91e0 0304                 	lds ZL, g_ram_score
000126 91f0 0305                 	lds ZH, g_ram_score + 1
000128 9631                      	adiw ZH:ZL, 1
000129 93e0 0304                 	sts g_ram_score, ZL
00012b 93f0 0305                 	sts g_ram_score + 1, ZH
                                 	; spawn
00012d 9100 0302                 	lds _g_tmp1, _g_ram_spawn_countdown
00012f 950a                      	dec _g_tmp1
000130 f531                      	brne _g_l_oca_vframe_done
                                 	; spawn begin
000131 93af                      	push XL
000132 93bf                      	push XH
000133 9100 00a4                 	lds _g_tmp1, _DS_TCNTL
000135 7003                      	andi _g_tmp1, _G_SPAWN_RAND_MASK
                                 	; _g_tmp1 is rand betweeen 0 and _G_SPAWN_COUNT
000136 e2a6                      	ldi XL, LOW( _g_ram_bm_spawns )
000137 e0b3                      	ldi XH, HIGH( _g_ram_bm_spawns )
000138 2711                      	clr _g_tmp2
000139 0f00                      	lsl _g_tmp1
00013a 1f11                      	rol _g_tmp2
00013b 0fa0                      	add XL, _g_tmp1
00013c 1fb1                      	adc XH, _g_tmp2
00013d 903d                      	ld _g_sh, X+
00013e 902c                      	ld _g_sl, X
00013f ede1                      	ldi ZL, LOW( _g_ram_frame )
000140 e0f2                      	ldi ZH, HIGH( _g_ram_frame )
000141 e110                      	ldi _g_tmp2, 16
000142 2722                      	clr _g_tmp3
                                 	; sh:sl is the spawn pattern, Z is the frame, tmp2 is 16, tmp3 is 0
                                 _g_l_spawn_loop:
000143 0c22                      	lsl _g_sl
000144 1c33                      	rol _g_sh
000145 f418                      	brcc _g_l_spawn_loop_continue
000146 e1a6                      	ldi XL, LOW( _g_ram_bm_enemy_al )
000147 e0b3                      	ldi XH, HIGH( _g_ram_bm_enemy_al )
000148 e120                      	ldi _g_tmp3, 16
                                 _g_l_spawn_loop_continue:
000149 2322                      	tst _g_tmp3
00014a f019                      	breq _g_l_spawn_loop_void
00014b 952a                      	dec _g_tmp3
00014c 910d                      	ld _g_tmp1, X+
00014d c001                      	rjmp _g_l_spawn_loop_draw
                                 _g_l_spawn_loop_void:
00014e 2700                      	clr _g_tmp1
                                 _g_l_spawn_loop_draw:
00014f 8300                      	st Z, _g_tmp1
000150 9633                      	adiw ZH:ZL, 3
000151 951a                      	dec _g_tmp2
000152 f781                      	brne _g_l_spawn_loop
                                 	; spawn end
000153 9100 0303                 	lds _g_tmp1, _g_ram_spawn_period
000155 91bf                      	pop XH
000156 91af                      	pop XL
                                 _g_l_oca_vframe_done:
000157 9300 0302                 	sts _g_ram_spawn_countdown, _g_tmp1
                                 	; shift
000159 ede1                      	ldi ZL, LOW( _g_ram_frame )
00015a e0f2                      	ldi ZH, HIGH( _g_ram_frame )
00015b e100                      	ldi _g_tmp1, 16
                                 _g_l_oca_shift_loop:
00015c 8110                      	ld _g_tmp2, Z
00015d 9516                      	lsr _g_tmp2
00015e 9311                      	st Z+, _g_tmp2
00015f 8110                      	ld _g_tmp2, Z
000160 9517                      	ror _g_tmp2
000161 9311                      	st Z+, _g_tmp2
000162 8110                      	ld _g_tmp2, Z
000163 9517                      	ror _g_tmp2
000164 9311                      	st Z+, _g_tmp2
000165 950a                      	dec _g_tmp1
000166 f7a9                      	brne _g_l_oca_shift_loop
000167 9518                      	reti
                                 
                                 #undef _g_tmp1
                                 #undef _g_tmp2
                                 #undef _g_sh
                                 #undef _g_sl
                                 
                                 #endif
                                 
                                 ml_l_loop:
000168 e170                      	ldi ml_col, 16
                                 
000169 9140 0203                 	lds ml_tmp1, ml_ram_screen
00016b 3040                      	cpi ml_tmp1, ML_SCREEN_GAME
00016c f4f9                      	brne _ml_l_loop_update_paused
00016d c135                      	rjmp _ml_g_l_update
                                 _ml_g_update_done:
                                 	
00016e 9140 03ce                 	lds ml_tmp1, ds_ram_out_state
000170 9150 0204                 	lds ml_tmp2, _ml_ram_pprog
000172 2344                      	tst ml_tmp1
000173 f481                      	brne _ml_l_update_sub
000174 9140 0205                 	lds ml_tmp1, _ml_ram_pabsnc_add
000176 0f54                      	add ml_tmp2, ml_tmp1
000177 f488                      	brcc _ml_l_update_done
000178 e042                      	ldi ml_tmp1, ML_SCREEN_PAUSE
000179 9340 0203                 	sts ml_ram_screen, ml_tmp1
00017b 94f8
00017c e0f3
00017d e2ee
00017e 940e 00e4
000180 2744
000181 9340 0091                 	G_SRC_PAUSE
000183 c005                      	rjmp _ml_l_update_done
                                 _ml_l_update_sub:
000184 9140 0206                 	lds ml_tmp1, _ml_ram_pprsnc_sub
000186 1b54                      	sub ml_tmp2, ml_tmp1
000187 f408                      	brcc _ml_l_update_done
000188 2755                      	clr ml_tmp2
                                 _ml_l_update_done:
000189 9350 0204                 	sts _ml_ram_pprog, ml_tmp2
                                 	
00018b c003                      	rjmp _ml_l_loop_column
                                 _ml_l_loop_update_paused:
00018c 3042                      	cpi ml_tmp1, ML_SCREEN_PAUSE
00018d f409                      	brne _ml_l_loop_column
00018e c01d                      	rjmp _ml_p_l_update
                                 
                                 _ml_l_loop_column:
00018f 957a                      	dec ml_col
                                 
000190 9140 0203                 	lds ml_tmp1, ml_ram_screen
000192 3040                      	cpi ml_tmp1, ML_SCREEN_GAME
000193 f409                      	brne _ml_l_loop_draw_paused
000194 c078                      	rjmp _ml_g_l_draw
                                 _ml_l_loop_draw_paused:
000195 3042                      	cpi ml_tmp1, ML_SCREEN_PAUSE
000196 f599                      	brne _ml_s_l_draw
000197 c062                      	rjmp _ml_p_l_draw
                                 
                                 _ml_l_loop_flush:
000198 94f8                      	cli
000199 c098                      	rjmp _ml_lm_l_sendcol
                                 
                                 _ml_l_sendcol_done:
                                 
                                 #define _ml_lock ml_ch
                                 
00019a 2744                      	clr ml_tmp1
00019b 9340 00b2                 	sts _ML_TCNT, ml_tmp1
00019d 9140 0202                 	lds ml_tmp1, _ml_ram_tcs
00019f 9340 00b1                 	sts _ML_TCCRB, ml_tmp1
0001a1 ef9f                      	ser _ml_lock
0001a2 9478                      	sei
                                 
                                 _ml_l_loop_wait:
0001a3 2399                      	tst _ml_lock
0001a4 f7f1                      	brne _ml_l_loop_wait
                                 
0001a5 2377                      	tst ml_col
0001a6 f741                      	brne _ml_l_loop_column
0001a7 cfc0                      	rjmp ml_l_loop
                                 
00001a 940c 01a8                 ISR _ML_OCAaddr
0001a8 2799                      	clr _ml_lock
0001a9 9390 00b1                 	sts _ML_TCCRB, _ml_lock
0001ab 9518                      	reti
                                 
                                 #undef _ml_lock
                                 
                                 _ml_p_l_update:
0001ac 9140 03ce
0001ae 9150 0289
0001b0 2344
0001b1 f081
0001b2 9140 028a
0001b4 0f54
0001b5 f488
0001b6 9350 0203
0001b8 94f8
0001b9 e0f3
0001ba e6e0
0001bb 940e 00e4
0001bd 9140 0301
0001bf 9340 0091
0001c1 c005
0001c2 9140 028b
0001c4 1b54
0001c5 f408
0001c6 2755
0001c7 9350 0289                 	P_SRC_UPDATE ml_tmp1, ml_tmp2
0001c9 cfc5                      	rjmp _ml_l_loop_column
                                 
                                 _ml_s_l_draw:
0001ca 9140 0207
0001cc 3040
0001cd f039
0001ce 3042
0001cf f101
0001d0 e3a9
0001d1 e0b2
0001d2 e1c1
0001d3 e0d2
0001d4 c004
0001d5 e4a9
0001d6 e0b2
0001d7 e1c5
0001d8 e0d2
0001d9 2744
0001da 0fa7
0001db 1fb4
0001dc 919c
0001dd 2f47
0001de 9546
0001df 9546
0001e0 0fc4
0001e1 2744
0001e2 1fd4
0001e3 8148
0001e4 0f44
0001e5 0f44
0001e6 2f57
0001e7 7053
0001e8 0f45
0001e9 e5c9
0001ea e0d2
0001eb 0fc4
0001ec 2744
0001ed 1fd4
0001ee 8188
0001ef c009
0001f0 e1a9
0001f1 e0b2
0001f2 2f47
0001f3 0f44
0001f4 0fa4
0001f5 2744
0001f6 1fb4
0001f7 919d
0001f8 918c                      	S_SRC_DRAW ml_tmp1, ml_tmp2
0001f9 cf9e                      	rjmp _ml_l_loop_flush
                                 
                                 _ml_p_l_draw:
0001fa 9140 0289
0001fc 9542
0001fd 704f
0001fe 1774
0001ff f418
000200 e0b2
000201 eaac
000202 c002
000203 e0b2
000204 e8ac
000205 2f47
000206 0f44
000207 0fa4
000208 2744
000209 1fb4
00020a 919d
00020b 918c                      	P_SRC_DRAW ml_col, ml_cl, ml_ch, ml_tmp1
00020c cf8b                      	rjmp _ml_l_loop_flush
                                 
                                 _ml_g_l_draw:
00020d e0b2
00020e eda2
00020f e043
000210 9f47
000211 2744
000212 0da0
000213 1fb4
000214 919d
000215 918c
000216 9140 02d0
000218 1b47
000219 f40a
00021a 9541
00021b e0b3
00021c e0a6
00021d 0fa4
00021e 2744
00021f 1fb4
000220 914c
000221 2f58
000222 2b84
000223 2354
000224 f061
000225 94f8
000226 e0f3
000227 e9e2
000228 940e 00e4
00022a e041
00022b 9340 0203
00022d 2744
00022e 9340 0091
000230 c018                      	G_SRC_DRAW
000231 cf66                      	rjmp _ml_l_loop_flush
                                 
                                 _ml_lm_l_sendcol:
000232 e140
000233 e350
000234 9596
000235 9587
000236 f408
000237 e150
000238 b958
000239 6450
00023a b958
00023b 7b5f
00023c b958
00023d 954a
00023e f7a1
00023f e950
000240 b958
000241 e150
000242 b958
000243 e04f
000244 1b47
000245 2b54
000246 b958
000247 b948                      	LM_SRC_SENDCOL ml_col, ml_cl, ml_ch, ml_tmp1, ml_tmp2
000248 cf51                      	rjmp _ml_l_sendcol_done
                                 
                                 ml_l_gameover:
000249 c027
00024a e063
00024b 3e48
00024c 0756
00024d f4e0
00024e e06b
00024f 8369
000250 836a
000251 836b
000252 e090
000253 2766
000254 3644
000255 0756
000256 f020
000257 9593
000258 5644
000259 0b56
00025a cff9
00025b 2399
00025c f011
00025d 9399
00025e e890
00025f 304a
000260 f018
000261 9593
000262 504a
000263 cffb
000264 2399
000265 f011
000266 779f
000267 9399
000268 9349
000269 9508
00026a e069
00026b 9369
00026c 9369
00026d 9369
00026e e06a
00026f 8368
000270 9508
000271 e042
000272 9340 0207
000274 9140 0209
000276 9150 020a
000278 9350 0129
00027a 9340 0128
00027c 9140 0208
00027e 9340 0121
000280 e0ca
000281 e0d0
000282 de16
000283 2f40
000284 e0cb
000285 e0d0
000286 de12
000287 2f50
000288 90a0 0304
00028a 90b0 0305
00028c 154a
00028d 055b
00028e f448
00028f 2d0a
000290 e0ca
000291 e0d0
000292 de13
000293 2d0b
000294 e0cb
000295 e0d0
000296 de0f
000297 01a5
000298 e1c1
000299 e0d2
00029a dfaf
00029b e1c5
00029c e0d2
00029d 9140 0304
00029f 9150 0305
0002a1 dfa8                      	S_SRC_SET rma, rmb, rm0, rm1
0002a2 cec5                      	rjmp ml_l_loop
                                 
                                 _ml_g_l_update:
0002a3 c010
0002a4 1745
0002a5 f430
0002a6 2ea5
0002a7 1aa4
0002a8 16a6
0002a9 f040
0002aa 0f46
0002ab 9508
0002ac 2ea4
0002ad 1aa5
0002ae 16a6
0002af f010
0002b0 1b46
0002b1 9508
0002b2 2f45
0002b3 9508
0002b4 9140 03ce
0002b6 2344
0002b7 f089
0002b8 9150 03cd
0002ba 9140 02cf
0002bc 9160 02cd
0002be dfe5
0002bf 9340 02cf
0002c1 9140 02ce
0002c3 9160 02cc
0002c5 dfde
0002c6 9340 02ce
0002c8 c009
0002c9 9140 02ce
0002cb 9150 02cf
0002cd 9160 02cc
0002cf dfd4
0002d0 9340 02ce
0002d2 9542
0002d3 704f
0002d4 9340 02d0                 	G_SRC_UPDATE
0002d6 ce97                      	rjmp _ml_g_update_done
                                 
                                 #endif
                                 #include "distance_sens.asm"
                                 
                                 #else
                                 #define _INC_DS
                                 
                                 ; Francesco Zoccheddu
                                 ; ARE
                                 ; distance sensor
                                 ; dirty timer 4 module and registers
                                 
                                 #define _DS_TIMER 4
                                 #define _DS_IO L
                                 
                                 TIM_DEF _DS, _DS_TIMER
                                 IO_DEF _DS, _DS_IO
                                 
                                 #define _DS_ICP_BIT 0 ; digital pin 49
                                 #define _DS_TRIG_BIT 6 ; digital pin 43
                                 
                                 #define _ds_r_setup_tmp @0
                                 
                                 ; [SOURCE] setup
                                 ; @0 (dirty immediate register)
                                 .macro DS_SRC_SETUP
                                 	; clear timer control registers
                                 	clr _ds_r_setup_tmp
                                 	sts _DS_TCCRA, _ds_r_setup_tmp
                                 	sts _DS_TCCRB, _ds_r_setup_tmp
                                 	sts _DS_TCCRC, _ds_r_setup_tmp
                                 	; set timer interrupt mask
                                 	ldi _ds_r_setup_tmp, ICIE_VAL | OCIEA_VAL
                                 	sts _DS_TIMSK, _ds_r_setup_tmp
                                 	; set data direction register to output for trig pin
                                 	ldi _ds_r_setup_tmp, 1 << _DS_TRIG_BIT
                                 	sts _DS_DDR, _ds_r_setup_tmp
                                 	; load ee
                                 	SP_SRC_LOAD_TO_RAM ee_ds_min_ic, _ds_ram_min, 2
                                 	SP_SRC_LOAD_TO_RAM ee_ds_max_ic, _ds_ram_max, 2
                                 	SP_SRC_LOAD_TO_RAM ee_ds_emax_ic, _ds_ram_emax, 2
                                 	SP_SRC_LOADI_TIME ee_ds_period_propf
                                 	ori sp_data, ICN_VAL | ICES_VAL
                                 	sts _DS_OCRAH, sp_data_th
                                 	sts _DS_OCRAL, sp_data_tl
                                 	sts _ds_ram_tccrb, sp_data
                                 .endmacro
                                 
                                 #undef _ds_r_setup_tmp
                                 
                                 .eseg
00003b aa 03                     ee_ds_period_propf: .dw int( 0.06 * T16_PROPF + 0.5)
00003d 46 00                     ee_ds_min_ic: .dw 70
00003f fa 00                     ee_ds_max_ic: .dw 250
000041 2c 01                     ee_ds_emax_ic: .dw 300
                                 .cseg
                                 
                                 .dseg
0003c4                           _ds_ram_tccrb: .byte 1
0003c5                           _ds_ram_min: .byte 2
0003c7                           _ds_ram_max: .byte 2
0003c9                           _ds_ram_emax: .byte 2
0003cb                           _ds_ram_ltime: .byte 2
0003cd                           ds_ram_out_val: .byte 1
0003ce                           ds_ram_out_state: .byte 1
                                 .cseg
                                 
000054 940c 02d7                 ISR _DS_OCAaddr
                                 ds_isr_trig:
                                 
                                 #define _ds_rr_trig_tmp ria
                                 
                                 	; start trig
0002d7 e400                      	ldi _ds_rr_trig_tmp, 1 << _DS_TRIG_BIT
0002d8 9300 010b                 	sts _DS_PORT, _ds_rr_trig_tmp
                                 	; stop timer
0002da 2700                      	clr _ds_rr_trig_tmp
0002db 9300 00a1                 	sts _DS_TCCRB, _ds_rr_trig_tmp
                                 	; clear counter
0002dd 9300 00a5                 	sts _DS_TCNTH, _ds_rr_trig_tmp
0002df 9300 00a4                 	sts _DS_TCNTL, _ds_rr_trig_tmp
                                 	; skip if not measured
0002e1 9100 0072                 	lds _ds_rr_trig_tmp, _DS_TIMSK
0002e3 fd05                      	sbrc _ds_rr_trig_tmp, ICIE
0002e4 c039                      	rjmp _ds_isr_trig_bad
                                 
                                 #undef _ds_rr_trig_tmp
                                 
                                 #define _ds_rr_trig_cursl ria
                                 #define _ds_rr_trig_cursh rib
                                 #define _ds_rr_trig_inl ri0
                                 #define _ds_rr_trig_inh ri1
                                 
                                 	; skip if greater than max
0002e5 9100 03c9                 	lds _ds_rr_trig_cursl, _ds_ram_emax
0002e7 9110 03ca                 	lds _ds_rr_trig_cursh, _ds_ram_emax + 1
0002e9 9020 03cb                 	lds _ds_rr_trig_inl, _ds_ram_ltime
0002eb 9030 03cc                 	lds _ds_rr_trig_inh, _ds_ram_ltime + 1
0002ed 1620                      	cp _ds_rr_trig_inl, _ds_rr_trig_cursl
0002ee 0631                      	cpc _ds_rr_trig_inh, _ds_rr_trig_cursh
0002ef f570                      	brsh _ds_isr_trig_bad
                                 
                                 #define _ds_rr_trig_in_lol ri2
                                 #define _ds_rr_trig_in_loh ri3
                                 #define _ds_rr_trig_in_hil ri4
                                 #define _ds_rr_trig_in_hih ri5
                                 #define _ds_rr_trig_out_lo ric
                                 #define _ds_rr_trig_out_hi rid
                                 #define _ds_rr_trig_out ri6
                                 
                                 	; clamp
                                 	; setup clamp parameters
0002f0 9040 03c5                 	lds _ds_rr_trig_in_lol, _ds_ram_min
0002f2 9050 03c6                 	lds _ds_rr_trig_in_loh, _ds_ram_min + 1
0002f4 9060 03c7                 	lds _ds_rr_trig_in_hil, _ds_ram_max
0002f6 9070 03c8                 	lds _ds_rr_trig_in_hih, _ds_ram_max + 1
0002f8 2722                      	clr _ds_rr_trig_out_lo
0002f9 ef3f                      	ser _ds_rr_trig_out_hi
                                 	; start clamping
                                 _ds_l_isr_trig_clamp_start:
0002fa 0183                      	movw _ds_rr_trig_cursh:_ds_rr_trig_cursl, _ds_rr_trig_in_hih:_ds_rr_trig_in_hil
0002fb 2e83                      	mov _ds_rr_trig_out, _ds_rr_trig_out_hi
                                 _ds_l_isr_trig_clamp_loop:
0002fc 1b32                      	sub _ds_rr_trig_out_hi, _ds_rr_trig_out_lo
0002fd 3032                      	cpi _ds_rr_trig_out_hi, 2
0002fe f0b8                      	brlo _ds_l_isr_trig_clamp_stop
0002ff 0f32                      	add _ds_rr_trig_out_hi, _ds_rr_trig_out_lo
000300 1502                      	cp _ds_rr_trig_cursl, _ds_rr_trig_inl
000301 0513                      	cpc _ds_rr_trig_cursh, _ds_rr_trig_inh
000302 f099                      	breq _ds_l_isr_trig_clamp_stop
000303 f448                      	brsh _ds_l_isr_trig_clamp_smaller
                                 _ds_l_isr_trig_clamp_greater:
000304 0128                      	movw _ds_rr_trig_in_loh:_ds_rr_trig_in_lol, _ds_rr_trig_cursh:_ds_rr_trig_cursl
000305 2d28                      	mov _ds_rr_trig_out_lo, _ds_rr_trig_out
000306 0d06                      	add _ds_rr_trig_cursl, _ds_rr_trig_in_hil
000307 1d17                      	adc _ds_rr_trig_cursh, _ds_rr_trig_in_hih
000308 9517                      	ror _ds_rr_trig_cursh
000309 9507                      	ror _ds_rr_trig_cursl
00030a 0e83                      	add _ds_rr_trig_out, _ds_rr_trig_out_hi
00030b 9487                      	ror _ds_rr_trig_out
00030c cfef                      	rjmp _ds_l_isr_trig_clamp_loop
                                 _ds_l_isr_trig_clamp_smaller:
00030d 0138                      	movw _ds_rr_trig_in_hih:_ds_rr_trig_in_hil, _ds_rr_trig_cursh:_ds_rr_trig_cursl
00030e 2d38                      	mov _ds_rr_trig_out_hi, _ds_rr_trig_out
00030f 0d04                      	add _ds_rr_trig_cursl, _ds_rr_trig_in_lol
000310 1d15                      	adc _ds_rr_trig_cursh, _ds_rr_trig_in_loh
000311 9517                      	ror _ds_rr_trig_cursh
000312 9507                      	ror _ds_rr_trig_cursl
000313 0e82                      	add _ds_rr_trig_out, _ds_rr_trig_out_lo
000314 9487                      	ror _ds_rr_trig_out
000315 cfe6                      	rjmp _ds_l_isr_trig_clamp_loop
                                 
                                 #undef _ds_rr_trig_cursl
                                 #undef _ds_rr_trig_cursh
                                 #undef _ds_rr_trig_inl
                                 #undef _ds_rr_trig_inh
                                 #undef _ds_rr_trig_in_lol
                                 #undef _ds_rr_trig_in_loh
                                 #undef _ds_rr_trig_in_hil
                                 #undef _ds_rr_trig_in_hih
                                 #undef _ds_rr_trig_out_lo
                                 #undef _ds_rr_trig_out_hi
                                 
                                 #define _ds_rr_trig_tmp1 ria
                                 #define _ds_rr_trig_tmp2 rib
                                 
                                 _ds_l_isr_trig_clamp_stop:
                                 	; write output value
000316 9100 03cd                 	lds _ds_rr_trig_tmp1, ds_ram_out_val
000318 0d08                      	add _ds_rr_trig_tmp1, _ds_rr_trig_out
000319 9507                      	ror _ds_rr_trig_tmp1
00031a 9300 03cd                 	sts ds_ram_out_val, _ds_rr_trig_tmp1
                                 	; set output state to true
00031c ef0f                      	ser _ds_rr_trig_tmp1
00031d c004                      	rjmp _ds_isr_trig_done
                                 
                                 #undef _ds_rr_trig_out
                                 
                                 _ds_isr_trig_bad:
                                 	; wait
00031e e305                      	ldi _ds_rr_trig_tmp1, 53
                                 _ds_isr_trig_bad_wait:
00031f 950a                      	dec _ds_rr_trig_tmp1
000320 f7f1                          brne _ds_isr_trig_bad_wait
                                 	; set output state to false
000321 2700                      	clr _ds_rr_trig_tmp1
                                 _ds_isr_trig_done:
                                 	; write output state
000322 9300 03ce                 	sts ds_ram_out_state, _ds_rr_trig_tmp1
000324 b905                      	BL_SRC_OUT _ds_rr_trig_tmp1
                                 	; cancel pending interrupts
000325 e202                      	ldi _ds_rr_trig_tmp1, ICF_VAL | OCFA_VAL
000326 bb09                      	out _DS_TIFR, _ds_rr_trig_tmp1
                                 	; enable interrupts
000327 e202                      	ldi _ds_rr_trig_tmp1, ICIE_VAL | OCIEA_VAL
000328 9300 0072                 	sts _DS_TIMSK, _ds_rr_trig_tmp1
                                 	; stop trig
00032a 2700                      	clr _ds_rr_trig_tmp1
00032b 9300 010b                 	sts _DS_PORT, _ds_rr_trig_tmp1
                                 	; start timer
00032d 9100 03c4                 	lds _ds_rr_trig_tmp1, _ds_ram_tccrb
00032f 9300 00a1                 	sts _DS_TCCRB, _ds_rr_trig_tmp1
000331 9518                      	reti
                                 
                                 #undef _ds_rr_trig_tmp1
                                 #undef _ds_rr_trig_tmp2
                                 
                                 #define _ds_r_ici_icrl ri0
                                 #define _ds_r_ici_icrh ri1
                                 #define _ds_r_ici_tmp1 ria
                                 #define _ds_r_ici_tmp2 rib
                                 
000052 940c 0332                 ISR _DS_ICPaddr
                                 	; load ICR
000332 9020 00a6                 	lds _ds_r_ici_icrl, _DS_ICRL
000334 9030 00a7                 	lds _ds_r_ici_icrh, _DS_ICRH
                                 	; check if rising or falling edge
000336 9100 00a1                 	lds _ds_r_ici_tmp1, _DS_TCCRB
000338 ff06                      	sbrs _ds_r_ici_tmp1, ICES
000339 c00a                      	rjmp _ds_l_isr_icp_falling
                                 _ds_l_isr_icp_rising:
                                 	; save ICR to sram
00033a 9220 03cb                 	sts _ds_ram_ltime, _ds_r_ici_icrl
00033c 9230 03cc                 	sts _ds_ram_ltime + 1, _ds_r_ici_icrh
                                 	; set input capture to falling edge
00033e 9100 00a1                 	lds _ds_r_ici_tmp1, _DS_TCCRB
000340 7b0f                      	andi _ds_r_ici_tmp1, ~(ICES_VAL)
000341 9300 00a1                 	sts _DS_TCCRB, _ds_r_ici_tmp1
000343 9518                      	reti
                                 _ds_l_isr_icp_falling:
                                 	; save difference to sram
000344 9100 03cb                 	lds _ds_r_ici_tmp1, _ds_ram_ltime
000346 9110 03cc                 	lds _ds_r_ici_tmp2, _ds_ram_ltime + 1
000348 1a20                      	sub _ds_r_ici_icrl, _ds_r_ici_tmp1
000349 0a31                      	sbc _ds_r_ici_icrh, _ds_r_ici_tmp2
00034a 9220 03cb                 	sts _ds_ram_ltime, _ds_r_ici_icrl
00034c 9230 03cc                 	sts _ds_ram_ltime + 1, _ds_r_ici_icrh
                                 	; disable input capture interrupt
00034e e002                      	ldi _ds_r_ici_tmp1, OCIEA_VAL
00034f 9300 0072                 	sts _DS_TIMSK, _ds_r_ici_tmp1
000351 9518                      	reti
                                 
                                 #undef _ds_r_ici_icrh
                                 #undef _ds_r_ici_icrl
                                 #undef _ds_r_ici_tmp1
                                 #undef _ds_r_ici_tmp2
                                 
                                 #endif
                                 
                                 .eseg
                                 #include "bitmaps.asm"
                                 
000043 06
000044 03
000045 03
000046 06
000047 00
000048 00
000049 00
00004a 00
00004b 00
00004c 00
00004d 00
00004e 00
00004f 00
000050 00
000051 00
000052 00                        .db 0b00000110,0b00000011,0b00000011,0b00000110,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000
                                 ee_g_bm_enemy_al_end:
                                 ee_g_bm_player_acs: ; g_bm_player_acs 16x8
000053 02
000054 01
000055 00
000056 00
000057 00
000058 00
000059 00
00005a 00
00005b 00
00005c 00
00005d 00
00005e 00
00005f 00
000060 00
000061 00
000062 00                        .db 0b00000010,0b00000001,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000
                                 ee_g_bm_player_acs_end:
                                 ee_g_bm_spawns: ; g_bm_spawns 4x16
000063 00
000064 08
000065 00
000066 80
000067 08
000068 00
000069 80
00006a 00                        .db 0b00000000,0b00001000,0b00000000,0b10000000,0b00001000,0b00000000,0b10000000,0b00000000
                                 ee_g_bm_spawns_end:
                                 ee_p_bm_paused: ; p_bm_paused 16x16
00006b 00
00006c 00
00006d 00
00006e 00
00006f 00
000070 00
000071 00
000072 00
000073 07
000074 e0
000075 07
000076 e0
000077 07
000078 e0
000079 00
00007a 00
00007b 00
00007c 00
00007d 07
00007e e0
00007f 07
000080 e0
000081 07
000082 e0
000083 00
000084 00
000085 00
000086 00
000087 00
000088 00
000089 00
00008a 00                        .db 0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000111,0b11100000,0b00000111,0b11100000,0b00000111,0b11100000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000111,0b11100000,0b00000111,0b11100000,0b0000011                                 1,0b11100000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000
                                 ee_p_bm_paused_end:
00008b ff
00008c ff
00008d ff
00008e ff
00008f ff
000090 ff
000091 ff
000092 ff
000093 f8
000094 1f
000095 f8
000096 1f
000097 f8
000098 1f
000099 ff
00009a ff
00009b ff
00009c ff
00009d f8
00009e 1f
00009f f8
0000a0 1f
0000a1 f8
0000a2 1f
0000a3 ff
0000a4 ff
0000a5 ff
0000a6 ff
0000a7 ff
0000a8 ff
0000a9 ff
0000aa ff                        ee_p_bm_resuming: ; p_bm_resuming 16x16
                                 .db 0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111000,0b00011111,0b11111000,0b00011111,0b11111000,0b00011111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111000,0b00011111,0b11111000,0b00011111,0b1111100                                 0,0b00011111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111
0000ab 00
0000ac 3e
0000ad 22
0000ae 3e
0000af 00
0000b0 00
0000b1 00
0000b2 3e
0000b3 00
0000b4 2e
0000b5 2a
0000b6 3a
0000b7 00
0000b8 2a
0000b9 2a
0000ba 3e
0000bb 00
0000bc 38
0000bd 08
0000be 3e
0000bf 00
0000c0 3a
0000c1 2a
0000c2 2e
0000c3 00
0000c4 3e
0000c5 2a
0000c6 2e
0000c7 00
0000c8 30
0000c9 20
0000ca 3e
0000cb 00
0000cc 3e
0000cd 2a
0000ce 3e
0000cf 00
0000d0 3a
0000d1 2a
0000d2 3e
0000d3 00
0000d4 20
0000d5 20
0000d6 00
0000d7 00
0000d8 00
0000d9 00
0000da 00                        ee_p_bm_resuming_end:
                                 ee_s_bm_digits: ; s_bm_digits 48x8
                                 .db 0b00000000,0b00111110,0b00100010,0b00111110,0b00000000,0b00000000,0b00000000,0b00111110,0b00000000,0b00101110,0b00101010,0b00111010,0b00000000,0b00101010,0b00101010,0b00111110,0b00000000,0b00111000,0b00001000,0b00111110,0b00000000,0b00111010,0b00101010000db 00
0000dc 3a
0000dd 2a
0000de 2e
0000df 00
0000e0 3e
0000e1 22
0000e2 22
0000e3 00
0000e4 3e
0000e5 2c
0000e6 3a
0000e7 00
0000e8 12
0000e9 00
0000ea 00                        0,0b00101110,0b00000000,0b00111110,0b00101010,0b00101110,0b00000000,0b00110000,0b00100000,0b00111110,0b00000000,0b00111110,0b00101010,0b00111110,0b00000000,0b00111010,0b00101010,0b00111110,0b00000000,0b00100000,0b00100000,0b00000000,0b00000000,0b00000000,                                 0b00000000,0b00000000
                                 ee_s_bm_digits_end:
0000eb 00
0000ec 00
0000ed 7c
0000ee fe
0000ef 44
0000f0 82
0000f1 5c
0000f2 fe
0000f3 00
0000f4 00
0000f5 7c
0000f6 f8
0000f7 50
0000f8 06
0000f9 7c
0000fa f8
0000fb 00
0000fc 00
0000fd 7c
0000fe fe
0000ff 60
000100 92
000101 7c
000102 00
000103 00
000104 fe
000105 7c
000106 98
000107 54
000108 f6
000109 00
00010a 00                        ee_s_bm_scr: ; s_bm_scr 16x8
                                 .db 0b00000000,0b00111010,0b00101010,0b00101110,0b00000000,0b00111110,0b00100010,0b00100010,0b00000000,0b00111110,0b00101100,0b00111010,0b00000000,0b00010010,0b00000000,0b00000000
                                 ee_s_bm_scr_end:
00010b 00
00010c 20
00010d 3e
00010e 20
00010f 00
000110 3e
000111 22
000112 3e
000113 00
000114 3e
000115 28
000116 38
000117 00
000118 12
000119 00
00011a 00                        ee_s_bm_splash: ; s_bm_splash 16x16
                                 .db 0b00000000,0b00000000,0b01111100,0b11111110,0b01000100,0b10000010,0b01011100,0b11111110,0b00000000,0b00000000,0b01111100,0b11111000,0b01010000,0b00000110,0b01111100,0b11111000,0b00000000,0b00000000,0b01111100,0b11111110,0b01100000,0b10010010,0b0111110                                 .cseg
                                 
                                 ; main
                                 
                                 .eseg
                                 ee_m_snd_start:
00011b 20 4e
00011d 1b 06                     .dw 20000, int( 0.1 * T16_PROPF + 0.5)
00011f 98 3a
000121 1b 06                     .dw 15000, int( 0.1 * T16_PROPF + 0.5)
000123 10 27
000125 1b 06                     .dw 10000, int( 0.1 * T16_PROPF + 0.5)
000127 00 00
000129 00 00                     .dw 0, 0
                                 .cseg
                                 
                                 .dseg
0003cf                           _m_ram_snd_start: .byte BZ_SND_BYTES
                                 .cseg
                                 
                                 #define m_tmp rma
                                 
000000 940c 0352                 ISR 0
                                 m_l_reset:
                                 	
000352 94f8                      	cli
                                 	; setup stack
000353 e241
000354 bf4e
000355 ef4f
000356 bf4d                      	STACK_SETUP m_tmp
                                 	; setup serial programming
000357 e040
000358 9340 00c5
00035a e647
00035b 9340 00c4
00035d e040
00035e 9340 00c0
000360 e948
000361 9340 00c1
000363 e846
000364 9340 00c2                 	SP_SRC_SETUP m_tmp
                                 	; setup builtin LED
000366 e840
000367 b944                      	BL_SRC_SETUP m_tmp
000368 2744
000369 b945                      	BL_SRC_OFF m_tmp
                                 	; setup LED matrix
00036a ef4f
00036b b947                      	LM_SRC_SETUP m_tmp
                                 	;setup distance sensor
00036c 2744
00036d 9340 00a0
00036f 9340 00a1
000371 9340 00a2
000373 e242
000374 9340 0072
000376 e440
000377 9340 010a
000379 e3cd
00037a e0d0
00037b eca5
00037c e0b3
00037d e032
00037e dd22
00037f e3cf
000380 e0d0
000381 eca7
000382 e0b3
000383 e032
000384 dd1c
000385 e4c1
000386 e0d0
000387 eca9
000388 e0b3
000389 e032
00038a dd16
00038b e3cb
00038c e0d0
00038d dd0b
00038e 2f10
00038f 9621
000390 dd08
000391 2f20
000392 dd1b
000393 6c00
000394 9320 00a9
000396 9310 00a8
000398 9300 03c4                 	DS_SRC_SETUP m_tmp
                                 	; setup buzzer
00039a 2744
00039b bb43
00039c e142
00039d bd44
00039e 2744
00039f bd45
0003a0 2744
0003a1 9340 0080
0003a3 9340 0081
0003a5 9340 0082
0003a7 e042
0003a8 9340 006f                 	BZ_SRC_SETUP m_tmp
                                 	; setup draw loop
0003aa 2744
0003ab 9340 00b0
0003ad 9340 00b1
0003af e042
0003b0 9340 0070
0003b2 2744
0003b3 9340 0204
0003b5 e042
0003b6 9340 0203
0003b8 e0c2
0003b9 e0d0
0003ba e0a5
0003bb e0b2
0003bc e031
0003bd dce3
0003be e0c3
0003bf e0d0
0003c0 e0a6
0003c1 e0b2
0003c2 e031
0003c3 dcdd
0003c4 e0c0
0003c5 e0d0
0003c6 dcd2
0003c7 2f10
0003c8 9621
0003c9 dccf
0003ca 2f20
0003cb dce2
0003cc 9320 00b3
0003ce 9300 0202
0003d0 2744
0003d1 9340 0289
0003d3 e0cc
0003d4 e0d0
0003d5 e8ab
0003d6 e0b2
0003d7 e031
0003d8 dcc8
0003d9 e0cd
0003da e0d0
0003db e8aa
0003dc e0b2
0003dd e031
0003de dcc2
0003df e6cb
0003e0 e0d0
0003e1 e8ac
0003e2 e0b2
0003e3 e230
0003e4 dcbc
0003e5 e8cb
0003e6 e0d0
0003e7 eaac
0003e8 e0b2
0003e9 e230
0003ea dcb6
0003eb 2744
0003ec 9340 0090
0003ee 9340 0091
0003f0 9340 0092
0003f2 e042
0003f3 9340 0071
0003f5 eda1
0003f6 e0b2
0003f7 2766
0003f8 e340
0003f9 936d
0003fa 954a
0003fb f7e9
0003fc e041
0003fd 9340 0302
0003ff 2744
000400 9340 0304
000402 9340 0305
000404 e047
000405 9340 02d0
000407 e74f
000408 9340 02ce
00040a 9340 02cf
00040c e5c3
00040d e0d0
00040e e0a6
00040f e0b3
000410 e130
000411 dc8f
000412 e4c3
000413 e0d0
000414 e1a6
000415 e0b3
000416 e130
000417 dc89
000418 e6c3
000419 e0d0
00041a e2a6
00041b e0b3
00041c e038
00041d dc83
00041e e0ce
00041f e0d0
000420 e0a3
000421 e0b3
000422 e031
000423 dc7d
000424 e0cf
000425 e0d0
000426 ecac
000427 e0b2
000428 e031
000429 dc77
00042a e1c0
00042b e0d0
00042c ecad
00042d e0b2
00042e e031
00042f dc71
000430 e1c1
000431 e0d0
000432 dc66
000433 2f10
000434 9621
000435 dc63
000436 2f20
000437 dc76
000438 9320 0099
00043a 9310 0098
00043c 6008
00043d 9300 0301
00043f e04a
000440 e1c3
000441 e0d0
000442 e2ae
000443 e0b3
000444 dc54
000445 2f10
000446 9621
000447 dc51
000448 2f20
000449 dc64
00044a 9621
00044b 930d
00044c 932d
00044d dc4b
00044e 2f10
00044f 9621
000450 dc48
000451 2f20
000452 dc5b
000453 9621
000454 930d
000455 932d
000456 931d
000457 954a
000458 f759
000459 e04a
00045a e1cf
00045b e0d0
00045c e6a0
00045d e0b3
00045e dc3a
00045f 2f10
000460 9621
000461 dc37
000462 2f20
000463 dc4a
000464 9621
000465 930d
000466 932d
000467 dc31
000468 2f10
000469 9621
00046a dc2e
00046b 2f20
00046c dc41
00046d 9621
00046e 930d
00046f 932d
000470 931d
000471 954a
000472 f759
000473 e04a
000474 e2cb
000475 e0d0
000476 e9a2
000477 e0b3
000478 dc20
000479 2f10
00047a 9621
00047b dc1d
00047c 2f20
00047d dc30
00047e 9621
00047f 930d
000480 932d
000481 dc17
000482 2f10
000483 9621
000484 dc14
000485 2f20
000486 dc27
000487 9621
000488 930d
000489 932d
00048a 931d
00048b 954a
00048c f759
00048d 2744
00048e 9340 0120
000490 9340 0121
000492 9340 0122
000494 e042
000495 9340 0073
000497 e042
000498 9340 0207
00049a eecb
00049b e0d0
00049c e1a9
00049d e0b2
00049e e230
00049f dc01
0004a0 edcb
0004a1 e0d0
0004a2 e4a9
0004a3 e0b2
0004a4 e130
0004a5 dbfb
0004a6 e0cb
0004a7 e0d1
0004a8 e3a9
0004a9 e0b2
0004aa e130
0004ab dbf5
0004ac eacb
0004ad e0d0
0004ae e5a9
0004af e0b2
0004b0 e330
0004b1 dbef
0004b2 e0c4
0004b3 e0d0
0004b4 dbe4
0004b5 2f10
0004b6 9621
0004b7 dbe1
0004b8 2f20
0004b9 dbf4
0004ba 9310 0209
0004bc 9320 020a
0004be 9300 0208
0004c0 e0c6
0004c1 e0d0
0004c2 dbd6
0004c3 2f10
0004c4 9621
0004c5 dbd3
0004c6 2f20
0004c7 dbe6
0004c8 9310 020c
0004ca 9320 020d
0004cc 9300 020b
0004ce e0c8
0004cf e0d0
0004d0 dbc8
0004d1 2f10
0004d2 9621
0004d3 dbc5
0004d4 2f20
0004d5 dbd8
0004d6 9310 020f
0004d8 9320 0210
0004da 9300 020e                 	ML_SRC_SETUP m_tmp
                                 	; play startup sound
0004dc e04a
0004dd e1cb
0004de e0d1
0004df ecaf
0004e0 e0b3
0004e1 dbb7
0004e2 2f10
0004e3 9621
0004e4 dbb4
0004e5 2f20
0004e6 dbc7
0004e7 9621
0004e8 930d
0004e9 932d
0004ea dbae
0004eb 2f10
0004ec 9621
0004ed dbab
0004ee 2f20
0004ef dbbe
0004f0 9621
0004f1 930d
0004f2 932d
0004f3 931d
0004f4 954a
0004f5 f759                      	BZ_SRC_LOAD ee_m_snd_start, _m_ram_snd_start, m_tmp
0004f6 94f8
0004f7 e0f3
0004f8 ecef
0004f9 940e 00e4                 	BZ_SRC_START _m_ram_snd_start
0004fb 94f8                      	cli
0004fc ddda                      	rcall ds_isr_trig
                                 	; enter main loop
0004fd cc6a                      	rjmp ml_l_loop
                                 
                                 
                                 #undef m_tmp


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

"ATmega2560" register use summary:
x  :  33 y  :  12 z  :  12 r0 :   1 r1 :   0 r2 :   9 r3 :   9 r4 :   3 
r5 :   3 r6 :   4 r7 :   4 r8 :   8 r9 :   0 r10:  10 r11:   4 r12:   0 
r13:   0 r14:   0 r15:   0 r16: 173 r17:  64 r18:  57 r19:  30 r20: 201 
r21:  44 r22:  24 r23:  12 r24:   7 r25:  18 r26:  41 r27:  41 r28:  65 
r29:  65 r30:  12 r31:  12 
Registers used: 29 out of 35 (82.9%)

"ATmega2560" instruction use summary:
.lds  :   0 .sts  :   0 adc   :  10 add   :  18 adiw  :  25 and   :   1 
andi  :  14 asr   :   0 bclr  :   0 bld   :   1 brbc  :   0 brbs  :   0 
brcc  :   6 brcs  :   0 break :   0 breq  :  16 brge  :   0 brhc  :   0 
brhs  :   0 brid  :   0 brie  :   0 brlo  :   5 brlt  :   0 brmi  :   0 
brne  :  19 brpl  :   1 brsh  :   6 brtc  :   0 brts  :   0 brvc  :   0 
brvs  :   0 bset  :   0 bst   :   1 call  :   4 cbi   :   0 cbr   :   0 
clc   :   0 clh   :   0 cli   :   7 cln   :   0 clr   :  38 cls   :   0 
clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   7 cpc   :   5 
cpi   :  11 cpse  :   0 dec   :  13 eicall:   0 eijmp :   0 elpm  :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :   2 inc   :   2 jmp   :   8 ld    :  21 ldd   :   0 ldi   : 231 
lds   :  69 lpm   :   0 lsl   :  10 lsr   :   5 mov   :  51 movw  :   4 
mul   :   1 muls  :   0 mulsu :   0 neg   :   1 nop   :   0 or    :   4 
ori   :   3 out   :  29 pop   :   2 push  :   2 rcall :  72 ret   :  14 
reti  :   9 rjmp  :  41 rol   :   4 ror   :  11 sbc   :   2 sbci  :   0 
sbi   :   6 sbic  :   3 sbis  :   0 sbiw  :   0 sbr   :   0 sbrc  :   2 
sbrs  :   5 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   4 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  33 std   :   3 sts   : 105 sub   :   9 subi  :   2 swap  :   4 
tst   :  11 wdr   :   0 
Instructions used: 57 out of 116 (49.1%)

"ATmega2560" memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0009fc   2360      0   2360  262144   0.9%
[.dseg] 0x000200 0x000401      0    513    513    8192   6.3%
[.eseg] 0x000000 0x00012b      0    299    299    4096   7.3%

Assembly complete, 0 errors, 0 warnings
