#ifdef INTV
;################## INTV ##################

	.org ICP4addr
	rjmp ds_isr_ic_l

	.org ICP5addr
	rjmp ds_isr_ic_r

	.org OC4Aaddr
	rjmp ds_isr_oca_l

	.org OC5Aaddr
	rjmp ds_isr_oca_r

;##########################################
#endif

#ifdef SETUP
;################## SETUP #################

	;set trig port direction
	ldi ds_tmp1, DS_TRIG_PORT_L | DS_TRIG_PORT_R
	sts DS_PORTD, ds_tmp1
	;clear counter
	clr ds_tmp1
	sts DS_TCNTH_L, ds_tmp1
	sts DS_TCNTL_L, ds_tmp1
	sts DS_TCNTH_R, ds_tmp1
	sts DS_TCNTL_R, ds_tmp1
	;set TCCRB (ICNC, ICES, [0], WGM3, WGM2, CS2, CS1, CS0)
	ldi ds_tmp1, DS_TCCRB_ICNC | DS_TCCRB_ICES_FALLING | DS_TCCRB_WGM | DS_TCCRB_CS
	sts DS_TCCRB_L, ds_tmp1
	ldi ds_tmp1, DS_TCCRB_WGM
	sts DS_TCCRB_R, ds_tmp1
	;set TIMSK ([0], [0], ICIE, [0], OCIEC, OCIEB, OCIEA, TOIE)
	ldi ds_tmp1, DS_TIMSK_OCIEA
	sts DS_TIMSK_L, ds_tmp1
	clr ds_tmp1
	sts DS_TIMSK_R, ds_tmp1
	;set OCRA
	ldi ds_tmp1, LOW( DS_TIMEOUT_LOW_TOP )
	ldi ds_tmp2, HIGH( DS_TIMEOUT_LOW_TOP )
	sts DS_OCRAH_L, ds_tmp2
	sts DS_OCRAL_L, ds_tmp1

;##########################################
#endif

#ifdef CODE
;################## CODE ##################

	sram_byte DS_R_OUT_L
	sram_byte DS_R_OUT_R

	.def ds_tl = r4
	.def ds_th = r5
	.def ds_tmp1 = r20
	.def ds_tmp2 = r21

	;ports
	.equ DS_PORT = PORTL
	.equ DS_PORTD = DDRL
	.equ DS_TRIG_PORT_L = 1 << 6 ;digital pin 43
	.equ DS_TRIG_PORT_R = 1 << 7 ;digital pin 42
	.equ DS_ECHO_PORT_L = 1 << 0 ;digital pin 49
	.equ DS_ECHO_PORT_R = 1 << 1 ;digital pin 48

	;params
	.equ DS_ECHO_TIMEOUT_LOW_US = 40000
	.equ DS_ECHO_MIN_US = 150
	.equ DS_ECHO_MAX_US = 2000
	.equ DS_ECHO_MAX_HELD_US = 3000
	.equ DS_ECHO_TIMEOUT_HIGH_US = 30000

	.equ DS_TCNTL_L = TCNT4L
	.equ DS_TCNTH_L = TCNT4H
	.equ DS_TCCRB_L = TCCR4B
	.equ DS_TIMSK_L = TIMSK4
	.equ DS_OCRAL_L = OCR4AL
	.equ DS_OCRAH_L = OCR4AH
	.equ DS_TIFR_L = TIFR4
	.equ DS_ICRL_L = ICR4L
	.equ DS_ICRH_L = ICR4H

	.equ DS_TCNTL_R = TCNT5L
	.equ DS_TCNTH_R = TCNT5H
	.equ DS_TCCRB_R = TCCR5B
	.equ DS_TIMSK_R = TIMSK5
	.equ DS_OCRAL_R = OCR5AL
	.equ DS_OCRAH_R = OCR5AH
	.equ DS_TIFR_R = TIFR5
	.equ DS_ICRL_R = ICR5L
	.equ DS_ICRH_R = ICR5H

	;autogenerated
	;timer time values
	TU_M_PSCL (DS_ECHO_TIMEOUT_LOW_US + DS_ECHO_TIMEOUT_HIGH_US) / 1000000.0, 16, DS_PSCL
	TU_M_CS DS_PSCL, DS_CS
	TU_M_TOP_EQU DS_PSCL, DS_ECHO_TIMEOUT_LOW_US / 1000000.0, DS_TIMEOUT_LOW_TOP
	TU_M_TOP_EQU DS_PSCL, DS_ECHO_TIMEOUT_HIGH_US / 1000000.0, DS_TIMEOUT_HIGH_TOP_DIFF
	;waveform generation mode
	.equ DS_TCCRB_WGM = (4 >> 2) << 3
	;input capture noise canceler
	.equ DS_TCCRB_ICNC = 1 << 7
	;input capture edge select
	.equ DS_TCCRB_ICES_FALLING = 0 << 6
	.equ DS_TCCRB_ICES_RISING = 1 << 6
	;prescaler value
	.equ DS_TCCRB_CS = DS_CS
	;input capture interrupt mask
	.equ DS_TIMSK_ICIE = 1 << 5
	;output capture match interrupt mask
	.equ DS_TIMSK_OCIEA = 1 << 1
	;input capture interrupt mask
	.equ DS_TIFR_ICF = 1 << 5
	;output capture match interrupt flag
	.equ DS_TIFR_OCFA = 1 << 1

	;times
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 0 / 16.0) / 1000000.0, DS_TIME_0
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 1 / 16.0) / 1000000.0, DS_TIME_1
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 2 / 16.0) / 1000000.0, DS_TIME_2
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 3 / 16.0) / 1000000.0, DS_TIME_3
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 4 / 16.0) / 1000000.0, DS_TIME_4
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 5 / 16.0) / 1000000.0, DS_TIME_5
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 6 / 16.0) / 1000000.0, DS_TIME_6
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 7 / 16.0) / 1000000.0, DS_TIME_7
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 8 / 16.0) / 1000000.0, DS_TIME_8
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 9 / 16.0) / 1000000.0, DS_TIME_9
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 10 / 16.0) / 1000000.0, DS_TIME_10
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 11 / 16.0) / 1000000.0, DS_TIME_11
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 12 / 16.0) / 1000000.0, DS_TIME_12
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 13 / 16.0) / 1000000.0, DS_TIME_13
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 14 / 16.0) / 1000000.0, DS_TIME_14
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MIN_US + (DS_ECHO_MAX_US - DS_ECHO_MIN_US) * 15 / 16.0) / 1000000.0, DS_TIME_15
	TU_M_TOP_EQU DS_PSCL, (DS_ECHO_MAX_HELD_US) / 1000000.0, DS_TIME_OVER

;input capture event isr
;params (0)'side'
.macro DS_ISR_ICI
	;end cycle if falling
	lds ds_tmp1, DS_TCCRB_@0
	cpi ds_tmp1, DS_TCCRB_ICNC | DS_TCCRB_ICES_FALLING | DS_TCCRB_WGM | DS_TCCRB_CS
	breq ds_isr_oca_@0
	;rising edge
	;save input capture register
	lds ds_tl, DS_ICRL_@0
	lds ds_th, DS_ICRH_@0
	;enable input capture interrupt on falling edge
	ldi ds_tmp1, DS_TCCRB_ICNC | DS_TCCRB_ICES_FALLING | DS_TCCRB_WGM | DS_TCCRB_CS
	sts DS_TCCRB_@0, ds_tmp1
	;set output compare match value
	movw ds_tmp2:ds_tmp1, ds_th:ds_tl
	subi ds_tmp1, -LOW( DS_TIMEOUT_HIGH_TOP_DIFF )
	sbci ds_tmp2, -HIGH( DS_TIMEOUT_HIGH_TOP_DIFF )
	sts DS_OCRAH_@0, ds_tmp2
	sts DS_OCRAL_@0, ds_tmp1
	;clear interrupt flags
	ldi ds_tmp1, DS_TIFR_ICF | DS_TIFR_OCFA
	out DS_TIFR_@0, ds_tmp1
	reti
.endmacro

;params (0)'compare' (1)'jump label'
.macro DS_SR_COMPARE
	ldi ds_tmp2, HIGH( @0 )
	cpi ds_tmp1, LOW( @0 )
	cpc ds_th, ds_tmp2
	brlo @1
.endmacro

.equ DS_OUT_FAILURE_BIT = 7

;params (tmp2:tmp1)'falling time' (th:tl)'rising time'
;result (tl[3:0])'result' (tl[OUT_FAILURE_BIT])'failure'
;86 cycles
ds_sr_output:
	sub ds_tmp1, ds_tl
	sbc ds_tmp2, ds_th
	brne ds_l_sr_output_valid
	;output low timeout failure
	;set result failure bit
	ldi ds_tmp1, 1 << DS_OUT_FAILURE_BIT
	mov ds_tl, ds_tmp1
	;wait
	ldi  ds_tmp1, 23
	dec  ds_tmp1
    brne PC - 1
    rjmp ds_l_sr_output_ret
ds_l_sr_output_valid:
	;output valid
	mov ds_th, ds_tmp2
	ldi ds_tmp2, 15
	mov ds_tl, ds_tmp2
	;state (th:tmp1)'measure' (tmp2)[free] (tl)'counter'
	DS_SR_COMPARE DS_TIME_1, ds_l_sr_output_0
	DS_SR_COMPARE DS_TIME_2, ds_l_sr_output_1
	DS_SR_COMPARE DS_TIME_3, ds_l_sr_output_2
	DS_SR_COMPARE DS_TIME_4, ds_l_sr_output_3
	DS_SR_COMPARE DS_TIME_5, ds_l_sr_output_4
	DS_SR_COMPARE DS_TIME_6, ds_l_sr_output_5
	DS_SR_COMPARE DS_TIME_7, ds_l_sr_output_6
	DS_SR_COMPARE DS_TIME_8, ds_l_sr_output_7
	DS_SR_COMPARE DS_TIME_9, ds_l_sr_output_8
	DS_SR_COMPARE DS_TIME_10, ds_l_sr_output_9
	DS_SR_COMPARE DS_TIME_11, ds_l_sr_output_10
	DS_SR_COMPARE DS_TIME_12, ds_l_sr_output_11
	DS_SR_COMPARE DS_TIME_13, ds_l_sr_output_12
	DS_SR_COMPARE DS_TIME_14, ds_l_sr_output_13
	DS_SR_COMPARE DS_TIME_15, ds_l_sr_output_14
	DS_SR_COMPARE DS_TIME_OVER, ds_l_sr_output_15
	;output high timeout failure
	;set result failure bit
	ldi ds_tmp1, 1 << DS_OUT_FAILURE_BIT
	mov ds_tl, ds_tmp1
	rjmp ds_l_sr_output_ret_w1
	;results
ds_l_sr_output_0:
	dec ds_tl
ds_l_sr_output_1:
	dec ds_tl
ds_l_sr_output_2:
	dec ds_tl
ds_l_sr_output_3:
	dec ds_tl
ds_l_sr_output_4:
	dec ds_tl
ds_l_sr_output_5:
	dec ds_tl
ds_l_sr_output_6:
	dec ds_tl
ds_l_sr_output_7:
	dec ds_tl
ds_l_sr_output_8:
	dec ds_tl
ds_l_sr_output_9:
	dec ds_tl
ds_l_sr_output_10:
	dec ds_tl
ds_l_sr_output_11:
	dec ds_tl
ds_l_sr_output_12:
	dec ds_tl
ds_l_sr_output_13:
	dec ds_tl
ds_l_sr_output_14:
	dec ds_tl
ds_l_sr_output_15:
	ldi ds_tmp1, 16
	sub ds_tmp1, ds_tl
ds_l_sr_output_wait:
	dec ds_tmp1
	brne ds_l_sr_output_wait
ds_l_sr_output_ret:
	ret
ds_l_sr_output_ret_w1:
	nop
	ret

;output compare match event isr
;params (0)'side' (1)'opponent side'
.macro DS_ISR_OCA
	;start opponent trigger signal
	ldi ds_tmp1, DS_TRIG_PORT_@1
	sts DS_PORT, ds_tmp1
	;stop timer
	ldi ds_tmp1, DS_TCCRB_WGM
	sts DS_TCCRB_@0, ds_tmp1
	;disable timer interrupts
	clr ds_tmp1
	sts DS_TIMSK_@0, ds_tmp1
	;set opponent timer output compare match value
	ldi ds_tmp1, LOW( DS_TIMEOUT_LOW_TOP )
	ldi ds_tmp2, HIGH( DS_TIMEOUT_LOW_TOP )
	sts DS_OCRAH_@1, ds_tmp2
	sts DS_OCRAL_@1, ds_tmp1
	;clear opponent timer
	clr ds_tmp1
	sts DS_TCNTH_@1, ds_tmp1
	sts DS_TCNTL_@1, ds_tmp1
	;calculate output
	lds ds_tmp1, DS_ICRL_@0
	lds ds_tmp2, DS_ICRH_@0
	rcall ds_sr_output
	sbrs ds_tl, DS_OUT_FAILURE_BIT
	sts DS_R_OUT_@0, ds_tl
	;set opponent timer interrupts
	ldi ds_tmp1, DS_TIMSK_ICIE | DS_TIMSK_OCIEA
	sts DS_TIMSK_@1, ds_tmp1
	;clear both timers interrupt flags
	ldi ds_tmp1, DS_TIFR_ICF | DS_TIFR_OCFA
	out DS_TIFR_@0, ds_tmp1
	out DS_TIFR_@1, ds_tmp1
	;start opponent timer
	ldi ds_tmp1, DS_TCCRB_ICNC | DS_TCCRB_ICES_RISING | DS_TCCRB_WGM | DS_TCCRB_CS
	sts DS_TCCRB_@1, ds_tmp1
	;clear records
	lds ds_tl, DS_ICRL_@1
	lds ds_th, DS_ICRH_@1
	;wait for 10uS (116 cycles to 160 cycles)
	ldi  ds_tmp1, 13
	dec  ds_tmp1
    brne PC - 1
	;end all trigger signals
	clr ds_tmp1
	sts DS_PORT, ds_tmp1
	reti
.endmacro

ds_isr_ic_l:
	DS_ISR_ICI L

ds_isr_oca_l:
	DS_ISR_OCA L, R

ds_isr_ic_r:
	DS_ISR_ICI R

ds_isr_oca_r:
	DS_ISR_OCA R, L

;##########################################
#endif
